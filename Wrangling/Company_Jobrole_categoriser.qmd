---
title: "Company and jobroles infoFinder"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Initiation

## R libraries

```{r}
library(googlesheets4)
library(conflicted)
library(tidyverse)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)

knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
```

## Python packages

```{python}
from openai import OpenAI
import os
import pandas as pd
import ast

app_key = os.environ.get("OPENAI_API_KEY")
client = OpenAI(api_key=app_key)

df = pd.DataFrame()
```

# Data

```{r}
ss <- "https://docs.google.com/spreadsheets/d/1xzpre5Ej_7OEGRU4EA7KZuMQnSz5YCyTx5Sdbml6bQE/edit#gid=0"

main <- read_sheet(ss, sheet = "Main")

companyAnalysis <- read_sheet(ss, sheet = "CompanyAnalysis")

locations_coord <- read_sheet(ss, sheet = "locations_coord")

to_be_uploaded <- data.frame( Name = character(), Description = numeric(0), Number_of_ads = numeric(0),
                              Location_of_jobs = numeric(0), Multinational = numeric(0),
                              Organisation_type = numeric(0), Ownership_type = numeric(0),
                              Industry_Sector = numeric(0), Hydrogen_relevance = numeric(0),
                              Hydrogen_relevance_motivation = numeric(0), 
                              Hydrogen_specialist = numeric(0), Nationality = numeric(0),
                              Founded_year = numeric(0))
```

# Companies

Finding unique and new companies

```{r}
all_companies <- main %>%
  select(Company) %>%
  unique() %>%
  arrange(Company)

previously_known_companies <- companyAnalysis %>%
  select(Name)

new_companies <- anti_join(all_companies,previously_known_companies,by = c("Company" = "Name"))
py$df <- new_companies
```

Calculate number of ads published by each company

```{r}
nr_of_ads <- main %>%
  count(Company, name = 'Number_of_ads')

colnames(nr_of_ads) <- c("Name","Number_of_ads")

to_be_uploaded <- to_be_uploaded %>%
  bind_rows(nr_of_ads %>% select(any_of(names(to_be_uploaded))))
```

Compile in what countries each company is recruiting

```{r}
company_country <- main %>%
  select(Company,Location) %>%
  separate_rows(Location, sep = ", ") %>%
  # Optionally, trim any extra whitespace (just in case)
  mutate(Location = trimws(Location)) %>%
  left_join(locations_coord %>% select(New_name,country_code) %>% unique(),
            by = c('Location' = 'New_name')) %>%
  select(Company,country_code) %>%
  unique() %>%
  group_by(Company) %>%
  summarise(country_code = paste(sort(unique(country_code)), collapse = ", ")) %>%
  ungroup() 

colnames(company_country) <- c("Name","Location_of_jobs")

to_be_uploaded <- to_be_uploaded %>%
  left_join(company_country, by = "Name") %>%  
  mutate(Location_of_jobs = Location_of_jobs.y) %>%         
  select(Name, Description, Number_of_ads, Location_of_jobs, Multinational, Organisation_type,
         Ownership_type, Industry_Sector, Hydrogen_relevance, Hydrogen_relevance_motivation, 
         Hydrogen_specialist, Nationality, Founded_year, -Location_of_jobs.y, -Location_of_jobs.x)    
```

## AI-functions

Here we have a collection AI functions and their implementation.

### Description of companies

Python function using OpenAI API

```{python}
def description(text):
  example = "['Company_A','Short description first sentence. Second sentence']"
  
  content = "You are a helpful assistent that when provided the name of an organisation respond with a short description, two scentences (no more, no less), about the organisation and what they do. Your response should be in the form of a python list which consists of two items, the first being the name of the organisation provided, the second being the short description of the organisation. Do not add any text or characters outside of the list and it should be able to be read as a python list. Here is an example: "+example
  
  prompt = f"Describe the following organisation: '{text}'"
  
  response = client.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "system", 
                   "content": content},
                  {"role":"user",
                   "content":prompt}],
    max_tokens=16384,
    temperature=0.5
  )
  return response.choices[0].message.content.strip()

```

Run the function

```{python}
results = []

for i in range(len(df)):
  print(i)
  text = df['Company'][i]
  print(text)
  result = description(text)
  print(f'api went ok! i = {i}')
  results.append(result)
```

Create a dataframe to start add the rest of the results to

```{python}
try:
  results_data = ast.literal_eval(results[0])
  results_combined = pd.DataFrame([results_data], columns=["Name", "Description"])
  results_rest = results[1:]
  print(f'first df went ok!')
except:
  print('first df went error!')
```

Add the rest of the results

```{python}
incorrect_parts = []
for j in range(len(results_rest)):
  try:
    results_data = ast.literal_eval(results_rest[j])
    results_data_df = pd.DataFrame([results_data], columns=["Name", "Description"])
    results_combined = pd.concat([results_combined, results_data_df], ignore_index=True)
    print(f'added df went ok! j = {j}')
  except:
    incorrect_parts.append(j)
    print(f'added df went error! j = {j}')
```

Code area for fixing those chunks sent to API which did not come back with the right format - this cell is not to be run as is, but to be used based on the issues present

```{python}

```

The results should now be easy to view. However one can not fully trust the respond. Therefore should all results be checked and be added to the main-file with care. Easiest way is to upload it and read in Google Sheets. After changes has been made there can it be added with the rest of the companies.

```{r}
ai_api_results <- py$results_combined
write_sheet(ai_api_results, ss = ss, sheet = "test_upload")
```

## Combine data

This section is for the combination of all gathered data, the counted ads for each company, the description of them and the manually performed categorization of them.

### New Data

```{r}
categorization <- read_sheet(ss, sheet = "test_upload")
```

### Compilation

```{r}
to_be_uploaded <- to_be_uploaded %>%
  left_join(companyAnalysis, by = "Name") %>%  
  mutate(Description = Description.y, Number_of_ads = Number_of_ads.x, 
         Location_of_jobs = Location_of_jobs.x, Multinational = Multinational.y,
         Organisation_type = Organisation_type.y, Ownership_type = Ownership_type.y,
         Industry_Sector = Industry_Sector.y, Hydrogen_relevance = Hydrogen_relevance.y,
         Hydrogen_relevance_motivation = Hydrogen_relevance_motivation.y, 
         Hydrogen_specialist = Hydrogen_specialist.y, Nationality = Nationality.y,
         Founded_year = Founded_year.y) %>%         
  select(Name, Description, Number_of_ads, Location_of_jobs, Multinational, Organisation_type,
         Ownership_type, Industry_Sector, Hydrogen_relevance, Hydrogen_relevance_motivation, 
         Hydrogen_specialist, Nationality, Founded_year)

for (col in colnames(categorization)[-1]) {  # Exclude the "Name" column
  to_be_uploaded[[col]] <- ifelse(
    is.na(to_be_uploaded[[col]]) | to_be_uploaded[[col]] == "", 
    categorization[[col]][match(to_be_uploaded$Name, categorization$Name)], 
    to_be_uploaded[[col]]
  )
}

to_be_uploaded$Founded_year[to_be_uploaded$Founded_year == "NULL"] <- NA
```

```{r}
write_sheet(to_be_uploaded, ss = ss, sheet = "CompanyAnalysis")
```

# Job roles

---
title: "Masterscript"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Intro

This script includes all code for analysis, calculations, plots and tables used in the H2 paper as well as Nordic Hub meeting in Helsinki presentation.

NOTE: There are many tables and plots from previous scripts which are not included here regarding sectors, job roles, population size of cities and attempts at making maps.

# Libraries

```{r}
library(googlesheets4)
library(conflicted)
library(tidyverse)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
library(gtExtras)
library(ggthemes)
library(cluster)


library(gt)
library(patchwork)
library(tidygraph)
library(ggrepel)
library(ggraph)
library(broom)
library(ggfortify)
library(clusterSim)
library(clValid)
library(dendextend)
library(factoextra)
library(stats)
library(RColorBrewer)
library(ggplot2)
library(viridis)
library(gtsummary)
library(stringr)
library(forcats)
library(gsubfn)
```

# Data

## From Mainfile-sheet

```{r}
ss <- "https://docs.google.com/spreadsheets/d/1xzpre5Ej_7OEGRU4EA7KZuMQnSz5YCyTx5Sdbml6bQE/edit#gid=0"

df_main_raw <- read_sheet(ss, sheet = "Main")
df_geo_locations_raw <- read_sheet(ss, sheet = "locations_coord", range = "B:M")

df_companies_raw <- read_sheet(ss, sheet = "CompanyAnalysis")
df_job_roles_raw <- read_sheet(ss, sheet = "Job_roles")
```

## Other data

```{r}
# Labourforce 2023 in millions
# https://data.worldbank.org/indicator/SL.TLF.TOTL.IN?locations=DK-NO-SE
# GDP per capita 2023 in thousend USD
# https://data.worldbank.org/indicator/NY.GDP.PCAP.CD?locations=DK-NO-SE
# GDP total 2023 in billion USD
# https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?locations=DK-NO-SE
workforce_gdp <- tribble(
  ~Country, ~Workforce, ~GDP_per_capita_kUSD, ~GDP_total_billion_USD, 
  "SE", 5.8, 56, 593,  
  "NO", 3.0, 88, 486,
  "DK", 3.2, 68, 404
  )
```

## General wrangle and dataselection

```{r}
geo <- df_geo_locations_raw %>% janitor::clean_names() %>%
  select(new_name, longitude, latitude, loc_pop, country, country_code, region, reg_pop) %>%
  unique()

job_roles <- df_job_roles_raw %>%
  select(ID, job_role = Job_role, Type, Type_2)

jobs <- df_main_raw %>% 
  select(!Description) %>% select(!translatedText) %>%
  mutate(publish_country = case_when(
    str_detect(ID, pattern ="^1") ~ "SE", 
    str_detect(ID, pattern ="^2") ~ "NO",
    str_detect(ID, pattern ="^3") ~ "DK"
  )) %>%
  mutate(Scrape_date = lubridate::ymd(Scrape_date)) %>%
  left_join(job_roles) %>%
  filter(Scrape_date >= "2023-08-20") %>%  
  filter(is.na(Hydrogen_relevance)) %>%
  inner_join(geo, by = c("Location"="new_name")) %>%
  filter(country %in% c("Denmark","Norway","Sweden"))

companies <- df_companies_raw %>%
  mutate(Name = ifelse(Name == "Rekryteringsföretag", "Recruitment companies", Name))
```

# Data overview

## New jobs and country statistics

```{r}
comp <- jobs %>% 
  select(country_code, Company) %>% 
  unique() %>% 
  group_by(country_code) %>% 
  count(name="nr_comp")

tbl_country_comp <- jobs %>% 
  group_by(country_code) %>% 
  summarise(Jobs = n(), .groups = "drop") %>%
  mutate(perc = Jobs/sum(Jobs)*100) %>%
  left_join(comp) %>%
  mutate(perc_c = nr_comp/sum(nr_comp)*100) %>%
  left_join(workforce_gdp, by = c("country_code"="Country")) 

gt_tbl_country_comp <- tbl_country_comp %>% 
  gt(rowname_col = "country_code") %>%
  tab_stubhead(label = "Country") %>%
  grand_summary_rows(
    columns = -country_code,
    fns = list(
      Total ~sum(.)
    )
  ) %>% 
  fmt_number(decimals = 0) %>%
  tab_spanner(
    columns = c(Jobs, perc),
    label = "New Jobs"
  ) %>%
  tab_spanner(columns = c(nr_comp, perc_c),
              label = "Organisations") %>%
  tab_spanner(columns = c(Workforce, GDP_total_billion_USD, GDP_per_capita_kUSD),
              label = "Country Statistics") %>%
  cols_label(
    Jobs ~ "Nr.",
    perc ~ "(%)",
    nr_comp ~ "Nr.",
    perc_c ~ "(%)",
    Workforce ~ "Labour<br>(mil.)",
    GDP_total_billion_USD ~ "GDP<br>(b$)",
    GDP_per_capita_kUSD ~ "GDP/Cap.<br>(k$)",
    .fn = md
  ) %>% gt_theme_espn()
gt_tbl_country_comp

gtsave(gt_tbl_country_comp, filename = "H2_paper/tables_W2425/countries_jobs.png")
```

### Violin

```{r}
df_distribution <- jobs %>% 
  count(Company, country_code) %>% 
  filter(!Company == "!!!NEW_COMPANY!!!")

violine <- df_distribution %>%
  rename(Country = country_code) %>%
  ggplot(aes(n, Country, fill = Country), alpha = 0.5) + 
  geom_violin(show.legend = F) + 
  scale_fill_colorblind() + 
  theme_grey() +
  coord_fixed(ratio = 60) +  # Adjust aspect ratio (reduce height)
  labs(x = "", y = "")

violine
ggsave(filename = "H2_paper/figs_W2425/violine.png", plot = violine, limitsize = FALSE, width = 6, height = 4)
```

Add table to violin

```{r}
img <- png::readPNG("H2_paper/tables_W2425/countries_jobs.png")

# Create a rasterGrob
table_grob <- grid::rasterGrob(img)

# Create the table plot
table_to_plot <- ggplot() +
  theme_void() +
  annotation_custom(table_grob,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf)

# Put the figure and table together:
final_figure1 <- cowplot::plot_grid(violine,
                                                    table_to_plot,
                                                    nrow = 1,
                                                    ncol = 2,
                                                    rel_heights = c(1, 1))

final_figure1
ggsave(filename = "H2_paper/figs_W2425/violine_table.png", width = 6, height = 4, dpi = 600)
```

### Plot of number of jobs per region

```{r}
#Adding the missing regions manually (this is done once more on row 1007)
regions_noJobs <- data.frame(
  country = c("Norway", "Sweden", "Sweden"),
  region = c("Innlandet", "Blekinge", "Jönköping"),
  n = c(0,0,0))

numberOf_jobsPer_region <- jobs %>%
  group_by(country, region) %>%
  summarise(n = n(), .groups = 'drop') %>%
  full_join(regions_noJobs) %>%
  arrange(country, desc(n)) %>%
  mutate(region = factor(region, levels = unique(region)))

nrJobs_perRegion_plot <- numberOf_jobsPer_region %>%
  ggplot(aes(x = n, y = fct_rev(region), fill = country)) + 
  geom_col(drop = FALSE) +
  scale_x_continuous() +
  scale_fill_colorblind("Country") +
  labs(x = "", y = "", title = "Total jobs per region") +
  theme_minimal() +
  theme(
    legend.position = "bottom", 
    text = element_text(size = 14), 
    plot.title = element_text(size = 12)
    )

nrJobs_perRegion_plot

ggsave(filename = "H2_paper/figs_W2425/nrJobs_perRegion_plot.png", plot = nrJobs_perRegion_plot, limitsize = FALSE, width = 16, height = 8)
```

## Overview companies

```{r}
companies_overview <- jobs %>%
  group_by(country_code, Company) %>%
  summarise(n=n()) %>%
  arrange(desc(n)) %>%
  mutate(share = n/sum(n)*100) %>%
  ungroup() %>%
  filter(country_code %in% c("DK","NO","SE"))

tot_jobs <- sum(companies_overview$n)

top_10 <- companies_overview %>%
  # Group by country to perform operations within each country
  group_by(country_code) %>%
  # Arrange by descending n within each group
  arrange(desc(n), .by_group = TRUE) %>%
  # Create a new column to identify top 10 companies considering ties
  mutate(Rank = rank(-n, ties.method = "first")) %>%
  # Adjust Company name, keeping top 10 and any ties at the 10th place, lump the rest as 'Other'
  mutate(Company = ifelse(Rank <= 10, Company, "Other")) %>%
  # Regroup to combine 'Other' entries
  group_by(country_code, Company) %>%
  # Summarize to aggregate counts for each company or 'Other'
  summarize(n = sum(n)) %>%
  mutate(share = n/sum(n)*100, share_tot = n/tot_jobs*100) %>%
  # Arrange within each country to ensure 'Other' appears last and companies are sorted by n
  arrange(country_code, desc(n)) %>%
  mutate(Company = fct_infreq(Company) %>% fct_relevel("Other", after = Inf)) %>%
  # Final arrange to ensure 'Other' is last
  arrange(country_code, Company == "Other") %>%
  ungroup() %>%
  mutate(Company = as.character(Company)) %>%
  mutate(Company = str_trunc(Company, width =20, ellipsis = "."))


top10 <- function(cc){
  
  ll <- case_when(
    cc== "DK" ~ "Denmark",
    cc== "SE" ~ "Sweden",
    cc == "NO" ~"Norway"
  )
  
  top_10 %>% 
  filter(country_code == cc) %>%
  select(-country_code) %>%
  gt(rowname_col = "Company") %>%
  tab_stubhead(label = "Companies") %>%
  grand_summary_rows(
    columns = c(n, share, share_tot),
    fns = list(
      Total = ~ sum(.)
    ), 
    fmt = ~fmt_number(., columns = share_tot, decimals = 1)) %>%
  fmt_number(columns = c(share, share_tot), decimals = 1) %>%
  tab_spanner(
    columns = everything(),
    label = ll
  ) %>% 
  cols_label(
    n~"New jobs",
    share ~ "(%)",
    share_tot ~ "Total(%)"
  ) %>%
  gt_theme_espn()
}


dk <- top10("DK")
no <- top10("NO")
se <- top10("SE")
dk 
no
se
gtsave(dk, filename = "H2_paper/tables_W2425/dk_comp.png", vwidth = 800, vheight = 600)
gtsave(no, filename = "H2_paper/tables_W2425/no_comp.png", vwidth = 800, vheight = 600)
gtsave(se, filename = "H2_paper/tables_W2425/se_comp.png", vwidth = 800, vheight = 600)
```

Add country tables together to one

```{r}
img_dk <- png::readPNG("H2_paper/tables_W2425/dk_comp.png")
img_no <- png::readPNG("H2_paper/tables_W2425/no_comp.png")
img_se <- png::readPNG("H2_paper/tables_W2425/se_comp.png")


# Create a rasterGrob
table_grob_dk <- grid::rasterGrob(img_dk, width = unit(1, "npc"), height = unit(1, "npc"))
table_grob_no <- grid::rasterGrob(img_no, width = unit(1, "npc"), height = unit(1, "npc"))
table_grob_se <- grid::rasterGrob(img_se, width = unit(1, "npc"), height = unit(1, "npc"))


# Create the table plot
table_to_plot_dk <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_dk,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

table_to_plot_no <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_no,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

table_to_plot_se <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_se,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

# Put the figure and table together:
nord_comp_tbl_plot <- cowplot::plot_grid(
  table_to_plot_dk + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  table_to_plot_no + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  table_to_plot_se + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  nrow = 1,
  ncol = 3,
  rel_widths = c(1, 1, 1),  # Ensure equal width without gaps
  align = "h",               # Align tables horizontally
  axis = "tb"                # Align top and bottom axes tightly
)

nord_comp_tbl_plot
ggsave(filename = "H2_paper/figs_W2425/nord_comp_tbl_plot.png", width = 6, height = 4, dpi = 600)
```

# Who

## Actor types

```{r}
types <- companies %>% 
  select(Name, Multinational, Organisation_type, Ownership_type, Industry_Sector, Hydrogen_specialist, Location_of_jobs) %>%
  separate(Location_of_jobs, into = paste0("location_", 1:5), sep = ", ", fill = "right") %>%
  mutate(
    multi_Nordic = rowSums(across(location_1:location_5, ~ . %in% 
                                    c("DK","NO","SE", "DK ","NO ","SE ",
                                      " DK"," NO"," SE", " DK "," NO "," SE "))) >= 2
  ) %>% 
  rename("Organisation" = "Organisation_type", "Ownership"= "Ownership_type", "Sector" = "Industry_Sector", "H2-spec."= "Hydrogen_specialist", "MultiNordicJobs"="multi_Nordic") %>% 
  select(-location_1,-location_2,-location_3,-location_4,-location_5)

company_types <- jobs %>% 
  group_by(Company, country_code) %>% 
  summarise(n = n()) %>%
  left_join(types, by = c("Company" = "Name")) %>%
  select(Company, country_code, n, Multinational, Organisation, Ownership,
         Sector, "H2-spec.", MultiNordicJobs) %>%
  na.omit()

ppf <- function(vr_name) {
  y <- sym(vr_name)
  pl <- company_types %>% 
  ggplot(aes(x = n, y = !!y , 
             fill = country_code)) + 
  geom_col(drop = F)+
    scale_x_continuous(limits = c(0, 3000))+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = y)+
    theme_minimal()+
    theme(
      legend.position = 
        ifelse(y =="Sector" | y == "Organisation", "bottom", "none"), 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12))
  return(pl)
}

v<- c("Multinational", "Organisation", "Ownership", "Sector", "H2-spec.", "MultiNordicJobs")

plot_list <- map(v, ppf)
names(plot_list) <- v

sml_pl <- plot_list[[1]] + plot_list[[6]] +plot_list[[3]]+plot_list[[5]] + plot_layout(ncol = 1, axes = "collect") &
  theme(legend.position="bottom", text = element_text(size = 14)) 
sml_pl
multi_pl <-plot_list[[2]] + sml_pl + 
  plot_layout(ncol = 2, guides = "collect") &
  theme(legend.position="bottom", 
        text = element_text(size = 14)) 
multi_pl
ggsave(filename = "H2_paper/figs_W2425/multi_pl.png", dpi = 1200, width = 12, height = 8)
```

### Country and company connections plot

```{r}
df_gs <- jobs %>% 
  count(Company, country_code, name = "weight") %>% 
  filter(!Company == "!!!NEW_COMPANY!!!") %>%
  left_join(types, by =c("Company" = "Name")) %>% 
  na.omit() %>% 
  filter(Organisation == "Firm") # select only firms

nr_jobs_comp <- jobs %>% count(Company, name = "jobs") %>% 
  filter(!Company == "!!!NEW_COMPANY!!!") %>% 
  rename(name = Company)

nr_jobs_country <- jobs %>% 
  count(country_code, name = "jobs") %>% 
  rename(name = country_code)
node_data <- bind_rows(nr_jobs_comp, nr_jobs_country)

gs <- df_gs %>% 
  as_tbl_graph(directed = FALSE) %N>%
  mutate(type = ifelse(name %in% df_gs$Company, "actor", "country")) %>%
  mutate(ctrl = centrality_degree()) %>%
  left_join(node_data)
  

nodes <- gs %N>% as_tibble()
edges <- gs %E>% as_tibble()

set.seed(123456)
node_edge_map <- ggraph(gs, layout = "fr") +
  geom_edge_link(aes(edge_width = weight), 
                 edge_alpha = 0.3, 
                 edge_color = "lightgrey", 
                 show.legend = FALSE) + 
  geom_node_point(aes(color = type, shape = type, size = jobs),
                  alpha = 0.6, show.legend = FALSE) +
  geom_node_text(aes(label = ifelse(type != "actor", name, "")),
                 size= 6, show.legend = FALSE, fontface = "bold") +
  geom_text_repel(aes(x = x, y = y,
    label = ifelse(type == "actor" & (jobs > 4 | ctrl > 1), 
                   str_trunc(name, 7, ellipsis = "."), ""),
    size = jobs),  # Scale label size based on the number of jobs
    point.padding = 0.5, 
    segment.size = 0.2,
    max.overlaps = Inf,  # Allow more overlaps
    show.legend = FALSE) +
  theme_graph() +
  scale_color_manual(values = c("actor" = "cornflowerblue", "country" = "orange")) +
  scale_size(range = c(3, 10)) +  # Adjust the size range
  scale_edge_width(range = c(2, 4)) +
  ggtitle("") #+
  #annotate("text", x=-12, y =1, label = "Denmark")+
  #annotate("text", x=-1, y =4, label = "Norway")+
  #annotate("text", x=-3, y =-13, label = "Sweden")

node_edge_map
ggsave("H2_paper/figs_W2425/node_edge_map.png", dpi = 1200, width = 12, height = 8)
```

## Sectors

Simple table of the different sectors including short description

```{r}
sctr_tbl_info <- data.frame(
  sector = c("Chemicals", "Consulting", "Energy technology manufacturer", 
             "Energy utility", "Fossil fuel & Refinery", "Government & Public sector", 
             "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining",
             "Other", "Other manufacturing", "Research & Education", 
             "Transport"),
  description = c("Organisations working with producing and refining gases, fluids and solids used for fuel, manufacturing and other purposes.",
                  "Consulting agencies operating and providing knowledge and services within a variety of subjects and industry.",
                  "Organisations that manufacture components, modules or products used in other energy industries.",
                  "Organisations which produce and provide energy.",
                  "Organisations working with extracting or refining fossil fuels, such as oil and natural gas.",
                  "Organisations which are financed and driven public instances, such as municipalities, regional autorities or other public authorities.",
                  "Organisations working with producing components, modules and products specifically to be used for either production, distribution, storage or usage of hydrogen.",
                  "Organisations working subjects related to law or economics, such as law firms, banks and insurance companies.",
                  "Organisations working with extracting or refining metal ores and material.",
                  "Organisations that do not fit within any of the other 12 categories.",
                  "Organisations working within manufacturing of components, modules or products which do not fall in under either energy- or hydrogen technology manufacturer.",
                  "Organisations whose primary business is performing research or providing education, such as universities and research institutes.",
                  "Organisations either working with producing vehicles or transporting goods or people.")
)

sctr_tbl <- sctr_tbl_info %>%
  gt()  %>%
  cols_label(
    sector = "Sectors",
    description = "Description"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(sector, description)
    )
  )

sctr_tbl

sctr_tbl %>% gtsave("H2_paper/tables_W2425/sctr_tbl.png")
```

### Overview plot

```{r}
tbl <- jobs %>%
  inner_join(companies %>% 
               select(Name, Industry_Sector), by = c("Company"="Name")) %>%
  rename(Sector = Industry_Sector, Country = country_code) %>%
  mutate(Sector = fct_infreq(Sector)) %>% 
  mutate(job_role = fct_infreq(job_role)) %>%
  filter(!Company == 'UNKNOWN_COMPANY')

sector_plot <- tbl %>% 
  group_by(Country, Sector) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(Sector), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per sector")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

sector_plot
ggsave("H2_paper/figs_W2425/Total_jobs_per_sector.png", dpi = 1200, width = 6, height = 8)
```

### Residual plot

```{r}
sectors_norm <- tbl %>% 
  group_by(Sector, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(Sector, Country, fill = list(n_job = 0)) 

jobs_total <- aggregate(n_job ~ Country, data = sectors_norm, sum)

sector_total <- aggregate(n_job ~ Sector, data = sectors_norm, sum)

sectors_norm <- merge(sectors_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
sectors_norm <- merge(sectors_norm, sector_total, by = "Sector", suffixes = c("", "_sector"))

sectors_norm$n_norm <- sectors_norm$n_job / sectors_norm$n_job_country
sectors_norm$mean <- sectors_norm$n_job_sector / sum(jobs_total$n_job)
sectors_norm$diff <- sectors_norm$n_norm - sectors_norm$mean

sector_deviation_plot <- ggplot(sectors_norm %>% filter(!Sector == 'NaN'), aes(x = str_wrap(Sector, 20, whitespace_only = FALSE), y = diff*100)) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  theme(legend.position = "top") +
  labs(y = "Deviation from mean", x = "") +
  theme_bw() +
  theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1, color = "black"),
        axis.text.y = element_text(color = "black")) 
sector_deviation_plot

ggsave(filename = "H2_paper/figs_W2425/sector_deviation.png", plot = sector_deviation_plot, limitsize = FALSE, width = 10, height = 7)
```

### Patchwork of overview and residual plots

```{r}
tbl_sectors <- tbl %>% 
  group_by(Country, Sector) %>%
  summarise(n =n())

#
# Determine the common order for sectors
sector_order <- tbl_sectors %>%
  group_by(Sector) %>%
  summarise(total_n = sum(n)) %>%
  arrange(desc(total_n)) %>%
  pull(Sector)

# Set the factor levels for Sector in both data frames
tbl_sectors <- tbl_sectors %>%
  mutate(Sector = factor(Sector, levels = sector_order))

sectors_norm <- sectors_norm %>%
  filter(!Sector == 'NaN') %>%
  mutate(Sector = factor(Sector, levels = sector_order))
#

p1 <- tbl_sectors %>%
  ggplot(aes(x= n, y= fct_rev(Sector), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per sector")+
    theme_minimal()+
    theme(legend.position = "none", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

p2 <- ggplot(sectors_norm, aes(x = diff*100, y = fct_rev(Sector))) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  #theme(legend.position = "top") +
  labs(y = "", x = "", title = "Deviation from mean") +
  theme_minimal()+
    theme( 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_blank(),  # Remove y-axis text from the second plot
      axis.ticks.y = element_blank()  # Remove y-axis ticks from the second plot) 
    )
combined_sectors <- p1 + p2 + plot_layout(guides = "collect")

combined_sectors
ggsave(filename = "H2_paper/figs_W2425/combined_sectors.png", plot = combined_sectors, limitsize = FALSE, width = 12, height = 7)
```

## Organisations recruiting the most

```{r}
# This calculation is to see what percentage of total jobs that a certain number of top recruiting actors have created - see "head(XX)"
(jobs %>% group_by(country, Company) %>% summarise(n =n()) %>% 
         ungroup() %>% arrange(desc(n)) %>% head(25) %>% select(n) %>% sum())/(jobs %>% group_by(country, Company) %>% summarise(n =n()) %>% 
         ungroup() %>% arrange(desc(n)) %>% select(n) %>% sum())

# 12 -> 50%
# 20 -> 59%
# 30 -> 65%
# 33 -> 66%
# 52 -> 75%

biggest_companies <- jobs %>%
  group_by(country, Company) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  arrange(desc(n)) %>%
  head(25) # Has to use number wanted +1

# Summing the job counts by company across countries
aggregated_companies <- biggest_companies %>%
  group_by(Company) %>%
  summarise(total_jobs = sum(n))

# Merging back the total job counts with the original data
biggest_companies <- biggest_companies %>%
  left_join(aggregated_companies, by = "Company")

biggest_companies_plot <- biggest_companies %>%
  ggplot(aes(x= n, y= fct_reorder(Company, total_jobs),
             fill = country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
  scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Top 25 most recruiting organisations, responsible for 60% of all jobs")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

biggest_companies_plot

ggsave(filename = "H2_paper/figs_W2425/biggest_companies_plot.png", plot = biggest_companies_plot, limitsize = FALSE, width = 16, height = 8)
```

# What

## Job roles

Simple table of the different job roles including short description

```{r}
jbrls_tbl_info <- data.frame(
  jobroles = c("Administration", "Engineering", "Environmental",
               "Finance & Business development", "HR", "IT & Data science",
               "Law", "Management other", "Other", 
               "PhD", "Procurement & Logistics", "Project management", 
               "Public administration", "Quality assurance", "Research", 
               "Sales & Customer service", "Technician & Maintenance"),
  description = c("Includes jobs related to administrative or clerical work and secretaries.", 
                  "Includes all jobs related to different engineering practices.", 
                  "Includes jobs related to working with sustainability or environmental expert knowledge.",
                  "Includes jobs within finance, accounting, economics as well as business development or analysis.", 
                  "Includes jobs related to human resources and recruitment.", 
                  "Includes jobs working with software, data management, IT and data analysis.", 
                  "Includes jobs within law, such as lawyers and legal advisors.", 
                  "Includes management jobs which are not explicitly Project management, such as CEOs, section manager, operations manager and so on.",
                  "Includes all jobs which do not fall within any of the other 16 categories.",
                  "Includes doctoral students.", 
                  "Includes jobs in charge of procurement, logistics and supply chains.", 
                  "Includes jobs for project planning and management.", 
                  "Includes jobs working with administration within public sector.", 
                  "Includes jobs related to inspecting, controling or assuring quality of products or services.", 
                  "Includes jobs within research, such as professors, research assistants and other scientists.", 
                  "Includes jobs working with selling or marketing products or services as well as offering support of different kinds to customers.",
                  "Includes jobs related to manufacturing and repairing and in other ways keeping maintaining or enabling operations, such as technicians, industrial workers, mechanics, electricians, welders and so on.")
)

jbrls_tbl <- jbrls_tbl_info %>%
  gt()  %>%
  cols_label(
    jobroles = "Job roles",
    description = "Description"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(jobroles, description)
    )
  )

jbrls_tbl
jbrls_tbl %>% gtsave("H2_paper/tables_W2425/jbrls_tbl.png")
```

### Overview plot

```{r}
jobroles_plot <- tbl %>% 
  drop_na(job_role) %>% #removing NA:s here
  group_by(Country, job_role) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(job_role), 
             fill = Country)) + 
  geom_col()+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per job role")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobroles_plot
ggsave("H2_paper/figs_W2425/Total_jobs_per_jobrole.png", dpi = 1200, width = 8, height = 8)
```

### Residual plot

```{r}
jobs_norm <- tbl %>% group_by(job_role, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(job_role, Country, fill = list(n_job = 0)) 

jobs_total <- aggregate(n_job ~ Country, data = jobs_norm, sum)

jobrole_total <- aggregate(n_job ~ job_role, data = jobs_norm, sum)

jobs_norm <- merge(jobs_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
jobs_norm <- merge(jobs_norm, jobrole_total, by = "job_role", suffixes = c("", "_jobrole"))

jobs_norm$n_norm <- jobs_norm$n_job / jobs_norm$n_job_country
jobs_norm$mean <- jobs_norm$n_job_jobrole / sum(jobs_total$n_job)
jobs_norm$diff <- jobs_norm$n_norm - jobs_norm$mean

jobroles_deviation_plot <- ggplot(jobs_norm, aes(x = str_wrap(job_role, 20, whitespace_only = FALSE), y = diff*100)) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  theme(legend.position = "top") +
  labs(y = "Deviation from mean", x = "") +
  theme_bw() +
  theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1)) 
jobroles_deviation_plot

ggsave(filename = "H2_paper/figs_W2425/jobroles_deviation.png", plot = jobroles_deviation_plot, limitsize = FALSE, width = 10, height = 7)
```

### Patchwork of overview and residual plots

```{r}
jobs_norm <- tbl %>% group_by(job_role, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(job_role, Country, fill = list(n_job = 0)) 

jobs_total <- aggregate(n_job ~ Country, data = jobs_norm, sum)

jobrole_total <- aggregate(n_job ~ job_role, data = jobs_norm, sum)

jobs_norm <- merge(jobs_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
jobs_norm <- merge(jobs_norm, jobrole_total, by = "job_role", suffixes = c("", "_jobrole"))

jobs_norm$n_norm <- jobs_norm$n_job / jobs_norm$n_job_country
jobs_norm$mean <- jobs_norm$n_job_jobrole / sum(jobs_total$n_job)
jobs_norm$diff <- jobs_norm$n_norm - jobs_norm$mean
########## -----------------------------------
tbl_job_role <- tbl %>% 
  group_by(Country, job_role) %>%
  summarise(n =n()) %>%
  na.omit()
  

#
# Determine the common order for sectors
job_role_order <- tbl_job_role %>%
  group_by(job_role) %>%
  summarise(total_n = sum(n)) %>%
  arrange(desc(total_n)) %>%
  pull(job_role)

# Set the factor levels for Sector in both data frames
tbl_job_role <- tbl_job_role %>%
  mutate(job_role = factor(job_role, levels = job_role_order))

jobs_norm <- jobs_norm %>%
  mutate(job_role = factor(job_role, levels = job_role_order))
#

p1j <- tbl_job_role %>%
  ggplot(aes(x= n, y= fct_rev(job_role), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per job role")+
    theme_minimal()+
    theme(legend.position = "none", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

p2j <- ggplot(jobs_norm, aes(x = diff*100, y = fct_rev(job_role))) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  #theme(legend.position = "top") +
  labs(y = "", x = "", title = "Deviation from mean") +
  theme_minimal()+
    theme( 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_blank(),  # Remove y-axis text from the second plot
      axis.ticks.y = element_blank()  # Remove y-axis ticks from the second plot) 
    )
combined_jobe_roles <- p1j + p2j + plot_layout(guides = "collect")

combined_jobe_roles
ggsave(filename = "H2_paper/figs_W2425/combined_jobe_roles.png", plot = combined_jobe_roles, limitsize = FALSE, width = 12, height = 7)
```

## Engineering types

```{r}
# Calculate total jobs per engineer type for ordering
engineers_n <- tbl %>%
  filter(job_role == "Engineering") %>%
  group_by(Type_2) %>%
  summarise(total_n = n())

# Set the order for Type_2 based on total number of jobs
type_order <- engineers_n %>%
  arrange(desc(total_n)) %>%
  pull(Type_2)

# Create the first plot (engineers_plot) with consistent ordering
engineers_plot <- tbl %>%
  filter(job_role == "Engineering") %>%
  group_by(Country, Type_2) %>%
  summarise(n = n()) %>%
  left_join(engineers_n, by = "Type_2") %>%
  mutate(Type_2 = factor(Type_2, levels = type_order)) %>%
  ggplot(aes(x = n, y = fct_rev(Type_2), fill = Country)) + 
  geom_col() +
  scale_x_continuous() +
  scale_fill_colorblind("Country") +
  labs(x= "", y = "", title = "Total jobs per type of engineer") +
  theme_minimal() +
  theme(
    legend.position = "none", 
    text = element_text(size = 14), 
    plot.title = element_text(size = 12),
    axis.text.y = element_text(color = "black")
  )

# Prepare data for the second plot (engineers_deviation_plot)
engineers_norm <- tbl %>%
  filter(job_role == "Engineering") %>%
  group_by(Type_2, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(Type_2, Country, fill = list(n_job = 0))

jobs_total <- aggregate(n_job ~ Country, data = engineers_norm, sum)

engineer_total <- aggregate(n_job ~ Type_2, data = engineers_norm, sum)

engineers_norm <- merge(engineers_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
engineers_norm <- merge(engineers_norm, engineer_total, by = "Type_2", suffixes = c("", "_type"))

engineers_norm$n_norm <- engineers_norm$n_job / engineers_norm$n_job_country
engineers_norm$mean <- engineers_norm$n_job_type / sum(jobs_total$n_job)
engineers_norm$diff <- engineers_norm$n_norm - engineers_norm$mean

# Create the second plot (engineers_deviation_plot) with consistent ordering
engineers_deviation_plot <- engineers_norm %>%
  mutate(Type_2 = factor(Type_2, levels = type_order)) %>%
  ggplot(aes(x = diff * 100, y = fct_rev(Type_2), fill = Country)) +
  geom_col(width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  labs(y = "", x = "", title = "Deviation from mean") +
  theme_minimal() +
  theme(
    #legend.position = "top",
    text = element_text(size = 14), 
    plot.title = element_text(size = 12),
    axis.text.y = element_blank(),  # Remove y-axis text from the second plot
    axis.ticks.y = element_blank()  # Remove y-axis ticks from the second plot
  )

# Combine the plots
combined_engineers <- engineers_plot + engineers_deviation_plot + plot_layout(guides = "collect") #& theme(legend.position = "top")

# Print the combined plot
print(combined_engineers)

ggsave(filename = "H2_paper/figs_W2425/combined_engineers.png", plot = combined_engineers, limitsize = FALSE, width = 10, height = 6) 
```

# Where

## Wrangle

```{r}
#location_all <- jobs %>% 
 # group_by(Location) %>%
#  summarise(new_jobs = n()) %>% 
 # left_join(geo, by = c("Location" ="new_name")) %>%
#  rename("location" = "Location") %>%
#  unique()

region_new_jobs <- jobs %>% 
    group_by(region, reg_pop, country) %>%
    summarise(new_jobs = n()) %>% 
    ungroup()
```

## Extra data

This section is for when one wants to make analysis based on GDP - This is not updated to new regions of Norway

```{r}

#adding the missing regions manually (this is done on row 207 as well)
missing_regions <- data.frame(
  region = c("Innlandet", "Blekinge", "Jönköping"),
  reg_pop = c(376304, 157973, 368856),
  country = c("Norway", "Sweden", "Sweden"),
  new_jobs = c(0,0,0))

region_new_jobs<- full_join(region_new_jobs, missing_regions)

regional_GDP <- data.frame(
  region = c("Agder","Dalarna","Gotland","Gävleborg","Halland",
             "Hovedstaden","Jämtland","Kalmar","Kronoberg","Midtjylland",
             "Møre og Romsdal","Nordjylland","Nordland","Norrbotten","Oslo",
             "Rogaland","Sjælland","Skåne","Stockholm","Syddanmark",
             "Södermanland","Troms og Finnmark","Trøndelag","Uppsala","Vestfold og Telemark",
             "Vestland","Viken","Värmland","Västerbotten","Västernorrland",
             "Västmanland","Västra Götaland","Östergötland", "Innlandet", "Blekinge", "Jönköping", "Örebro",
             'Greenland'),
  GDP_per_capita = c(44772, 41862.5, 37331.5, 40188, 40286.5, 
                     90316.8, 41567, 39991, 50038, 56448,
                     48412.8, 48787.2, 48412.8, 63828, 91512,
                     58744.8, 39916.8, 44620.5, 71806.5, 54028.8,
                     37233, 49101.6, 49790.4, 47477, 43591.2,
                     51364.8, 44083.2, 41961, 46590.5, 46098,
                     40877.5, 50924.5, 45704, 43296, 42650.5, 46492, 44916,
                     48277.5)
  ) %>%
  left_join(region_new_jobs) %>%
  select(country,region,reg_pop,GDP_per_capita,new_jobs)



#Info from
#https://www.dst.dk/en/Statistik/emner/oekonomi/nationalregnskab/regionalfordelt-nationalregnskab
#https://www.scb.se/en/finding-statistics/statistics-by-subject-area/national-accounts/national-accounts/regional-accounts/pong/statistical-news/regional-accounts-2021/
#https://www.ssb.no/en/nasjonalregnskap-og-konjunkturer/nasjonalregnskap/statistikk/fylkesfordelt-nasjonalregnskap

#Exchange rate used from year of measurement
#https://www.exchangerates.org.uk/DKK-EUR-spot-exchange-rates-history-2022.html
#https://www.exchangerates.org.uk/NOK-EUR-spot-exchange-rates-history-2021.html
#https://www.exchangerates.org.uk/SEK-EUR-spot-exchange-rates-history-2021.html

#Greenland - 2021
#https://tradingeconomics.com/greenland/gdp-per-capita-us-dollar-wb-data.html
#https://www.x-rates.com/average/?from=USD&to=EUR&amount=1&year=2021



```

## Population size

Linear regression over number of jobs created depending on population size of regions.

### All countries as one

```{r}
lm_regions <- lm(new_jobs ~ reg_pop, data = region_new_jobs)

# looking at mdl results
glance(lm_regions)
summary(lm_regions)
tidy(lm_regions)

# extract data for annotating the plot
lm_gl <- glance(lm_regions)
r2_p_all <- paste("R2:", round(lm_gl$r.squared, 2), "&\n", ifelse(lm_gl$p.value < 0.05, "p< 0.05", "p>0.05"))  
```

### Countries used as a factor

```{r}
lm_data_reg <- region_new_jobs %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ reg_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_dk <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_se <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_no <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_dk <- paste("R2:", round(lm_dk$r.squared, 2), "&\n", ifelse(lm_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_se <- paste("R2:", round(lm_se$r.squared, 2), "&\n", ifelse(lm_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_no <- paste("R2:", round(lm_no$r.squared, 2), "&\n", ifelse(lm_no$p.value < 0.05, "p< 0.05", "p>0.05"))  
```

Outliers -

```{r}
outliers_reg <- lm_data_reg %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std <- lm_data_reg %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))
```

Outliers - REMOVE??? Added when had missing data for Greenland

```{r}
outliers_reg <- lm_data_reg %>%
  mutate(
    outliers = map(aug, ~.x %>%
                     mutate(outlier = abs(.resid) > 2 * sd(.resid))),
    region = map(data, ~.x$region) # Ensure `region` is created here
  ) %>%
  ungroup() %>% # Ungroup to prevent grouping issues
  mutate(region = map2(outliers, region, ~.y[seq_len(nrow(.x))])) %>% # Adjust `region` to match `outliers`
  select(country, outliers, region) %>%
  mutate(outliers = map2(outliers, region, ~{
    .x %>%
      mutate(region = .y) # Add `region` as a column to `outliers`
  })) %>%
  unnest(outliers, names_sep = "_") %>% # Use `names_sep` to disambiguate
  relocate(region, .after = "country") %>%
  filter(outliers_outlier) # Use the renamed column

outliers_reg_1_2_std <- lm_data_reg %>%
  mutate(
    outliers = map(aug, ~.x %>%
                     mutate(outlier = abs(.resid) > 2 * sd(.resid),
                               abs_std_resid = abs(.std.resid))),
    region = map(data, ~.x$region) # Ensure `region` is created here
  ) %>%
  ungroup() %>% # Ungroup to prevent grouping issues
  mutate(region = map2(outliers, region, ~.y[seq_len(nrow(.x))])) %>% # Adjust `region` to match `outliers`
  select(country, outliers, region) %>%
  mutate(outliers = map2(outliers, region, ~{
    .x %>%
      mutate(region = .y) # Add `region` as a column to `outliers`
  })) %>%
  unnest(outliers, names_sep = "_") %>% # Use `names_sep` to disambiguate
  relocate(region, .after = "country") %>%
  filter(outliers_outlier) # Use the renamed column
```

### Plot

```{r}
region_pop_plot <- region_new_jobs %>% 
  ggplot(aes(round(reg_pop/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(reg_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=300, y =250, label = r2_p_no)+
  annotate("text", x=1500, y =450, label = r2_p_dk)+
  annotate("text", x=2380, y =400, label = r2_p_all)+
  annotate("text", x=2250, y =15, label = r2_p_se)+
  theme_minimal() +
  theme(legend.position = "top")
region_pop_plot

ggsave(filename = "H2_paper/figs_W2425/all_region_pop.png", plot = region_pop_plot, dpi= 600, width = 8, height = 4)
```

## GDP per capita - No longer in use

Linear regression over number of jobs created depending on GDP per capita for each individual region.

```{r}
lm_regions_gdp <- lm(new_jobs ~ GDP_per_capita, data = regional_GDP)

# looking at mdl results
glance(lm_regions_gdp)
summary(lm_regions_gdp)
tidy(lm_regions_gdp)

# extract data for annotating the plot
lm_gl_gdp <- glance(lm_regions_gdp)
r2_p_gdp_all <- paste("R2:", round(lm_gl_gdp$r.squared, 2), "&\n", ifelse(lm_gl_gdp$p.value < 0.05, "p< 0.05", "p>0.05"))  


###

lm_data_reg_gdp <- regional_GDP %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ GDP_per_capita, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_gdp_dk <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_gdp_se <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_gdp_no <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_gdp_dk <- paste("R2:", round(lm_gdp_dk$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_gdp_se <- paste("R2:", round(lm_gdp_se$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_gdp_no <- paste("R2:", round(lm_gdp_no$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_no$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg_gdp <- lm_data_reg_gdp %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std_gdp <- lm_data_reg_gdp %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))

###

gdp_jobs_plot <- regional_GDP %>% 
  ggplot(aes(round(GDP_per_capita/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(GDP_per_capita/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_gdp)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "GDP per capita in kEUR", y= "Nr. of new jobs") +
  annotate("text", x=90, y =233, label = r2_p_gdp_no)+
  annotate("text", x=87, y =160, label = r2_p_gdp_all)+
  annotate("text", x=82, y =250, label = r2_p_gdp_dk)+
  annotate("text", x=75, y =46, label = r2_p_gdp_se)+
  theme_minimal() +
  theme(legend.position = "top")

gdp_jobs_plot
ggsave(filename = "figs/gdp_jobs_plot.png", plot = gdp_jobs_plot, limitsize = FALSE, width = 8, height = 5)
```

## Combine Oslo & Viken

Not updated for new Norwegian regions

### Wrangle together

```{r}
OsloViken <- regional_GDP %>%
  filter(region %in% c("Oslo", "Viken")) 

OsloViken_reg_pop <- OsloViken %>%
  select(reg_pop) %>%
  sum()

OsloViken_GDP_per_capita <- (OsloViken$GDP_per_capita[1]*OsloViken$reg_pop[1]+
  OsloViken$GDP_per_capita[2]*OsloViken$reg_pop[2])/
  OsloViken_reg_pop

OsloViken_new_jobs <- OsloViken %>%
  select(new_jobs) %>%
  sum()
  
OsloViken_combined <- data.frame(
  country = "Norway",
  region = "Oslo & Viken",
  reg_pop = OsloViken_reg_pop,
  GDP_per_capita = OsloViken_GDP_per_capita,
  new_jobs = OsloViken_new_jobs
)

region_NewJobs_OsloViken_combined <- regional_GDP %>%
  filter(!region %in% c("Oslo", "Viken")) %>%
  bind_rows(OsloViken_combined)
```

### Population size

```{r}
lm_regions_OsloViken <- lm(new_jobs ~ reg_pop, data = region_NewJobs_OsloViken_combined)

# looking at mdl results
glance(lm_regions_OsloViken)
summary(lm_regions_OsloViken)
tidy(lm_regions_OsloViken)

# extract data for annotating the plot
lm_gl_OsloViken <- glance(lm_regions_OsloViken)
r2_p_all_OsloViken <- paste("R2:", round(lm_gl_OsloViken$r.squared, 2), "&\n", ifelse(lm_gl_OsloViken$p.value < 0.05, "p< 0.05", "p>0.05"))  

###

lm_data_reg_OsloViken <- region_NewJobs_OsloViken_combined %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ reg_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_OsloViken %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_no_OsloViken <- lm_data_reg_OsloViken %>% 
  select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_no_OsloViken <- paste("R2:", round(lm_no_OsloViken$r.squared, 2), "&\n", ifelse(lm_no_OsloViken$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg_OsloViken <- lm_data_reg_OsloViken %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std_OsloViken <- lm_data_reg_OsloViken %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))

###

region_pop_plot_OsloViken <- region_NewJobs_OsloViken_combined %>% 
  ggplot(aes(round(reg_pop/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(reg_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_OsloViken)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=1500, y =320, label = r2_p_no_OsloViken)+
  annotate("text", x=2040, y =280, label = r2_p_dk)+
  annotate("text", x=2250, y =200, label = r2_p_all_OsloViken)+
  annotate("text", x=2250, y =75, label = r2_p_se)+
  theme_minimal() +
  theme(legend.position = "top")
region_pop_plot_OsloViken

ggsave(filename = "figs/all_region_pop_OsloViken.png", plot = region_pop_plot_OsloViken, dpi= 600, width = 8, height = 4)
```

### GDP per capita

```{r}
lm_regions_gdp_OsloViken <- lm(new_jobs ~ GDP_per_capita, 
                               data = region_NewJobs_OsloViken_combined)

# looking at mdl results
glance(lm_regions_gdp_OsloViken)
summary(lm_regions_gdp_OsloViken)
tidy(lm_regions_gdp_OsloViken)

# extract data for annotating the plot
lm_gl_gdp_OsloViken <- glance(lm_regions_gdp_OsloViken)
r2_p_gdp_all_OsloViken <- paste("R2:", 
                                round(lm_gl_gdp_OsloViken$r.squared, 2), "&\n", 
                                ifelse(lm_gl_gdp_OsloViken$p.value < 0.05, "p< 0.05", "p>0.05"))  


###

lm_data_reg_gdp_OsloViken <- region_NewJobs_OsloViken_combined %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ GDP_per_capita, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_gdp_OsloViken %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_gdp_no_OsloViken <- lm_data_reg_gdp_OsloViken %>% 
  select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_gdp_no_OsloViken <- paste("R2:", round(lm_gdp_no_OsloViken$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_no_OsloViken$p.value < 0.05, "p< 0.05", "p>0.05"))  
outliers_reg_gdp_OsloViken <- lm_data_reg_gdp_OsloViken %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std_gdp_OsloViken <- lm_data_reg_gdp_OsloViken %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))

###

gdp_jobs_plot_OsloViken <- region_NewJobs_OsloViken_combined %>% 
  ggplot(aes(round(GDP_per_capita/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(GDP_per_capita/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_gdp_OsloViken)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "GDP per capita in kEUR", y= "Nr. of new jobs") +
  annotate("text", x=64, y =400, label = r2_p_gdp_no_OsloViken)+
  annotate("text", x=87, y =370, label = r2_p_gdp_all_OsloViken)+
  annotate("text", x=87, y =130, label = r2_p_gdp_dk)+
  annotate("text", x=75, y =46, label = r2_p_gdp_se)+
  theme_minimal() +
  theme(legend.position = "top")

gdp_jobs_plot_OsloViken
ggsave(filename = "figs/gdp_jobs_plot_OsloViken.png", plot = gdp_jobs_plot_OsloViken, limitsize = FALSE, width = 8, height = 5)
```

# Combined patterns

## Wrangle

```{r}
df_jobs <- jobs %>% 
  left_join(companies, by =c("Company" = "Name")) %>%
  select(country_code, region, sector= Industry_Sector, competence= job_role) %>%
  na.omit() %>%
  filter(!sector == 'NaN')

df_cl <- df_jobs %>%
  group_by(country_code, region, sector, competence) %>%
  summarise(n = n())

df_wide_cl <- df_cl %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

#mutate(place = paste(region, "(", country_code, ")", sep = ""))

mtrx <- as.matrix(df_wide_cl %>% select(-place, -sector))
```

## Identify good number of clusters

### Elbow

```{r}
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_knee <- tibble(k = 2:60, wss = wss)

df_knee %>% 
  ggplot(aes(k, wss, label = k)) + geom_line() + geom_point() +
  scale_x_continuous(breaks = 2:60)

# Best at: ~ 6 - 10
```

### Silhouette

```{r}
sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx, k = k)
  pam_k$silinfo$avg.width
}) 

df_sil <- tibble(k = 2:60, sil_width = sil_width)

df_sil %>% ggplot(aes(k, sil_width)) + geom_line() + 
  geom_point()+
  scale_x_continuous(breaks = 2:60)

# Best at: 3 - 7
```

## Clustering

```{r}
# K-mean
set.seed(123456789)
KM_2 <- kmeans(mtrx,2)
set.seed(123456789)
KM_3 <- kmeans(mtrx,3)
set.seed(123456789)
KM_4 <- kmeans(mtrx,4)
set.seed(123456789)
KM_5 <- kmeans(mtrx,5)
set.seed(123456789)
KM_6 <- kmeans(mtrx,6)
set.seed(123456789)
KM_7 <- kmeans(mtrx,7)
set.seed(123456789)
KM_8 <- kmeans(mtrx,8)
set.seed(123456789)
KM_9 <- kmeans(mtrx,9)
set.seed(123456789)
KM_10 <- kmeans(mtrx,10)

# Evaluate with plots
png("H2_paper/figs_W2425/k-mean_plots/k-mean_2.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_2,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_3.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_3,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_4.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_4,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_5.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_5,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_6.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_6,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_7.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_7,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_8.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_8,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_9.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_9,mtrx,frame=TRUE)
dev.off()  # Close the device

png("H2_paper/figs_W2425/k-mean_plots/k-mean_10.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_10,mtrx,frame=TRUE)
dev.off()  # Close the device

# Evaluate with scores
data <- mtrx

sil <- c()
wcs <- c()
dun <- c()
dav <- c()

for (i in 2:10) {
  kmeans_result <- kmeans(data,i)
  
  ### Silhouette Score
  silhouette_score <- silhouette(kmeans_result$cluster, dist(data))
  mean_silhouette_score <- mean(silhouette_score[, 3])

  # Within-Cluster Sum of Squares (WCSS)
  wcss <- sum(kmeans_result$withinss)

  # Dunn Index
  dunn_index <- dunn(clusters = kmeans_result$cluster, Data = data)

  # Davies-Bouldin Index
  davies_bouldin_index <- index.DB(data, kmeans_result$cluster)$DB
  
  sil <- c(sil,mean_silhouette_score)
  wcs <- c(wcs,wcss)
  dun <- c(dun,dunn_index)
  dav <- c(dav,davies_bouldin_index)
  print(paste("The scores for k = ",as.character(i)))
  print(paste("Mean Silhouette Score:", mean_silhouette_score))
  print(paste("WCSS:", wcss))
  print(paste("Dunn Index:", dunn_index))
  print(paste("Davies-Bouldin Index:", davies_bouldin_index))
}

# Best result found at: 
```

## Add clusters to data

```{r}
cl_2 <- KM_2$cluster
cl_3 <- KM_3$cluster
cl_4 <- KM_4$cluster
cl_5 <- KM_5$cluster
cl_6 <- KM_6$cluster
cl_7 <- KM_7$cluster
cl_8 <- KM_8$cluster

df_hcl_2 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_2) %>% 
  relocate(cl, .after = "id") 
df_hcl_3 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_3) %>% 
  relocate(cl, .after = "id")
df_hcl_4 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_4) %>% 
  relocate(cl, .after = "id")
df_hcl_5 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_5) %>% 
  relocate(cl, .after = "id")
df_hcl_6 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_6) %>% 
  relocate(cl, .after = "id")
df_hcl_7 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_7) %>% 
  relocate(cl, .after = "id")
df_hcl_8 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_8) %>% 
  relocate(cl, .after = "id")

df_hcl_long_2 <- df_hcl_2 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_3 <- df_hcl_3 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_4 <- df_hcl_4 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_5 <- df_hcl_5 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_6 <- df_hcl_6 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_7 <- df_hcl_7 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_8 <- df_hcl_8 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")

# Summary stat
sum_stat_2 <- df_hcl_2 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_3 <- df_hcl_3 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_4 <- df_hcl_4 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_5 <- df_hcl_5 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_6 <- df_hcl_6 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_7 <- df_hcl_7 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_8 <- df_hcl_8 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))

#Place
pl_cl_2 <- df_hcl_long_2 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_3 <- df_hcl_long_3 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_4 <- df_hcl_long_4 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_5 <- df_hcl_long_5 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_6 <- df_hcl_long_6 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_7 <- df_hcl_long_7 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_8 <- df_hcl_long_8 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))

#Sector
se_cl_2 <- df_hcl_long_2 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_3 <- df_hcl_long_3 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_4 <- df_hcl_long_4 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_5 <- df_hcl_long_5 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_6 <- df_hcl_long_6 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_7 <- df_hcl_long_7 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_8 <- df_hcl_long_8 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
```

k=6 is the final chosen cluster-solution - half data

### Important companies for the clusters

```{r}
df_ImpComp <- jobs %>%
  left_join(companies, by =c("Company" = "Name")) %>% 
  select(company = Company,country = country_code,region, sector= Industry_Sector, competence = job_role) %>%   
  na.omit() %>% 
  unite(place, c("region", "country"), sep = ", ") %>%
  group_by(company, place, sector, competence) %>%
  summarise(n = n()) %>% 
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

norwegian_engineering <- df_hcl_6 %>%
  filter(cl == 1) %>% 
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

capital_headquarters <- df_hcl_6 %>%
  filter(cl == 6) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

nonswedish_researcher <- df_hcl_6 %>%
  filter(cl == 4) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

broad_energy <- df_hcl_6 %>%
  filter(cl == 3) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

hydrogen_and_others <- df_hcl_6 %>%
  filter(cl == 5) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

others_nogroup <- df_hcl_6 %>%
  filter(cl == 2) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)
```

## Visualization

### Wrangle

```{r}
cluster_place_sector <- df_hcl_6 %>% 
  select(cluster = cl, place, sector)

jobs_clustered <- jobs %>% # Keep in mind that cluster 2 and 3 are unclear and should be regarded as one "the rest"-cluster
  mutate(year = lubridate::year(Scrape_date), month = lubridate::month(Scrape_date)) %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(id = ID, country = country_code, region, company = Company , sector = Industry_Sector, competence = job_role, year, month, nation = country) %>%
  na.omit() %>%
  unite(place, c("region", "country"), sep = ", ") %>%
  merge(cluster_place_sector, by = c("place", "sector"), all.x = TRUE) %>%
  select(id, cluster, place, company, sector, competence, year, month, nation)

jobs_cluster_nicename <- jobs_clustered %>% # NOTICE the names and numbers may not work with current run
  mutate(cluster = case_when(
    cluster == 1 ~ "Norwegian Energy Engineering",
    cluster == 2 ~ "Others",
    cluster == 3 ~ "Energy manufacturing & utilisation",
    cluster == 4 ~ "Danish & Norwegian Research",
    cluster == 5 ~ "Hydrogen manufacturing & others",
    cluster == 6 ~ "Management & Finance in Oslo & Copenhagen",
    TRUE ~ as.character(cluster)
  ))

df_hcl_nicename_long <- df_hcl_6 %>% # NOTICE the names and numbers may not work with current run
  mutate(cluster = case_when(
    cl == 1 ~ "Norwegian Energy Engineering",
    cl == 2 ~ "Others",
    cl == 3 ~ "Energy manufacturing & utilisation",
    cl == 4 ~ "Danish & Norwegian Research",
    cl == 5 ~ "Hydrogen manufacturing & others",
    cl == 6 ~ "Management & Finance in Oslo & Copenhagen",
    TRUE ~ as.character(cl)
  )) %>%
  relocate(cluster, .after = cl) %>%
  pivot_longer(-c(id, place, sector, cl, cluster), names_to = "competence", values_to = "n")
```

### Tables - This part does not work now

Need to update "other management" and the ", " -\> "( )" part

```{r}
cluster_tbl_sectors <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)
  
cluster_tbl_jobroles <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Other management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", 'Greenland (DK)', "Gävleborg (SE)", 
          "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)", 
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms og Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold og Telemark (NO)", "Vestland (NO)", "Viken (NO)", "Värmland (SE)", 
          "Västerbotten (SE)", "Västernorrland (SE)", "Västmanland (SE)", 
          "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_cluster_nicename %>%
    select(Group = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Group", all.x = TRUE
  ) %>%
  merge(
    jobs_cluster_nicename %>%
    select(Group = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Other management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Group", all.x = TRUE
  )

cluster_names <- c("Danish & Norwegian Research", "Hydrogen manufacturing & others", "Management & Finance in Oslo & Copenhagen", "Energy manufacturing & utilisation", "Norwegian Energy Engineering", "Others")

cluster_tbl_data_short_WITH_bold <- data.frame(
  Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

# Function to bold multiple words in a string
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

for (i in 1:6) {
  cl_name <- cluster_names[i]
  
  total_jobs <- jobs_cluster_nicename %>%
    filter(cluster == cl_name) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*.15
  
  bold_regions <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Group == cl_name) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_cluster_nicename %>%
        filter(cluster == cl_name) %>%
        nrow()
      )
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}


# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Group"
  ) %>%
  cols_label(
    Group = "Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave("figs/cluster_paper_plots/cluster_tbl_short_WITH_BOLD.png", vheight = 744, vwidth = 1250)
```

### Heatmap

```{r}
df_hcl_nicename_long %>% 
  ggplot(aes(x=str_trunc(sector, width = 20, ellipsis = "."), 
             y=str_trunc(competence, width =25, ellipsis = "."), 
             fill = n)) +
  geom_tile() +
  scale_fill_viridis_c(direction=1, option = "D")+
  facet_wrap(~cluster)+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 5, color = "black"), 
    axis.text.y = element_text(size = 5, color = "black"), 
    strip.text = element_text(size = 5.3, face = "bold") 
  ) +
  labs(x="", y ="")
ggsave("figs/heat_nicename_k6.png")
```

### Clusterplot with nicenames

```{r}
# The names will have to be checked that they match the right number. 

# Define the names for each cluster
cluster_names <- c("Management & Finance in Oslo & Copenhagen", "Others", "Energy manufacturing & utilisation", "Danish & Norwegian Research", "Hydrygen manufacturing", "Norwegian Energy Engineering")

# Replace the numerical labels with the names in the clustering result
KM_6$cluster <- factor(KM_6$cluster, levels = 1:6, labels = cluster_names)

# Plot with custom labels
png("figs/k-mean_6_nicename.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_6, mtrx, frame = TRUE)
dev.off()  # Close the device
```

## Make clusters, add to data and make table in functions

Function for creating clusters

```{r}
cluster_function <- function(matrx,k){
  set.seed(123456789)
  KM <- kmeans(matrx,k)
  
  k_mean_plot <- autoplot(KM,matrx,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/figs_W2425/clusters/k-mean_",as.character(k),".png"))
  
  silhouette_score <- silhouette(KM$cluster, dist(matrx))
  mean_silhouette_score <- mean(silhouette_score[, 3])
  wcss <- sum(KM$withinss)
  dunn_index <- dunn(clusters = KM$cluster, Data = matrx)
  davies_bouldin_index <- index.DB(matrx, KM$cluster)$DB
  
  print(paste("The scores for k = ",as.character(k)))
  print(paste("Mean Silhouette Score:", mean_silhouette_score))
  print(paste("WCSS:", wcss))
  print(paste("Dunn Index:", dunn_index))
  print(paste("Davies-Bouldin Index:", davies_bouldin_index))
  
  return(KM)
}
```

Function for adding clusters to data

```{r}
add_cluster_to_data_function <- function(KM){
  cl <- KM$cluster

  df_hcl <- df_wide_cl %>% 
    rowid_to_column("id") %>%
    mutate(cl = cl) %>% 
    relocate(cl, .after = "id") 
  
  df_hcl_long <- df_hcl %>%
    pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")

  sum_stat <- df_hcl %>% 
    group_by(cl) %>% 
    summarise(across(.col = Engineering:PhD, .fns = mean))

  pl_cl <- df_hcl_long %>% group_by(cl, place) %>% summarise(n = sum(n)) %>% arrange(desc(cl))

  se_cl <- df_hcl_long %>% group_by(cl, sector) %>% summarise(n = sum(n)) %>% arrange(desc(cl))

  cluster_place_sector <- df_hcl %>% 
    select(cluster = cl, place, sector)
  
  jobs_clustered <- jobs %>% 
    mutate(year = lubridate::year(Scrape_date), month = lubridate::month(Scrape_date)) %>%
    left_join(companies, by =c("Company" = "Name")) %>%
    select(id = ID, country = country_code, region, company = Company , sector = Industry_Sector, competence = job_role, year, month, nation = country) %>%
    na.omit() %>%
    filter(!sector == 'NaN') %>% filter(!competence == 'NaN') %>%
    unite(place, c("region", "country"), sep = ", ") %>%
    merge(cluster_place_sector, by = c("place", "sector"), all.x = TRUE) %>%
    select(id, cluster, place, company, sector, competence, year, month, nation)
  
  return(list(df_hcl = df_hcl,sum_stat = sum_stat,pl_cl = pl_cl,se_cl = se_cl,jobs_clustered = jobs_clustered))
}
```

Function for making a table to visualize clusters

```{r}
# Function to bold multiple words in a string
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

make_table_function <- function(jobs_clustered,k,top_percentage){

cluster_tbl_sectors <- jobs_clustered %>%
  select(Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)

cluster_tbl_jobroles <- jobs_clustered %>%
  select(Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Management other",
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", 
        "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Greenland (DK)", 
          "Gävleborg (SE)", "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)",
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)", "Akershus (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", "Västerbotten (SE)", "Västernorrland (SE)", 
          "Västmanland (SE)", "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_clustered %>%
    select(Group = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility",
          "Fossil fuel & Refinery", "Government & Public sector", 
          "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", 
          "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Group", all.x = TRUE
  ) %>%
  merge(
    jobs_clustered %>%
    select(Group = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Management other", 
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",
        "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Group", all.x = TRUE
  )

cluster_tbl_data_short_WITH_bold <- data.frame(
  Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

for (i in 1:k) {
  
  total_jobs <- jobs_clustered %>%
    filter(cluster == i) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*top_percentage
  
  bold_regions <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Group == i) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_clustered %>%
        filter(cluster == i) %>%
        nrow()
      )
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}

# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Group"
  ) %>%
  cols_label(
    Group = "Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave(paste0("H2_paper/figs_W2425/clusters/cluster_tbl_WITH_BOLD_",as.character(k),".png"), vheight = 800, vwidth = 2000)

#####

#View(cluster_tbl_sectors)
#View(cluster_tbl_jobroles)
#View(cluster_tbl_data)
#View(cluster_tbl_data_short)
#View(cluster_tbl_data_short_WITH_bold)

}
```

Function adding all other functions together into one

```{r}
all_cluster_functions_together <- function(k,matrx,top_percentage){
  KM <- cluster_function(matrx,k)
  cluster_result <- add_cluster_to_data_function(KM)
  make_table_function(cluster_result$jobs_clustered,k,top_percentage)
  
  return(list(KM=KM,df_hcl = cluster_result$df_hcl,
         sum_stat = cluster_result$sum_stat,pl_cl = cluster_result$pl_cl,
         se_cl = cluster_result$se_cl,jobs_clustered = cluster_result$jobs_clustered))
}
```

Area to run the functions for the wished for configurations

```{r}
# Running for multiple k
cluster_result_all <- tibble(
  i = 3:10,      # First column (numeric values 1 to 10)
  Result = letters[3:10]  # Second column (letters a to j))
)

j <- 0
for (i in 3:10){
  j <- j+1
  cluster_result_i <- all_cluster_functions_together(i,mtrx,0.2)
  
  cluster_result_all$Result[j] <- I(list(cluster_result_i))
}
```

### Important organisations

Function

```{r}
important_orgs <- function(cluster_result_multi,top_perc,cumulative_perc){
  for (i in 1:nrow(cluster_result_multi)){
    clustered_jobs <- cluster_result_multi[[2]][[i]][["jobs_clustered"]]
    
    k <- max(clustered_jobs$cluster)
    
    clustered_org <- clustered_jobs %>%
      group_by(cluster, company) %>%
      summarise(n =n()) %>%
      ungroup() %>%
      group_by(cluster) %>%
      mutate(
        total_n = sum(n),
        share = n / total_n
        ) %>%
      ungroup()
    
    clust_top_org <- clustered_org %>%
      filter(share > top_perc)
    
    clust_cumulative <- clustered_org %>%
      group_by(cluster) %>%
      arrange(desc(share), .by_group = TRUE) %>%   # Sort by share within each country
      mutate(cumulative_share = cumsum(share)) %>% # Calculate cumulative share
      filter(cumulative_share <= cumulative_perc | 
               dplyr::lag(cumulative_share, default = 0) <= cumulative_perc) %>%
      ungroup()
    
    clust_top_org_tbl <- clust_top_org %>%
      select(cluster, company, n, share) %>%
      arrange(cluster, desc(n)) %>%
      gt() %>% 
      tab_header(
        title = paste0("Organisations in groups - each accounting for ",
                       as.character(top_perc*100),"% of the jobs in each group")
        ) %>%
      cols_label(
        cluster = "Group",
        company = "Organisation",
        n = 'Number of jobs',
        share = 'Share'
        ) %>% 
      tab_options(
        table.font.size = px(12),
        heading.align = "left",
        table.border.left.style = "solid",
        table.border.left.width = px(1),
        table.border.left.color = "lightgrey",
        table.border.right.style = "solid",
        table.border.right.width = px(1),
        table.border.right.color = "lightgrey"
        ) %>%
      tab_style(
        style = cell_borders(
          sides = "right",
          color = "lightgrey",
          weight = px(1)
          ),
        locations = cells_body(
          columns = c(cluster, company, n, share)
          )
        )
    
    clust_cumulative_tbl <- clust_cumulative %>%
      select(cluster, company, n, share) %>%
      arrange(cluster, desc(n)) %>%
      gt() %>% 
      tab_header(
        title = paste0("Organisations in groups - accounting in total for ",
                       as.character(cumulative_perc*100),"% of the jobs in each group")
        ) %>%
      cols_label(
        cluster = "Group",
        company = "Organisation",
        n = 'Number of jobs',
        share = 'Share'
        ) %>% 
      tab_options(
        table.font.size = px(12),
        heading.align = "left",
        table.border.left.style = "solid",
        table.border.left.width = px(1),
        table.border.left.color = "lightgrey",
        table.border.right.style = "solid",
        table.border.right.width = px(1),
        table.border.right.color = "lightgrey"
        ) %>%
      tab_style(
        style = cell_borders(
          sides = "right",
          color = "lightgrey",
          weight = px(1)
          ),
        locations = cells_body(
          columns = c(cluster, company, n, share)
          )
        )
    
    clust_top_org_tbl %>% 
      gtsave(paste0("H2_paper/figs_W2425/clusters/clust_top_org_tbl_",
                    as.character(k),".png"), vheight = 800, vwidth = 2000)
    clust_cumulative_tbl %>% 
      gtsave(paste0("H2_paper/figs_W2425/clusters/clust_cumulative_tbl_",
                    as.character(k),".png"), vheight = 800, vwidth = 2000)
  }
}
```

Run it

```{r}
important_orgs(cluster_result_all,0.04,0.5)
```

# New clustering - aiming for robustness

New jobs df

```{r}
jobs <- df_main_raw %>% 
  select(!Description) %>% select(!translatedText) %>%
  mutate(publish_country = case_when(
    str_detect(ID, pattern ="^1") ~ "SE", 
    str_detect(ID, pattern ="^2") ~ "NO",
    str_detect(ID, pattern ="^3") ~ "DK"
  )) %>%
  mutate(Scrape_date = lubridate::ymd(Scrape_date)) %>%
  left_join(job_roles) %>%
  filter(Scrape_date >= "2023-08-20") %>%  
  filter(is.na(Hydrogen_relevance)) %>%
  separate_rows(Location, sep = ", ") %>% # this is to divide multilocation jobs into seperate jobs
  inner_join(geo, by = c("Location"="new_name")) %>%
  filter(country %in% c("Denmark","Norway","Sweden")) %>%
  group_by(ID) %>% # The part after here is to set a weight to each job so that we keep the information
  mutate(LocationCount = n(), 
         Weight = 1 / LocationCount) %>%
  ungroup()
```

## Wrangle

OLD

```{r}
df_for_cluster <- jobs %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(ID,region,country_code,sector= Industry_Sector,competence = job_role,
         organisation = Company,city = Location,country,engineer_type = Type,
         engineer_generalType = Type_2) %>%
  filter(!sector == 'NaN') %>%
  filter(!region == 'NaN') %>%
  filter(!competence == 'NaN') %>%
  filter(!organisation == 'Employment/staffing agency')

df_factor_count <- df_for_cluster %>%
  group_by(country_code, region, sector, competence) %>%
  summarise(n = n())

df_factor_count_WIDE <- df_factor_count %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()


mtrx_factor_count <- as.matrix(df_factor_count_WIDE %>% select(-place, -sector))
```

NEW

```{r}
df_for_cluster <- jobs %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(ID,region,country_code,sector= Industry_Sector,competence = job_role,
         organisation = Company,city = Location,country,engineer_type = Type,
         engineer_generalType = Type_2, weight = Weight) %>%
  filter(!sector == 'NaN') %>%
  filter(!region == 'NaN') %>%
  filter(!competence == 'NaN') %>%
  filter(!organisation == 'Employment/staffing agency')

df_factor_count <- df_for_cluster %>%
  group_by(country_code, region, sector, competence) %>%
  summarise(n = sum(weight), .groups = "drop")

df_factor_count_WIDE <- df_factor_count %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

mtrx_factor_count <- as.matrix(df_factor_count_WIDE %>% select(-place, -sector))
```

## Checking for best k

Calculate scores for WSS & silhoette and plot for visual determination of k

```{r}
library(tidyverse)
library(cluster)

# Step 1: Compute Silhouette Scores (your original code)
sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx_factor_count, k = k)
  pam_k$silinfo$avg.width
})

df_sil <- tibble(k = 2:60, sil_width = sil_width)

# Step 2: Compute WSS (your original k-means elbow method)
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx_factor_count, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_wss <- tibble(k = 2:60, wss = wss)

# Step 3: Normalize both metrics using min-max scaling
df_combined <- df_sil %>%
  inner_join(df_wss, by = "k") %>%
  mutate(
    sil_scaled = (sil_width - min(sil_width)) / (max(sil_width) - min(sil_width)),
    wss_scaled = (wss - min(wss)) / (max(wss) - min(wss))
  )

# Step 4: Plot both curves together
ggplot(df_combined, aes(x = k)) +
  geom_line(aes(y = sil_scaled, color = "Silhouette Score"), linewidth = 1) +
  geom_point(aes(y = sil_scaled, color = "Silhouette Score")) +
  geom_line(aes(y = wss_scaled, color = "WSS (Elbow Method)"), linewidth = 1, linetype = "dashed") +
  geom_point(aes(y = wss_scaled, color = "WSS (Elbow Method)")) +
  scale_x_continuous(breaks = seq(2, 60, by = 2)) +
  labs(
    x = "Number of Clusters (k)",
    y = "Normalized Score (0-1)",
    title = "Comparison of Silhouette Score & WSS for Clustering",
    color = "Metric"
  ) +
  theme_minimal()
```

Automatic best choice for k - results not very useful

```{r}
best_k_sil <- df_combined %>%
  filter(sil_width == max(sil_width)) %>%
  pull(k)

print(paste("Optimal k based on Silhouette Score:", best_k_sil))

##

# Compute first derivative (rate of change)
wss_diff <- diff(df_combined$wss)

# Compute second derivative (acceleration of change)
wss_ddiff <- diff(wss_diff)

# Find the k where the second derivative is minimized (sharpest bend)
best_k_wss <- df_combined$k[which.min(wss_ddiff) + 1]  # +1 to adjust for indexing

print(paste("Optimal k based on Elbow Method:", best_k_wss))

##

library(cluster)

gap_stat <- clusGap(mtrx_factor_count, FUN = kmeans, K.max = 60, B = 50) # B = 50 bootstrap iterations

best_k_gap <- which.max(gap_stat$Tab[, "gap"])  # Select k with highest gap statistic

print(paste("Optimal k based on Gap Statistic:", best_k_gap))

##

ggplot(df_combined, aes(x = k)) +
  geom_line(aes(y = sil_scaled, color = "Silhouette Score"), size = 1) +
  geom_point(aes(y = sil_scaled, color = "Silhouette Score")) +
  geom_line(aes(y = wss_scaled, color = "WSS (Elbow Method)"), size = 1, linetype = "dashed") +
  geom_point(aes(y = wss_scaled, color = "WSS (Elbow Method)")) +
  
  # Annotate best k values
  geom_vline(xintercept = best_k_sil, linetype = "dotted", color = "blue", size = 1) +
  geom_vline(xintercept = best_k_wss, linetype = "dotted", color = "red", size = 1) +
  
  annotate("text", x = best_k_sil, y = 1, label = paste("Best k (Silhouette):", best_k_sil), color = "blue", hjust = -0.2) +
  annotate("text", x = best_k_wss, y = 0.9, label = paste("Best k (WSS):", best_k_wss), color = "red", hjust = -0.2) +
  
  scale_x_continuous(breaks = seq(2, 60, by = 2)) +
  labs(
    x = "Number of Clusters (k)",
    y = "Normalized Score (0-1)",
    title = "Automated Selection of Optimal k",
    color = "Metric"
  ) +
  theme_minimal()
```

## Multiple seeds

First we perform clustering on the data 1000 times with nstart set to 1000 using k-means++ to see what results we get

```{r}
library(mclust)

set.seed(123)  # Set an initial seed for reproducibility
num_runs <- 1000  
ks <- c(4,5,6,7,8,9,10)  

for (j in 1:length(ks)) {
  cluster_results <- list() 
  seeds_used <- list()
  sil_data <- list()
  sil_sd <- list()
  wss_data <- list()
  k <- ks[j]
  for (i in 1:num_runs) {
    seed_current <- sample(1:10000, 1)
    set.seed(seed_current) 
    km <- kmeans(mtrx_factor_count, centers = k, iter.max = 100, 
                 nstart = 1000, algorithm = "Lloyd") 
    cl <- km$cluster
    cluster_results[[i]] <- cl
    seeds_used[[i]] <- seed_current
    
    dist_matrix <- dist(mtrx_factor_count)
    sil_scores <- silhouette(cl, dist_matrix)
    avg_sil_by_cluster <- data.frame(cluster = 1:k,
                                     sil_cl = tapply(sil_scores[, "sil_width"],cl, mean)
                                     )
    sil_data[[i]] <- mean(avg_sil_by_cluster[, 2])
    sil_sd[[i]] <- sd(avg_sil_by_cluster[, 2])
                          
    wss_value <- km$tot.withinss
    wss_by_cluster <- km$withinss  # This gives a vector of WSS per cluster
    df_wss <- data.frame(cluster = 1:k, wss_cl = wss_by_cluster)
    wss_data[[i]] <- wss_value

    df_hcl <- df_factor_count_WIDE %>%
      rowid_to_column("id") %>%
      mutate(cl = cl) %>% 
      mutate(sil_score = sil_scores[, "sil_width"]) %>%
      relocate(cl, .after = "id") %>% 
      select(cluster = cl, place, sector,sil_score) 
    
    df_to_save <- df_for_cluster %>%
      select(ID, region, country_code, sector, competence) %>%
      unite(place, c("region", "country_code"), sep = ", ") %>%
      merge(df_hcl, by = c("place", "sector"), all.x = TRUE) %>%
      merge(avg_sil_by_cluster, by = c('cluster')) %>%
      merge(df_wss, by = c('cluster')) %>%
      select(ID, place, sector, competence, cluster, sil_score, sil_cl, wss_cl)
    
    saveRDS(df_to_save,
            file = paste0("H2_paper/cluster_new/k=",
                          as.character(k),'/all_seeds/',
                          as.character(seed_current),'_df.rds'))
    
    # Open a graphics device to save the plot as a PNG file
    plot_file <- paste0("H2_paper/cluster_new/k=",as.character(k),
                        '/all_seeds/',as.character(seed_current),
                        "_silhouette.png")
    png(plot_file, width = 900, height = 1200)  
    plot(sil_scores, main = "Silhouette Plot for K-Means Clustering")
    dev.off()
    
    wss_plot <- ggplot(df_wss, aes(x = cluster, y = wss_cl)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      labs(title = "WSS per Cluster", x = "Cluster", y = "Within-Cluster Sum of Squares") +
      theme_minimal()
    ggsave(filename = paste0("H2_paper/cluster_new/k=",as.character(k),
                  '/all_seeds/',as.character(seed_current),"_WSS.png"),
           plot = wss_plot)
    
    print(paste0('run ',as.character(i),' done!'))
  }
  ## CONTINUE HERE  
  
  # Convert list to a dataframe for comparison
  df_clusters <- as.data.frame(cluster_results)
  df_clusters <- df_clusters %>% mutate(run_id = row_number())  # Add row index

  # Convert each run's cluster assignment (column) into a string pattern
  cluster_patterns <- apply(df_clusters[, 1:num_runs], 2, paste, collapse = "-")

  # Count occurrences of each unique clustering result
  cluster_counts <- as.data.frame(table(cluster_patterns)) %>%
    arrange(desc(Freq)) %>%
    rename(pattern = cluster_patterns)

  # Compute pairwise Adjusted Rand Index (ARI) across runs
  ari_values <- combn(1:num_runs, 2, function(idx) {
    adjustedRandIndex(df_clusters[[idx[1]]], df_clusters[[idx[2]]])
    })

  mean_ari <- mean(ari_values)
      ###
  
# Combine everything into a final data frame
  df_patterns_seeds <- data.frame(
    pattern = cluster_patterns,
    seed = unlist(seeds_used),  
    sil_score = unlist(sil_data),
    sil_sd_cl = unlist(sil_sd),
    wss_score = unlist(wss_data)
    )

# Keep only the first occurrence of each unique pattern
  unique_patterns_seeds <- df_patterns_seeds %>%
    distinct(pattern, .keep_all = TRUE) %>%
    left_join(cluster_counts, by = "pattern")
  
  df_to_csv <- unique_patterns_seeds %>%
    arrange(desc(Freq), desc(sil_score), wss_score) %>%
    select(seed,Freq,sil_score,sil_sd_cl,wss_score,pattern)
  
  write.csv(df_to_csv,
            paste0("H2_paper/cluster_new/k=",as.character(k),
                   '/general_info_ARI=',as.character(mean_ari),
                   '_df.csv'),
            row.names = FALSE) 
  
  ### Re-laberling
  library(clue)
  
  # Function to relabel clusters for consistent comparison
  relabel_clusters <- function(reference, to_match) {
    k <- length(unique(reference))  # Number of clusters
    cost_matrix <- table(reference, to_match)  # Contingency table
  
  # Solve assignment problem
    assignment <- solve_LSAP(cost_matrix, maximum = TRUE)  
    new_labels <- setNames(seq_along(assignment), assignment)
  
    return(new_labels[to_match])  # Apply new labels
  }

# Step 2: Choose the first run as the reference for consistent relabeling
  reference_labels <- df_clusters[[1]]

# Step 3: Relabel all cluster assignments to match reference labels
  df_clusters_relabel <- df_clusters
  for (i in 1:num_runs) {
    df_clusters_relabel[[i]] <- relabel_clusters(reference_labels,
                                                 df_clusters[[i]])
  }
  
# Step 4: Convert cluster assignments to a pattern string
  cluster_patterns_reL <- apply(df_clusters_relabel[, 1:num_runs], 2, paste,
                            collapse = "-")

# Step 5: Count occurrences of each unique pattern
  cluster_counts_reL <- as.data.frame(table(cluster_patterns_reL)) %>%
    arrange(desc(Freq)) %>%
    rename(pattern = cluster_patterns_reL)

# Step 6: Combine patterns, seeds, and metrics into final data frame
  df_patterns_seeds_reL <- data.frame(
    pattern = cluster_patterns_reL,
    seed = unlist(seeds_used),  
    sil_score = unlist(sil_data),
    sil_sd_cl = unlist(sil_sd),
    wss_score = unlist(wss_data),
    row.names = NULL
    )
  
# Step 7: Keep only first occurrence of each unique pattern
  unique_patterns_seeds_reL <- df_patterns_seeds_reL %>%
    distinct(pattern, .keep_all = TRUE) %>%
    left_join(cluster_counts_reL, by = "pattern")
  
  df_to_csv_reL <- unique_patterns_seeds_reL %>%
    arrange(desc(Freq), desc(sil_score), wss_score) %>%
    select(seed,Freq,sil_score,sil_sd_cl,wss_score,pattern)
  
  write.csv(df_to_csv_reL,
            paste0("H2_paper/cluster_new/k=",as.character(k),
                   '/general_info_ARI=',as.character(mean_ari),
                   '_df_relabeled.csv'),
            row.names = FALSE) 

  print(paste0('k = ',as.character(j),' done!'))
}
```

Following text not currently correct

*We have checked the scores from the clustering and conclude that 5 to 6 clusters gave best scores. 5 had best silhouettes and had one configuration that ocured 9% of the times. While 6 had the best ARI of basically 1.*

*We now will look at the most frequent configurations from these, for k=5 we have 2 configurations with silhouette of \~0.4 and for k=6 we have 6 configurations at \~0.37*

```{r}
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

make_table_function_new <- function(jobs_clustered,k,top_percentage){
  
  jobs_clustered <- jobs_clustered %>%
    group_by(ID) %>% # The part after here is to set a weight to each job so that we keep the information
    mutate(LocationCount = n(), 
           weight = 1 / LocationCount) %>%
    ungroup()

cluster_tbl_sectors <- jobs_clustered %>%
  select(Cluster = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)

cluster_tbl_jobroles <- jobs_clustered %>%
  select(Cluster = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", 
        "Management other",
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", 
        "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Cluster", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Cluster, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Greenland (DK)", 
          "Gävleborg (SE)", "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", 
          "Kalmar (SE)",
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)", "Akershus (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", "Västerbotten (SE)", "Västernorrland (SE)", 
          "Västmanland (SE)", "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_clustered %>%
    select(Cluster = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer",
          "Energy utility",
          "Fossil fuel & Refinery", "Government & Public sector", 
          "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", 
          "Other", "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Cluster", all.x = TRUE
  ) %>%
  merge(
    jobs_clustered %>%
    select(Cluster = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", 
        "Management other", 
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", 
        "Sales & Customer service",
        "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Cluster", all.x = TRUE
  )

cluster_tbl_data_short_WITH_bold <- data.frame(
  Cluster = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

for (i in 1:k) {
  
  total_jobs <- jobs_clustered %>%
    filter(cluster == i) %>% 
    summarise(total_weight = sum(weight, na.rm = TRUE)) %>%
    pull(total_weight)
  
  minimum_jobs <- total_jobs*top_percentage/100
  
  bold_regions <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(place) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(sector) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(competence) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Cluster == i) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      round(jobs_clustered %>%
        filter(cluster == i) %>%
        summarise(total_weight = sum(weight, na.rm = TRUE)) %>%
        pull(total_weight)
      ))
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}

# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Cluster"
  ) %>%
  cols_label(
    Cluster = "Cluster",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Cluster, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave(paste0("H2_paper/cluster_new/divided_oslo/k=",
                                              as.character(k),
                                              "/best_result/cluster_tbl_WITH_BOLD_",
                                              'top_',as.character(top_percentage),'%_',
                                              as.character(seed),".png"), 
                                       vheight = 800, vwidth = 2000)
}
```

```{r}
seeds_4 <- c(9459)

for (i in 1:length(seeds_4)){
  seed <- seeds_4[i]
  cluster_result_k4 <- readRDS(paste0('H2_paper/cluster_new/divided_oslo/k=4/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count,4)
  k_mean_plot <- autoplot(km,mtrx_factor_count,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/divided_oslo/k=4/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new(cluster_result_k4,4,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_5 <- c(5324)

for (i in 1:length(seeds_5)){
  seed <- seeds_5[i]
  cluster_result_k5 <- readRDS(paste0('H2_paper/cluster_new/divided_oslo/k=5/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count,5)
  k_mean_plot <- autoplot(km,mtrx_factor_count,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/divided_oslo/k=5/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new(cluster_result_k5,5,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_6 <- c(9581)

for (i in 1:length(seeds_6)){
  seed <- seeds_6[i]
  cluster_result_k6 <- readRDS(paste0('H2_paper/cluster_new/divided_oslo/k=6/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count, centers = 6, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/divided_oslo/k=6/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new(cluster_result_k6,6,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_7 <- c(3402)

for (i in 1:length(seeds_7)){
  seed <- seeds_7[i]
  cluster_result_k7 <- readRDS(paste0('H2_paper/cluster_new/divided_oslo/k=7/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count, centers = 7, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/divided_oslo/k=7/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new(cluster_result_k7,7,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_8 <- c(347)

for (i in 1:length(seeds_8)){
  seed <- seeds_8[i]
  cluster_result_k8 <- readRDS(paste0('H2_paper/cluster_new/divided_oslo/k=8/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count, centers = 8, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/divided_oslo/k=8/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new(cluster_result_k8,8,20) #Last number is for top percentage, written in percentage and not decimals
}
```

## Combine Oslo & Akershus

OLD

```{r}
akershus_oslo <- jobs %>%
  filter(region %in% c('Oslo','Akershus')) %>%
  select(!region) %>%
  mutate(region = 'Oslo & Akershus') 

jobs_akershus_oslo <- jobs %>%
  filter(!region %in% c('Oslo','Akershus')) %>%
  bind_rows(akershus_oslo)

df_for_cluster_akershus_oslo <- jobs_akershus_oslo %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(ID,region,country_code,sector= Industry_Sector,competence = job_role,
         organisation = Company,city = Location,country,engineer_type = Type,
         engineer_generalType = Type_2) %>%
  filter(!sector == 'NaN') %>%
  filter(!region == 'NaN') %>%
  filter(!competence == 'NaN') %>%
  filter(!organisation == 'Employment/staffing agency')

df_factor_count_akershus_oslo <- df_for_cluster_akershus_oslo %>%
  group_by(country_code, region, sector, competence) %>%
  summarise(n = n())

df_factor_count_WIDE_akershus_oslo <- df_factor_count_akershus_oslo %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

mtrx_factor_count_akershus_oslo <- as.matrix(df_factor_count_WIDE_akershus_oslo
                                             %>% select(-place, -sector))
```

```{r}
# Step 1: Compute Silhouette Scores (your original code)
sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx_factor_count_akershus_oslo, k = k)
  pam_k$silinfo$avg.width
})

df_sil <- tibble(k = 2:60, sil_width = sil_width)

# Step 2: Compute WSS (your original k-means elbow method)
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx_factor_count_akershus_oslo, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_wss <- tibble(k = 2:60, wss = wss)

# Step 3: Normalize both metrics using min-max scaling
df_combined <- df_sil %>%
  inner_join(df_wss, by = "k") %>%
  mutate(
    sil_scaled = (sil_width - min(sil_width)) / (max(sil_width) - min(sil_width)),
    wss_scaled = (wss - min(wss)) / (max(wss) - min(wss))
  )

# Step 4: Plot both curves together
ggplot(df_combined, aes(x = k)) +
  geom_line(aes(y = sil_scaled, color = "Silhouette Score"), linewidth = 1) +
  geom_point(aes(y = sil_scaled, color = "Silhouette Score")) +
  geom_line(aes(y = wss_scaled, color = "WSS (Elbow Method)"), linewidth = 1, linetype = "dashed") +
  geom_point(aes(y = wss_scaled, color = "WSS (Elbow Method)")) +
  scale_x_continuous(breaks = seq(2, 60, by = 2)) +
  labs(
    x = "Number of Clusters (k)",
    y = "Normalized Score (0-1)",
    title = "Comparison of Silhouette Score & WSS for Clustering",
    color = "Metric"
  ) +
  theme_minimal()
```

Best silhouette at k=4-6, elbow at k=\~6

NEW

```{r}
akershus_oslo <- jobs %>%
  filter(region %in% c('Oslo','Akershus')) %>%
  select(!region) %>%
  mutate(region = 'Oslo & Akershus') 

jobs_akershus_oslo <- jobs %>%
  filter(!region %in% c('Oslo','Akershus')) %>%
  bind_rows(akershus_oslo)

df_for_cluster_akershus_oslo <- jobs_akershus_oslo %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(ID,region,country_code,sector= Industry_Sector,competence = job_role,
         organisation = Company,city = Location,country,engineer_type = Type,
         engineer_generalType = Type_2, weight = Weight) %>%
  filter(!sector == 'NaN') %>%
  filter(!region == 'NaN') %>%
  filter(!competence == 'NaN') %>%
  filter(!organisation == 'Employment/staffing agency')

df_factor_count_akershus_oslo <- df_for_cluster_akershus_oslo %>%
  group_by(country_code, region, sector, competence) %>%
  summarise(n = sum(weight), .groups = "drop")

df_factor_count_WIDE_akershus_oslo <- df_factor_count_akershus_oslo %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

mtrx_factor_count_akershus_oslo <- as.matrix(df_factor_count_WIDE_akershus_oslo
                                             %>% select(-place, -sector))
```

```{r}
# Step 1: Compute Silhouette Scores (your original code)
sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx_factor_count_akershus_oslo, k = k)
  pam_k$silinfo$avg.width
})

df_sil <- tibble(k = 2:60, sil_width = sil_width)

# Step 2: Compute WSS (your original k-means elbow method)
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx_factor_count_akershus_oslo, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_wss <- tibble(k = 2:60, wss = wss)

# Step 3: Normalize both metrics using min-max scaling
df_combined <- df_sil %>%
  inner_join(df_wss, by = "k") %>%
  mutate(
    sil_scaled = (sil_width - min(sil_width)) / (max(sil_width) - min(sil_width)),
    wss_scaled = (wss - min(wss)) / (max(wss) - min(wss))
  )

# Step 4: Plot both curves together
ggplot(df_combined, aes(x = k)) +
  geom_line(aes(y = sil_scaled, color = "Silhouette Score"), linewidth = 1) +
  geom_point(aes(y = sil_scaled, color = "Silhouette Score")) +
  geom_line(aes(y = wss_scaled, color = "WSS (Elbow Method)"), linewidth = 1, linetype = "dashed") +
  geom_point(aes(y = wss_scaled, color = "WSS (Elbow Method)")) +
  scale_x_continuous(breaks = seq(2, 60, by = 2)) +
  labs(
    x = "Number of Clusters (k)",
    y = "Normalized Score (0-1)",
    title = "Comparison of Silhouette Score & WSS for Clustering",
    color = "Metric"
  ) +
  theme_minimal()
```

Best silhouette at k=???, elbow at k=???

```{r}
library(mclust)

set.seed(123)  # Set an initial seed for reproducibility
num_runs <- 1000  
ks <- c(4,5,6,7)  

for (j in 1:length(ks)) {
  cluster_results <- list() 
  seeds_used <- list()
  sil_data <- list()
  sil_sd <- list()
  wss_data <- list()
  k <- ks[j]
  for (i in 1:num_runs) {
    seed_current <- sample(1:10000, 1)
    set.seed(seed_current) 
    km <- kmeans(mtrx_factor_count_akershus_oslo, centers = k, iter.max = 100, 
                 nstart = 1000, algorithm = "Lloyd") 
    cl <- km$cluster
    cluster_results[[i]] <- cl
    seeds_used[[i]] <- seed_current
    
    dist_matrix <- dist(mtrx_factor_count_akershus_oslo)
    sil_scores <- silhouette(cl, dist_matrix)
    avg_sil_by_cluster <- data.frame(cluster = 1:k,
                                     sil_cl = tapply(sil_scores[, "sil_width"],cl, mean)
                                     )
    sil_data[[i]] <- mean(avg_sil_by_cluster[, 2])
    sil_sd[[i]] <- sd(avg_sil_by_cluster[, 2])
                          
    wss_value <- km$tot.withinss
    wss_by_cluster <- km$withinss  # This gives a vector of WSS per cluster
    df_wss <- data.frame(cluster = 1:k, wss_cl = wss_by_cluster)
    wss_data[[i]] <- wss_value

    df_hcl <- df_factor_count_WIDE_akershus_oslo %>%
      rowid_to_column("id") %>%
      mutate(cl = cl) %>% 
      mutate(sil_score = sil_scores[, "sil_width"]) %>%
      relocate(cl, .after = "id") %>% 
      select(cluster = cl, place, sector,sil_score) 
    
    df_to_save <- df_for_cluster_akershus_oslo %>%
      select(ID, region, country_code, sector, competence) %>%
      unite(place, c("region", "country_code"), sep = ", ") %>%
      merge(df_hcl, by = c("place", "sector"), all.x = TRUE) %>%
      merge(avg_sil_by_cluster, by = c('cluster')) %>%
      merge(df_wss, by = c('cluster')) %>%
      select(ID, place, sector, competence, cluster, sil_score, sil_cl, wss_cl)
    
    saveRDS(df_to_save,
            file = paste0("H2_paper/cluster_new/k=",
                          as.character(k),'/all_seeds/',
                          as.character(seed_current),'_df.rds'))
    
    # Open a graphics device to save the plot as a PNG file
    plot_file <- paste0("H2_paper/cluster_new/k=",as.character(k),
                        '/all_seeds/',as.character(seed_current),
                        "_silhouette.png")
    png(plot_file, width = 900, height = 1200)  
    plot(sil_scores, main = "Silhouette Plot for K-Means Clustering")
    dev.off()
    
    wss_plot <- ggplot(df_wss, aes(x = cluster, y = wss_cl)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      labs(title = "WSS per Cluster", x = "Cluster", y = "Within-Cluster Sum of Squares") +
      theme_minimal()
    ggsave(filename = paste0("H2_paper/cluster_new/k=",as.character(k),
                  '/all_seeds/',as.character(seed_current),"_WSS.png"),
           plot = wss_plot)
    
    print(paste0('run ',as.character(i),' done!'))
  }
  ## CONTINUE HERE  
  
  # Convert list to a dataframe for comparison
  df_clusters <- as.data.frame(cluster_results)
  df_clusters <- df_clusters %>% mutate(run_id = row_number())  # Add row index

  # Convert each run's cluster assignment (column) into a string pattern
  cluster_patterns <- apply(df_clusters[, 1:num_runs], 2, paste, collapse = "-")

  # Count occurrences of each unique clustering result
  cluster_counts <- as.data.frame(table(cluster_patterns)) %>%
    arrange(desc(Freq)) %>%
    rename(pattern = cluster_patterns)

  # Compute pairwise Adjusted Rand Index (ARI) across runs
  ari_values <- combn(1:num_runs, 2, function(idx) {
    adjustedRandIndex(df_clusters[[idx[1]]], df_clusters[[idx[2]]])
    })

  mean_ari <- mean(ari_values)
      ###
  
# Combine everything into a final data frame
  df_patterns_seeds <- data.frame(
    pattern = cluster_patterns,
    seed = unlist(seeds_used),  
    sil_score = unlist(sil_data),
    sil_sd_cl = unlist(sil_sd),
    wss_score = unlist(wss_data)
    )

# Keep only the first occurrence of each unique pattern
  unique_patterns_seeds <- df_patterns_seeds %>%
    distinct(pattern, .keep_all = TRUE) %>%
    left_join(cluster_counts, by = "pattern")
  
  df_to_csv <- unique_patterns_seeds %>%
    arrange(desc(Freq), desc(sil_score), wss_score) %>%
    select(seed,Freq,sil_score,sil_sd_cl,wss_score,pattern)
  
  write.csv(df_to_csv,
            paste0("H2_paper/cluster_new/k=",as.character(k),
                   '/general_info_ARI=',as.character(mean_ari),
                   '_df.csv'),
            row.names = FALSE) 
  
  ### Re-laberling
  library(clue)
  
  # Function to relabel clusters for consistent comparison
  relabel_clusters <- function(reference, to_match) {
    k <- length(unique(reference))  # Number of clusters
    cost_matrix <- table(reference, to_match)  # Contingency table
  
  # Solve assignment problem
    assignment <- solve_LSAP(cost_matrix, maximum = TRUE)  
    new_labels <- setNames(seq_along(assignment), assignment)
  
    return(new_labels[to_match])  # Apply new labels
  }

# Step 2: Choose the first run as the reference for consistent relabeling
  reference_labels <- df_clusters[[1]]

# Step 3: Relabel all cluster assignments to match reference labels
  df_clusters_relabel <- df_clusters
  for (i in 1:num_runs) {
    df_clusters_relabel[[i]] <- relabel_clusters(reference_labels,
                                                 df_clusters[[i]])
  }
  
# Step 4: Convert cluster assignments to a pattern string
  cluster_patterns_reL <- apply(df_clusters_relabel[, 1:num_runs], 2, paste,
                            collapse = "-")

# Step 5: Count occurrences of each unique pattern
  cluster_counts_reL <- as.data.frame(table(cluster_patterns_reL)) %>%
    arrange(desc(Freq)) %>%
    rename(pattern = cluster_patterns_reL)

# Step 6: Combine patterns, seeds, and metrics into final data frame
  df_patterns_seeds_reL <- data.frame(
    pattern = cluster_patterns_reL,
    seed = unlist(seeds_used),  
    sil_score = unlist(sil_data),
    sil_sd_cl = unlist(sil_sd),
    wss_score = unlist(wss_data),
    row.names = NULL
    )
  
# Step 7: Keep only first occurrence of each unique pattern
  unique_patterns_seeds_reL <- df_patterns_seeds_reL %>%
    distinct(pattern, .keep_all = TRUE) %>%
    left_join(cluster_counts_reL, by = "pattern")
  
  df_to_csv_reL <- unique_patterns_seeds_reL %>%
    arrange(desc(Freq), desc(sil_score), wss_score) %>%
    select(seed,Freq,sil_score,sil_sd_cl,wss_score,pattern)
  
  write.csv(df_to_csv_reL,
            paste0("H2_paper/cluster_new/k=",as.character(k),
                   '/general_info_ARI=',as.character(mean_ari),
                   '_df_relabeled.csv'),
            row.names = FALSE) 

  print(paste0('k = ',as.character(j),' done!'))
}
```

```{r}
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

make_table_function_new_combo <- function(jobs_clustered,k,top_percentage){
  
  jobs_clustered <- jobs_clustered %>%
    group_by(ID) %>% # The part after here is to set a weight to each job so that we keep the information
    mutate(LocationCount = n(), 
           weight = 1 / LocationCount) %>%
    ungroup()

cluster_tbl_sectors <- jobs_clustered %>%
  select(Cluster = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)

cluster_tbl_jobroles <- jobs_clustered %>%
  select(Cluster = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", 
        "Management other",
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", 
        "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Cluster", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Cluster, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Greenland (DK)", 
          "Gävleborg (SE)", "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", 
          "Kalmar (SE)",
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo & Akershus (NO)", "Rogaland (NO)", 
          "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", "Västerbotten (SE)", "Västernorrland (SE)", 
          "Västmanland (SE)", "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_clustered %>%
    select(Cluster = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility",
          "Fossil fuel & Refinery", "Government & Public sector", 
          "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", 
          "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Cluster", all.x = TRUE
  ) %>%
  merge(
    jobs_clustered %>%
    select(Cluster = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Management other", 
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",
        "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Cluster", all.x = TRUE
  )

cluster_tbl_data_short_WITH_bold <- data.frame(
  Cluster = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

for (i in 1:k) {
  
  total_jobs <- jobs_clustered %>%
    filter(cluster == i) %>% 
    summarise(total_weight = sum(weight, na.rm = TRUE)) %>%
    pull(total_weight)
  
  minimum_jobs <- total_jobs*top_percentage/100
  
  bold_regions <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(place) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(sector) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(competence) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Cluster == i) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      round(jobs_clustered %>%
        filter(cluster == i) %>%
        summarise(total_weight = sum(weight, na.rm = TRUE)) %>%
        pull(total_weight)
      ))
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}

# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Cluster"
  ) %>%
  cols_label(
    Cluster = "Cluster",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Cluster, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave(paste0("H2_paper/cluster_new/unified_oslo/k="
                                              ,as.character(k),
                                              "/best_result/cluster_tbl_WITH_BOLD_",
                                              'top_',as.character(top_percentage),'%_',
                                              as.character(seed),".png"),
                                       vheight = 800, vwidth = 2000)
}
```

```{r}
seeds_4_combo <- c(4508)

for (i in 1:length(seeds_4_combo)){
  seed <- seeds_4_combo[i]
  cluster_result_k4_combo <- readRDS(paste0('H2_paper/cluster_new/unified_oslo/k=4/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count_akershus_oslo, centers = 4, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count_akershus_oslo,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/unified_oslo/k=4/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new_combo(cluster_result_k4_combo,4,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_5_combo <- c(9129)

for (i in 1:length(seeds_5_combo)){
  seed <- seeds_5_combo[i]
  cluster_result_k5_combo <- readRDS(paste0('H2_paper/cluster_new/unified_oslo/k=5/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count_akershus_oslo, centers = 5, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count_akershus_oslo,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/unified_oslo/k=5/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new_combo(cluster_result_k5_combo,5,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_6_combo <- c(7681)

for (i in 1:length(seeds_6_combo)){
  seed <- seeds_6_combo[i]
  cluster_result_k6_combo <- readRDS(paste0('H2_paper/cluster_new/unified_oslo/k=6/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count_akershus_oslo, centers = 6, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count_akershus_oslo,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/unified_oslo/k=6/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_new_combo(cluster_result_k6_combo,6,70) #Last number is for top percentage, written in percentage and not decimals
}
```

## Maps of combo

This uses the seed for unified oslo/akershus with 6 clusters

```{r}
library(ggtext)

cluster_result_for_map <- readRDS(paste0('H2_paper/cluster_new/unified_oslo/k=6/all_seeds/',
                                      as.character(7681),'_df.rds')) %>%
  group_by(ID) %>% 
  mutate(LocationCount = n(), 
         weight = 1 / LocationCount) %>%
  ungroup()

cluster_result_for_map$place <- sub(",\\s*[A-Z]+$", "", cluster_result_for_map$place)

cluster_result_for_map <- cluster_result_for_map %>%
  mutate(n_tot = sum(cluster_result_for_map$weight)) %>%
  group_by(cluster) %>%
  mutate(n_cluster = sum(weight)) %>%
  ungroup() %>%
  mutate(share_cluster_tot = n_cluster/n_tot) %>%
  group_by(place,cluster) %>%
  mutate(n_place_cluster = sum(weight)) %>%
  ungroup() %>%
  mutate(share_place_cluster = n_place_cluster/n_cluster)


library(sf)

swedish_regions <- read_sf("https://raw.githubusercontent.com/okfse/sweden-geojson/master/swedish_regions.geojson") %>%
  janitor::clean_names() %>%
  select(name)

norwegian_regions <- read_sf("https://raw.githubusercontent.com/ivanhjel/counties_norway_2024/main/counties_norway_2024.geojson") %>%
  janitor::clean_names() %>%
  select(name = navn)

danish_regions <- read_sf("https://raw.githubusercontent.com/ok-dk/dagi/master/geojson/regioner.geojson") %>%
  janitor::clean_names() %>%
  select(name = regionnavn)

repair_geometries <- function(data) {
  # Check validity
  if (!all(st_is_valid(data))) {
    # Repair invalid geometries
    data <- st_make_valid(data)
  }
  return(data)
}

swedish_regions <- repair_geometries(swedish_regions)
norwegian_regions <- repair_geometries(norwegian_regions)
danish_regions <- repair_geometries(danish_regions)

convert_to_2d <- function(data) {
  st_transform(data, crs = st_crs(4326)) %>%  # Ensure CRS is WGS84
    st_zm(drop = TRUE, what = "ZM")  # Remove Z-dimension
}

danish_regions_2d <- convert_to_2d(danish_regions) %>%
  mutate(name = sub("^Region ", "", name))

all_regions <- bind_rows(
  swedish_regions %>% mutate(country = "Sweden"),
  norwegian_regions %>% mutate(country = "Norway"),
  danish_regions_2d %>% mutate(country = "Denmark"))
  
mapdata_custom <- all_regions %>%
  st_transform(crs = 4326) %>%  
  st_cast("MULTIPOLYGON") %>%  
  st_cast("POLYGON", group_or_split = TRUE) %>%  # Ensures separate polygons
  mutate(region = name) %>%  
  mutate(polygon_id = row_number()) %>%  # Unique ID for each polygon
  rowwise() %>%
  mutate(coords = list(as.data.frame(st_coordinates(geometry)))) %>%  
  unnest(coords) %>%  
  select(long = X, lat = Y, region, polygon_id) %>%  
  group_by(region, polygon_id) %>%  
  mutate(order = row_number()) %>%
  ungroup() %>%
  mutate(group = as.integer(factor(paste(region, polygon_id))))
```

Cluster 1 - Energy engineering on Norwegian coast

```{r}
cluster1_data <- cluster_result_for_map %>%
  filter(cluster ==1) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster1_data$n_cluster[1]
share_cluster_tot <- round(cluster1_data$share_cluster_tot[1]*100,
                           2)

map1_data <- mapdata_custom %>%
  left_join(cluster1_data, by = 'region')

map1 <- ggplot(map1_data, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Job concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey' ,limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 1: Energy engineering**<br>**on Norwegian coast**<br>",
                    "(n jobs = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all jobs)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map1

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6",
                  '/best_result/',as.character(7681),"_map1.png"),
           plot = map1)
```

Cluster 2 - University research

```{r}
cluster2_data <- cluster_result_for_map %>%
  filter(cluster ==2) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster2_data$n_cluster[1]
share_cluster_tot <- round(cluster2_data$share_cluster_tot[1]*100,2)

map2_data <- mapdata_custom %>%
  left_join(cluster2_data, by = 'region')

map2 <- ggplot(map2_data, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Job concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey' ,limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 2: University research**<br> <br>","(n jobs = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot),
                    '% of all jobs)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map2

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6",
                  '/best_result/',as.character(7681),"_map2.png"),
           plot = map2)
```

Cluster 3 - Utility in capitals

```{r}
cluster3_data <- cluster_result_for_map %>%
  filter(cluster ==3) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster3_data$n_cluster[1]
share_cluster_tot <- round(cluster3_data$share_cluster_tot[1]*100,
                           2)

map3_data <- mapdata_custom %>%
  left_join(cluster3_data, by = 'region')

map3 <- ggplot(map3_data, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Job concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey',limits = c(0, 500) ) +
  labs(tag = paste0("**Cluster 3: Utility in capitals**<br> <br>","(n jobs = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all jobs)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map3

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6",
                  '/best_result/',as.character(7681),"_map3.png"),
           plot = map3)
```

Cluster 4 - Energy engineering in Oslo area

```{r}
cluster4_data <- cluster_result_for_map %>%
  filter(cluster ==4) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster4_data$n_cluster[1]
share_cluster_tot <- round(cluster4_data$share_cluster_tot[1]*100,
                           2)

map4_data <- mapdata_custom %>%
  left_join(cluster4_data, by = 'region')

map4 <- ggplot(map4_data, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Job concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey',limits = c(0, 500) ) +
  labs(tag = paste0("**Cluster 4: Energy engineering**<br> **in Oslo area**<br>","(n jobs = ",
                    as.character(round(n_cluster)),', ',
                    as.character(share_cluster_tot), '% of all jobs)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map4

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6",
                  '/best_result/',as.character(7681),"_map4.png"),
           plot = map4)
```

Cluster 5 - Other general

```{r}
cluster5_data <- cluster_result_for_map %>%
  filter(cluster ==5) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster5_data$n_cluster[1]
share_cluster_tot <- round(cluster5_data$share_cluster_tot[1]*100,
                           2)

map5_data <- mapdata_custom %>%
  left_join(cluster5_data, by = 'region')

map5 <- ggplot(map5_data, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Job concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey',limits = c(0, 500) ) +
  labs(tag = paste0("**Cluster 5: Other general**<br> <br>","(n jobs = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all jobs)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map5

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6",
                  '/best_result/',as.character(7681),"_map5.png"),
           plot = map5)
```

Cluster 6 - Other industry

```{r}
cluster6_data <- cluster_result_for_map %>%
  filter(cluster ==6) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster6_data$n_cluster[1]
share_cluster_tot <- round(cluster6_data$share_cluster_tot[1]*100,
                           2)

map6_data <- mapdata_custom %>%
  left_join(cluster6_data, by = 'region')

map6 <- ggplot(map6_data, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Job concentration of clusters', 
                      low = 'yellow', 
                      high = 'red',
                      na.value = 'grey',
                      limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 6: Other industry**<br> <br>","(n jobs = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all jobs)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map6

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6",
                  '/best_result/',as.character(7681),"_map6.png"),
           plot = map6)
```

Combine maps

```{r}
library(patchwork)

map_1 <- map1  # Keep legend only on map_1
map_2 <- map2 + theme(legend.position = "none")
map_3 <- map3 + theme(legend.position = "none")
map_4 <- map4 + theme(legend.position = "none")
map_5 <- map5 + theme(legend.position = "none")
map_6 <- map6 + theme(legend.position = "none")

combined_map <- (map_1 + map_2 + map_3 + map_4 + map_5 + map_6) + 
  plot_layout(ncol = 2, guides = "collect") & 
  theme(legend.position = "right", # Change to "right" if preferred
        legend.key.size = unit(1.2, "cm"),  # Adjust legend size
        legend.text = element_text(size = 18),  # Adjust text size
        legend.title = element_text(size = 20, face = "bold")  # Adjust title size
  )

ggsave(filename = paste0("H2_paper/cluster_new/unified_oslo/k=6/best_result/",
                         as.character(7681),"_map_combined2.png"), 
       plot = combined_map, width = 15, height = 20)
```

## Engineering clustering for Oslo and Akershus Combo

```{r}
df_for_cluster_engineers <- df_for_cluster_akershus_oslo %>%
  filter(competence == 'Engineering')

df_factor_count_engineers <- df_for_cluster_engineers %>%
  group_by(country_code, region, sector, engineer_generalType) %>%
  summarise(n = sum(weight), .groups = "drop") %>%
  rename(type = engineer_generalType)

df_factor_count_WIDE_engineers <- df_factor_count_engineers %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "type", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

mtrx_factor_count_engineers <- as.matrix(df_factor_count_WIDE_engineers
                                             %>% select(-place, -sector))
```

```{r}
# Step 1: Compute Silhouette Scores (your original code)
sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx_factor_count_engineers, k = k)
  pam_k$silinfo$avg.width
})

df_sil <- tibble(k = 2:60, sil_width = sil_width)

# Step 2: Compute WSS (your original k-means elbow method)
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx_factor_count_engineers, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_wss <- tibble(k = 2:60, wss = wss)

# Step 3: Normalize both metrics using min-max scaling
df_combined <- df_sil %>%
  inner_join(df_wss, by = "k") %>%
  mutate(
    sil_scaled = (sil_width - min(sil_width)) / (max(sil_width) - min(sil_width)),
    wss_scaled = (wss - min(wss)) / (max(wss) - min(wss))
  )

# Step 4: Plot both curves together
ggplot(df_combined, aes(x = k)) +
  geom_line(aes(y = sil_scaled, color = "Silhouette Score"), linewidth = 1) +
  geom_point(aes(y = sil_scaled, color = "Silhouette Score")) +
  geom_line(aes(y = wss_scaled, color = "WSS (Elbow Method)"), linewidth = 1, linetype = "dashed") +
  geom_point(aes(y = wss_scaled, color = "WSS (Elbow Method)")) +
  scale_x_continuous(breaks = seq(2, 60, by = 2)) +
  labs(
    x = "Number of Clusters (k)",
    y = "Normalized Score (0-1)",
    title = "Comparison of Silhouette Score & WSS for Clustering",
    color = "Metric"
  ) +
  theme_minimal()
```

```{r}
library(mclust)

set.seed(123)  # Set an initial seed for reproducibility
num_runs <- 1000  
ks <- c(3,4,5,6,7)  

for (j in 1:length(ks)) {
  cluster_results <- list() 
  seeds_used <- list()
  sil_data <- list()
  sil_sd <- list()
  wss_data <- list()
  k <- ks[j]
  for (i in 1:num_runs) {
    seed_current <- sample(1:10000, 1)
    set.seed(seed_current) 
    km <- kmeans(mtrx_factor_count_engineers, centers = k, iter.max = 100, 
                 nstart = 1000, algorithm = "Lloyd") 
    cl <- km$cluster
    cluster_results[[i]] <- cl
    seeds_used[[i]] <- seed_current
    
    dist_matrix <- dist(mtrx_factor_count_engineers)
    sil_scores <- silhouette(cl, dist_matrix)
    avg_sil_by_cluster <- data.frame(cluster = 1:k,
                                     sil_cl = tapply(sil_scores[, "sil_width"],cl, mean)
                                     )
    sil_data[[i]] <- mean(avg_sil_by_cluster[, 2])
    sil_sd[[i]] <- sd(avg_sil_by_cluster[, 2])
                          
    wss_value <- km$tot.withinss
    wss_by_cluster <- km$withinss  # This gives a vector of WSS per cluster
    df_wss <- data.frame(cluster = 1:k, wss_cl = wss_by_cluster)
    wss_data[[i]] <- wss_value

    df_hcl <- df_factor_count_WIDE_engineers %>%
      rowid_to_column("id") %>%
      mutate(cl = cl) %>% 
      mutate(sil_score = sil_scores[, "sil_width"]) %>%
      relocate(cl, .after = "id") %>% 
      select(cluster = cl, place, sector,sil_score) 
    
    df_to_save <- df_for_cluster_engineers %>%
      rename(type = engineer_generalType) %>%
      select(ID, region, country_code, sector, type) %>%
      unite(place, c("region", "country_code"), sep = ", ") %>%
      merge(df_hcl, by = c("place", "sector"), all.x = TRUE) %>%
      merge(avg_sil_by_cluster, by = c('cluster')) %>%
      merge(df_wss, by = c('cluster')) %>%
      select(ID, place, sector, type, cluster, sil_score, sil_cl, wss_cl)
    
    saveRDS(df_to_save,
            file = paste0("H2_paper/cluster_new/engineers/k=",
                          as.character(k),'/all_seeds/',
                          as.character(seed_current),'_df.rds'))
    
    # Open a graphics device to save the plot as a PNG file
    plot_file <- paste0("H2_paper/cluster_new/engineers/k=",as.character(k),
                        '/all_seeds/',as.character(seed_current),
                        "_silhouette.png")
    png(plot_file, width = 900, height = 1200)  
    plot(sil_scores, main = "Silhouette Plot for K-Means Clustering")
    dev.off()
    
    wss_plot <- ggplot(df_wss, aes(x = cluster, y = wss_cl)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      labs(title = "WSS per Cluster", x = "Cluster", y = "Within-Cluster Sum of Squares") +
      theme_minimal()
    ggsave(filename = paste0("H2_paper/cluster_new/engineers/k=",as.character(k),
                  '/all_seeds/',as.character(seed_current),"_WSS.png"),
           plot = wss_plot)
    
    print(paste0('run ',as.character(i),' done!'))
  }
  ## CONTINUE HERE  
  
  # Convert list to a dataframe for comparison
  df_clusters <- as.data.frame(cluster_results)
  df_clusters <- df_clusters %>% mutate(run_id = row_number())  # Add row index

  # Convert each run's cluster assignment (column) into a string pattern
  cluster_patterns <- apply(df_clusters[, 1:num_runs], 2, paste, collapse = "-")

  # Count occurrences of each unique clustering result
  cluster_counts <- as.data.frame(table(cluster_patterns)) %>%
    arrange(desc(Freq)) %>%
    rename(pattern = cluster_patterns)

  # Compute pairwise Adjusted Rand Index (ARI) across runs
  ari_values <- combn(1:num_runs, 2, function(idx) {
    adjustedRandIndex(df_clusters[[idx[1]]], df_clusters[[idx[2]]])
    })

  mean_ari <- mean(ari_values)
      ###
  
# Combine everything into a final data frame
  df_patterns_seeds <- data.frame(
    pattern = cluster_patterns,
    seed = unlist(seeds_used),  
    sil_score = unlist(sil_data),
    sil_sd_cl = unlist(sil_sd),
    wss_score = unlist(wss_data)
    )

# Keep only the first occurrence of each unique pattern
  unique_patterns_seeds <- df_patterns_seeds %>%
    distinct(pattern, .keep_all = TRUE) %>%
    left_join(cluster_counts, by = "pattern")
  
  df_to_csv <- unique_patterns_seeds %>%
    arrange(desc(Freq), desc(sil_score), wss_score) %>%
    select(seed,Freq,sil_score,sil_sd_cl,wss_score,pattern)
  
  write.csv(df_to_csv,
            paste0("H2_paper/cluster_new/engineers/k=",as.character(k),
                   '/general_info_ARI=',as.character(mean_ari),
                   '_df.csv'),
            row.names = FALSE) 
  
  ### Re-laberling
  library(clue)
  
  # Function to relabel clusters for consistent comparison
  relabel_clusters <- function(reference, to_match) {
    k <- length(unique(reference))  # Number of clusters
    cost_matrix <- table(reference, to_match)  # Contingency table
  
  # Solve assignment problem
    assignment <- solve_LSAP(cost_matrix, maximum = TRUE)  
    new_labels <- setNames(seq_along(assignment), assignment)
  
    return(new_labels[to_match])  # Apply new labels
  }

# Step 2: Choose the first run as the reference for consistent relabeling
  reference_labels <- df_clusters[[1]]

# Step 3: Relabel all cluster assignments to match reference labels
  df_clusters_relabel <- df_clusters
  for (i in 1:num_runs) {
    df_clusters_relabel[[i]] <- relabel_clusters(reference_labels,
                                                 df_clusters[[i]])
  }
  
# Step 4: Convert cluster assignments to a pattern string
  cluster_patterns_reL <- apply(df_clusters_relabel[, 1:num_runs], 2, paste,
                            collapse = "-")

# Step 5: Count occurrences of each unique pattern
  cluster_counts_reL <- as.data.frame(table(cluster_patterns_reL)) %>%
    arrange(desc(Freq)) %>%
    rename(pattern = cluster_patterns_reL)

# Step 6: Combine patterns, seeds, and metrics into final data frame
  df_patterns_seeds_reL <- data.frame(
    pattern = cluster_patterns_reL,
    seed = unlist(seeds_used),  
    sil_score = unlist(sil_data),
    sil_sd_cl = unlist(sil_sd),
    wss_score = unlist(wss_data),
    row.names = NULL
    )
  
# Step 7: Keep only first occurrence of each unique pattern
  unique_patterns_seeds_reL <- df_patterns_seeds_reL %>%
    distinct(pattern, .keep_all = TRUE) %>%
    left_join(cluster_counts_reL, by = "pattern")
  
  df_to_csv_reL <- unique_patterns_seeds_reL %>%
    arrange(desc(Freq), desc(sil_score), wss_score) %>%
    select(seed,Freq,sil_score,sil_sd_cl,wss_score,pattern)
  
  write.csv(df_to_csv_reL,
            paste0("H2_paper/cluster_new/engineers/k=",as.character(k),
                   '/general_info_ARI=',as.character(mean_ari),
                   '_df_relabeled.csv'),
            row.names = FALSE) 

  print(paste0('k = ',as.character(k),' done!'))
}
```

```{r}
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

make_table_function_engineers <- function(jobs_clustered,k,top_percentage){
  
  jobs_clustered <- jobs_clustered %>%
    group_by(ID) %>% # The part after here is to set a weight to each job so that we keep the information
    mutate(LocationCount = n(), 
           weight = 1 / LocationCount) %>%
    ungroup()

cluster_tbl_sectors <- jobs_clustered %>%
  select(Cluster = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)

cluster_tbl_engineertypes <- jobs_clustered %>%
  select(Cluster = cluster, Region = place, Engineer_type = type) %>%
  unique() %>%
  pivot_wider(names_from = "Engineer_type",
              values_from = Engineer_type) %>%
  unite("Engineer_type", "Automation", "Chemical", "Civil", "Electrical", 
        "Energy", "Environmental", "IT/Software", "Marine", "Materials", 
        "Mechanical", "Risk & Safety", "Generic", "Other",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_engineertypes, by = c("Cluster", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Cluster, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", 
          "Gävleborg (SE)", "Hovedstaden (DK)", 
          "Kalmar (SE)",
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo & Akershus (NO)", "Rogaland (NO)", 
          "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", "Västerbotten (SE)", "Västernorrland (SE)", 
          "Västmanland (SE)", "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_clustered %>%
    select(Cluster = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility",
          "Fossil fuel & Refinery", "Government & Public sector", 
          "Hydrogen technology manufacturer", "Metals & Mining", "Other", 
          "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Cluster", all.x = TRUE
  ) %>%
  merge(
    jobs_clustered %>%
    select(Cluster = cluster, Engineer_type = type) %>%
    unique() %>%
    pivot_wider(names_from = "Engineer_type",
                values_from = Engineer_type) %>%
    unite("Engineer_type", "Automation", "Chemical", "Civil", "Electrical", 
        "Energy", "Environmental", "IT/Software", "Marine", "Materials", 
        "Mechanical", "Risk & Safety", "Generic", "Other",
          sep = ", ", na.rm = TRUE),
    by = "Cluster", all.x = TRUE
  )

cluster_tbl_data_short_WITH_bold <- data.frame(
  Cluster = character(),
  Regions = character(),
  Sectors = character(),
  Engineer_type = character(),
  stringsAsFactors = FALSE
)

for (i in 1:k) {
  
  total_jobs <- jobs_clustered %>%
    filter(cluster == i) %>% 
    summarise(total_weight = sum(weight, na.rm = TRUE)) %>%
    pull(total_weight)
  
  minimum_jobs <- total_jobs*top_percentage/100
  
  bold_regions <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(place) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(sector) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_engineer_type <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(type) %>%
    summarise(n = sum(weight)) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(type)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Cluster == i) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Engineer_type = bold_words(Engineer_type, bold_engineer_type$type)
  )
  # Add numbber of jobs to table
  
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      round(jobs_clustered %>%
        filter(cluster == i) %>%
        summarise(total_weight = sum(weight, na.rm = TRUE)) %>%
        pull(total_weight)
      ))
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}

# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Cluster"
  ) %>%
  cols_label(
    Cluster = "Cluster",
    Regions = "Regions",
    Sectors = "Sectors",
    Engineer_type = "Engineer types",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Cluster, Regions, Sectors, Engineer_type, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Engineer_type))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave(paste0("H2_paper/cluster_new/engineers/k="
                                              ,as.character(k),
                                              "/best_result/cluster_tbl_WITH_BOLD_",
                                              'top_',as.character(top_percentage),'%_',
                                              as.character(seed),".png"),
                                       vheight = 800, vwidth = 2000)
}
```

```{r}
seeds_3_engineer <- c(3171)

for (i in 1:length(seeds_3_engineer)){
  seed <- seeds_3_engineer[i]
  cluster_result_k3_engineer <- readRDS(paste0('H2_paper/cluster_new/engineers/k=3/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count_engineers, centers = 3, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count_engineers,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/engineers/k=3/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_engineers(cluster_result_k3_engineer,3,20) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_4_engineer <- c(5855)

for (i in 1:length(seeds_4_engineer)){
  seed <- seeds_4_engineer[i]
  cluster_result_k4_engineer <- readRDS(paste0('H2_paper/cluster_new/engineers/k=4/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count_engineers, centers = 4, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count_engineers,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/engineers/k=4/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_engineers(cluster_result_k4_engineer,4,30) #Last number is for top percentage, written in percentage and not decimals
}
```

```{r}
seeds_5_engineer <- c(7416,1142,9699)

for (i in 1:length(seeds_5_engineer)){
  seed <- seeds_5_engineer[i]
  cluster_result_k5_engineer <- readRDS(paste0('H2_paper/cluster_new/engineers/k=5/all_seeds/',
                                      as.character(seed),'_df.rds'))
  
  set.seed(seed)
  km <- kmeans(mtrx_factor_count_engineers, centers = 5, iter.max = 100,nstart = 1000,
               algorithm = "Lloyd") 
  k_mean_plot <- autoplot(km,mtrx_factor_count_engineers,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/cluster_new/engineers/k=5/best_result/k-mean_plot_",
                as.character(seed),".png"))
  
  make_table_function_engineers(cluster_result_k5_engineer,5,20) #Last number is for top percentage, written in percentage and not decimals
}
```

### Maps

```{r}
cluster_result_for_map_engineering <- readRDS(paste0('H2_paper/cluster_new/engineers/k=4/all_seeds/',as.character(5855),'_df.rds')) %>%
    group_by(ID) %>% 
    mutate(LocationCount = n(), 
           weight = 1 / LocationCount) %>%
    ungroup()

cluster_result_for_map_engineering$place <- sub(",\\s*[A-Z]+$", "",
                                                cluster_result_for_map_engineering$place)

cluster_result_for_map_engineering <- cluster_result_for_map_engineering %>%
  mutate(n_tot = sum(cluster_result_for_map_engineering$weight)) %>%
  group_by(cluster) %>%
  mutate(n_cluster = sum(weight)) %>%
  ungroup() %>%
  mutate(share_cluster_tot = n_cluster/n_tot) %>%
  group_by(place,cluster) %>%
  mutate(n_place_cluster = sum(weight)) %>%
  ungroup() %>%
  mutate(share_place_cluster = n_place_cluster/n_cluster)
```

```{r}
cluster1_engineer <- cluster_result_for_map_engineering %>%
  filter(cluster ==1) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster1_engineer$n_cluster[1]
share_cluster_tot <- round(cluster1_engineer$share_cluster_tot[1]*100,
                           2)

map1_engineer <- mapdata_custom %>%
  left_join(cluster1_engineer, by = 'region')

map1 <- ggplot(map1_engineer, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Engineer concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey' ,limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 1: Other engineering**<br> <br>",
                    "(n engineers = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all engineers)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map1

ggsave(filename = paste0("H2_paper/cluster_new/engineers/k=4",
                  '/best_result/',as.character(5855),"_map1.png"),
           plot = map1)
```

```{r}
cluster2_engineer <- cluster_result_for_map_engineering %>%
  filter(cluster ==2) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster2_engineer$n_cluster[1]
share_cluster_tot <- round(cluster2_engineer$share_cluster_tot[1]*100,
                           2)

map2_engineer <- mapdata_custom %>%
  left_join(cluster2_engineer, by = 'region')

map2 <- ggplot(map2_engineer, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Engineer concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey' ,limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 2: Swedish energy utility**<br> <br>",
                    "(n engineers = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all engineers)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map2

ggsave(filename = paste0("H2_paper/cluster_new/engineers/k=4",
                  '/best_result/',as.character(5855),"_map2.png"),
           plot = map2)
```

```{r}
cluster3_engineer <- cluster_result_for_map_engineering %>%
  filter(cluster ==3) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster3_engineer$n_cluster[1]
share_cluster_tot <- round(cluster3_engineer$share_cluster_tot[1]*100,
                           2)

map3_engineer <- mapdata_custom %>%
  left_join(cluster3_engineer, by = 'region')

map3 <- ggplot(map3_engineer, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Engineer concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey' ,limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 3: Oslo**<br> **focused engineering** <br>",
                    "(n engineers = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all engineers)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map3

ggsave(filename = paste0("H2_paper/cluster_new/engineers/k=4",
                  '/best_result/',as.character(5855),"_map3.png"),
           plot = map3)
```

```{r}
cluster4_engineer <- cluster_result_for_map_engineering %>%
  filter(cluster ==4) %>%
  select(place, n_tot,n_cluster,n_place_cluster,share_cluster_tot,share_place_cluster) %>%
  separate_rows(place, sep = " & ") %>%
  unique() %>%
  rename(region = place) 

n_cluster <- cluster4_engineer$n_cluster[1]
share_cluster_tot <- round(cluster4_engineer$share_cluster_tot[1]*100,
                           2)

map4_engineer <- mapdata_custom %>%
  left_join(cluster4_engineer, by = 'region')

map4 <- ggplot(map4_engineer, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill = n_place_cluster), color = 'black') +
  scale_fill_gradient(name = 'Engineer concentration of clusters', low = 'yellow', high = 'red', na.value = 'grey' ,limits = c(0, 500)) +
  labs(tag = paste0("**Cluster 4: Norwegian coast**<br> **focused engineering** <br>",
                    "(n engineers = ",
                    as.character(round(n_cluster)),', ',as.character(share_cluster_tot), 
                    '% of all engineers)')) +
  theme(
    plot.tag.position = "bottom",
    plot.tag = element_markdown(hjust = 0.3, size = 20),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    rect = element_blank()
    )
map4

ggsave(filename = paste0("H2_paper/cluster_new/engineers/k=4",
                  '/best_result/',as.character(5855),"_map4.png"),
           plot = map4)
```

```{r}
library(patchwork)

map_1 <- map1  # Keep legend only on map_1
map_2 <- map2 + theme(legend.position = "none")
map_3 <- map3 + theme(legend.position = "none")
map_4 <- map4 + theme(legend.position = "none")

combined_map <- (map_1 + map_2 + map_3 + map_4) + 
  plot_layout(ncol = 2, guides = "collect") & 
  theme(legend.position = "right", # Change to "right" if preferred
        legend.key.size = unit(1.2, "cm"),  # Adjust legend size
        legend.text = element_text(size = 18),  # Adjust text size
        legend.title = element_text(size = 20, face = "bold")  # Adjust title size
  )

ggsave(filename = paste0("H2_paper/cluster_new/engineers/k=4/best_result/",
                         as.character(5855),"_map_combined2.png"), 
       plot = combined_map, width = 20, height = 20)
```

# Other - mostly clusterrelated

## Slightly less organised code for making specific cluster-tables for H2-paper

### Elin - cluster table

```{r}
cluster_place_sector <- ten_df_hcl %>% #har sparat ner denna från cluster_result_i$df_hcl
  select(cluster = cl, place, sector)

jobs_clustered <- jobs %>% # Keep in mind that cluster 2 and 3 are unclear and should be regarded as one "the rest"-cluster
  mutate(year = lubridate::year(Scrape_date), month = lubridate::month(Scrape_date)) %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(id = ID, country = country_code, region, company = Company , sector = Industry_Sector, competence = job_role, year, month, nation = country) %>%
  na.omit() %>%
  unite(place, c("region", "country"), sep = ", ") %>%
  merge(cluster_place_sector, by = c("place", "sector"), all.x = TRUE) %>%
  select(id, cluster, place, company, sector, competence, year, month, nation)

jobs_cluster_nicename <- jobs_clustered %>%
  mutate(cluster = case_when(
    cluster %in% c(2, 6, 9) ~ "2, 6, 9: Other",
    cluster == 1 ~ "1: Danish Chemicals & Hydrogen technology manufacturing",
    cluster == 3 ~ "3: Danish and Norwegian Research",
    cluster == 4 ~ "4: Management in Oslo & Copenhagen",
    cluster == 5 ~ "5: Research",
    cluster == 7 ~ "7: Governance in Copenhagen",
    cluster == 8 ~ "8: Research",
    cluster == 10 ~ "10: Norwegian Energy Engineering",
    TRUE ~ as.character(cluster)
  ))

df_hcl_nicename_long <- ten_df_hcl %>%
  mutate(cluster = case_when(
    cl %in% c(2, 6, 9) ~ "2, 6, 9: Other",
    cl == 1 ~ "1: Danish Chemicals & Hydrogen technology manufacturing",
    cl == 3 ~ "3: Danish and Norwegian Research",
    cl == 4 ~ "4: Management in Oslo & Copenhagen",
    cl == 5 ~ "5: Research",
    cl == 7 ~ "7: Governance in Copenhagen",
    cl == 8 ~ "8: Research",
    cl == 10 ~ "10: Norwegian Energy Engineering",
    TRUE ~ as.character(cl)
  )) %>%
  relocate(cluster, .after = cl) %>%
  pivot_longer(-c(id, place, sector, cl, cluster), names_to = "competence", values_to = "n")


cluster_tbl_sectors <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)
  
cluster_tbl_jobroles <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Gävleborg (SE)", 
          "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)", 
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)", "Akershus (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", 
          "Västerbotten (SE)", "Västernorrland (SE)", "Västmanland (SE)", 
          "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_cluster_nicename %>%
    select(Group = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Group", all.x = TRUE
  ) %>%
  merge(
    jobs_cluster_nicename %>%
    select(Group = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Group", all.x = TRUE
  )

cluster_names <- c("2, 6, 9: Other",
    "1: Danish Chemicals & Hydrogen technology manufacturing",
    "3: Danish and Norwegian Research",
    "4: Management in Oslo & Copenhagen",
    "5: Research",
    "7: Governance in Copenhagen",
    "8: Research",
    "10: Norwegian Energy Engineering")

cluster_tbl_data_short_WITH_bold <- data.frame(
  Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

# Function to bold multiple words in a string
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

for (i in 1:8) {
  cl_name <- cluster_names[i]
  
  total_jobs <- jobs_cluster_nicename %>%
    filter(cluster == cl_name) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*.2
  
  bold_regions <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Group == cl_name) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_cluster_nicename %>%
        filter(cluster == cl_name) %>%
        nrow()
      )
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}


# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  arrange(desc(n_jobs)) %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Group"
  ) %>%
  cols_label(
    Group = "Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave("figs/cluster_paper_plots/Elin10_other_cluster_tbl_short_WITH_BOLD.png", vheight = 744, vwidth = 3986)

```

### Keeping all but arrange after cluster number instead

For this part i used k =10 and added in that jobs_clustered as "jobs_clustered_10"

```{r}
jobs_cluster_nicename <- jobs_clustered_10 %>%
  mutate(cl_nr = cluster) %>%
  mutate(cluster = case_when(
    cluster %in% c(2, 6, 9) ~ "Other",
    cluster == 1 ~ "Danish Chemicals & Hydrogen technology manufacturing",
    cluster == 3 ~ "National University Research",
    cluster == 4 ~ "Management in Oslo & Copenhagen",
    cluster == 5 ~ "Research 2",
    cluster == 7 ~ "Governance in Copenhagen",
    cluster == 8 ~ "Research 3",
    cluster == 10 ~ "Norwegian Energy Engineering",
    TRUE ~ as.character(cluster)
  ))

cluster_tbl_sectors <- jobs_cluster_nicename %>%
  select(cl_nr,Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)
  
cluster_tbl_jobroles <- jobs_cluster_nicename %>%
  select(cl_nr,Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("cl_nr","Group", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(cl_nr,Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Gävleborg (SE)", 
          "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)", 
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)", "Akershus (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", 
          "Västerbotten (SE)", "Västernorrland (SE)", "Västmanland (SE)", 
          "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_cluster_nicename %>%
    select(cl_nr, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "cl_nr", all.x = TRUE
  ) %>%
  merge(
    jobs_cluster_nicename %>%
    select(cl_nr, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "cl_nr", all.x = TRUE
  )

cluster_tbl_data_short_WITH_bold <- data.frame(
  Cluster_number_Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  n_jobs = character(),
  stringsAsFactors = FALSE
)

# Function to bold multiple words in a string
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

for (i in 1:10) {
  cl <- i
  
  total_jobs <- jobs_cluster_nicename %>%
    filter(cl_nr == cl) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*.2
  
  bold_regions <- jobs_cluster_nicename %>% 
    filter(cl_nr == cl) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_cluster_nicename %>% 
    filter(cl_nr == cl) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_cluster_nicename %>% 
    filter(cl_nr == cl) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(cl_nr == cl) %>%
    rename(Cluster_number = cl_nr) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_cluster_nicename %>%
        filter(cl_nr == cl) %>%
        nrow()
      )
    )
  
  cl_names <- c(
    "1: Danish Chemicals & Hydrogen technology manufacturing",
    "2: Other",
    "3: National University Research",
    "4: Management in Oslo & Copenhagen",
    "5: Research 2",
    "6: Other",
    "7: Governance in Copenhagen",
    "8: Research 3",
    "9: Other",
    "10: Norwegian Energy Engineerin"
  )
  cluster_row <- data.frame("Cluster_number_Group" = cl_names[i]) %>%
    cbind(cluster_row) %>%
    select(Cluster_number_Group, Regions, Sectors, Job_Roles, n_jobs)
    
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}


# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  cols_label(
    Cluster_number_Group = "Cluster number/Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Cluster_number_Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD <- cluster_tbl_short_WITH_BOLD %>%
  tab_options(
    table.width = px(1000)  # or use another size
  )

cluster_tbl_short_WITH_BOLD %>% gtsave("figs/cluster_paper_plots/10_cluster_tbl_short_WITH_BOLD_240911.png", vheight = 744, vwidth = 3986)
```

### Making table with only top %

```{r}
jobs_cluster_nicename <- jobs_clustered_10 %>%
  mutate(cluster = case_when(
    cluster %in% c(2, 6, 9) ~ "Other",
    cluster == 1 ~ "Danish Chemicals & Hydrogen technology manufacturing",
    cluster == 3 ~ "National University Research",
    cluster == 4 ~ "Management in Oslo & Copenhagen",
    cluster == 5 ~ "Research 2",
    cluster == 7 ~ "Governance in Copenhagen",
    cluster == 8 ~ "Research 3",
    cluster == 10 ~ "Norwegian Energy Engineering",
    TRUE ~ as.character(cluster)
  ))

cluster_tbl_sectors <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)
  
###

cluster_tbl_jobroles <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

###

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)

###

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Gävleborg (SE)", 
          "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)", 
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)", "Akershus (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", 
          "Västerbotten (SE)", "Västernorrland (SE)", "Västmanland (SE)", 
          "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_cluster_nicename %>%
    select(Group = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Group", all.x = TRUE
  ) %>%
  merge(
    jobs_cluster_nicename %>%
    select(Group = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Group", all.x = TRUE
  )

cluster_names <- c(
    "Norwegian Energy Engineering",
    "Management in Oslo & Copenhagen",
    "National University Research",
    "Research 2",
    "Research 3",
    "Danish Chemicals & Hydrogen technology manufacturing",
    "Governance in Copenhagen",
    "Other"
    )

cluster_tbl_data_short_onlytop <- data.frame(
  Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

# Function to bold multiple words in a string
filter_words <- function(text, words) {
  #print(words)
  # Split the string into individual words
  word_list <- unlist(strsplit(text, ", "))
  #print(word_list)
  # Keep only the words that are in the provided list
  filtered_list <- word_list[word_list %in% words]
  #print(filtered_list)
  # Rejoin the words into a single string
  filtered_text <- paste(filtered_list, collapse = ", ")
  #print(filtered_text)
  return(filtered_text)
}

for (i in 1:8) {
  cl_name <- cluster_names[i]
  
  total_jobs <- jobs_cluster_nicename %>%
    filter(cluster == cl_name) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*.2
  
  top_regions <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  top_sectors <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  top_job_role <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Group == cl_name) %>%
    mutate(
    Regions = filter_words(Regions, top_regions$place),
    Sectors = filter_words(Sectors, top_sectors$sector),
    Job_Roles = filter_words(Job_Roles, top_job_role$competence)
  )
  # Add numbber of jobs to table
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_cluster_nicename %>%
        filter(cluster == cl_name) %>%
        nrow()
      )
    )
  
  cluster_row <- cluster_row %>%
  mutate(
    Regions = ifelse(Regions == "" | is.na(Regions), "No significant region", Regions),
    Sectors = ifelse(Sectors == "" | is.na(Sectors), "No significant sector", Sectors),
    Job_Roles = ifelse(Job_Roles == "" | is.na(Job_Roles), "No significant job role", Job_Roles)
  )
  
  cluster_tbl_data_short_onlytop <- cluster_tbl_data_short_onlytop %>%
    rbind(cluster_row)
  
}


# Create the gt table with HTML content
cluster_tbl_short_onlytop <- cluster_tbl_data_short_onlytop %>%
  gt() %>%
  cols_label(
    Group = "Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_onlytop

cluster_tbl_short_onlytop %>% gtsave("figs/cluster_paper_plots/10_cluster_tbl_short_ONLY_TOP_240911.png", vheight = 744, vwidth = 3000)
```

Doing table for whole dataset

```{r}
top_percent_table <- function(k,jobs_clustered){
  cluster_tbl_sectors <- jobs_clustered %>%
    select(Group = cluster, Region = place, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility",
          "Fossil fuel & Refinery", "Government & Public sector", 
          "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other",
          "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE)
  
  cluster_tbl_jobroles <- jobs_clustered %>%
    select(Group = cluster, Region = place, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
          "Finance & Business development","HR", "IT & Data science", "Law", 
          "Management other", "Other","PhD", "Procurement & Logistics", "Project management", 
          "Public administration", "Quality assurance", "Researcher", 
          "Sales & Customer service",  "Technician & Maintenance",
          sep = ", ", na.rm = TRUE)
  
  cluster_tbl_data <- cluster_tbl_sectors %>%
    merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)
  
  View(cluster_tbl_data)
}

top_percent_table(3,cluster_result_all[[2]][[1]][["jobs_clustered"]])
```

# Time series

Overall

```{r}
jobs_per_time <- jobs %>%
  select(Scrape_date) %>%
  group_by(Scrape_date) %>%
  mutate(n = n()) %>%
  unique() 

jobs_per_time_bar_plt <- ggplot(data = jobs_per_time, aes(x = Scrape_date, y = n)) +
  geom_bar(stat = "identity", fill = "skyblue") + # 'stat = "identity"' is required for bar charts with pre-computed y-values
  labs(x = "Scrape date", y = "Number of jobs", title = "Number of jobs over time") +
  theme_minimal()

jobs_per_time_bar_plt

jobs_per_month <- jobs %>%
  select(Scrape_date) %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(month) %>%
  mutate(n = n()) %>%
  ungroup() %>%
  select(month, n) %>%
  unique()

jobs_per_month_bar_plt <- ggplot(data = jobs_per_month, aes(x = month, y = n)) +
  geom_bar(stat = "identity", fill = "skyblue") + # 'stat = "identity"' is required for bar charts with pre-computed y-values
  labs(x = "Scrape date", y = "Number of jobs", title = "Number of jobs over time") +
  theme_minimal()

jobs_per_month_bar_plt
```

```{r}
jobs_per_month_country_plt <- tbl %>% 
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(Country, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x= month, y= n, 
             fill = Country)) + 
  geom_col()+
    scale_y_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "Scrape date", y = "Number of jobs", title = "Number of jobs over time")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_country_plt

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_country_plt.png", dpi = 1200, width = 12, height = 8)
```

## Sector

```{r}
jobs_per_month_sector_plt <- tbl %>% 
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(Sector, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             group = Sector, color = Sector)) +
  geom_line() + # Line plot
  scale_y_continuous()+
    scale_color_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse3", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per sector") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_sector_plt

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_sector_plt_LINE.png", dpi = 1200, width = 12, height = 8)
```

```{r}
jobs_per_month_sector_bar_plt <- tbl %>% 
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(Sector, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             fill = Sector)) +
  geom_col() + # Line plot
  scale_y_continuous()+
    scale_fill_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse3", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per sector") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_sector_bar_plt
ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_sector_plt_BAR.png", dpi = 1200, width = 12, height = 8)
```

## Job role

```{r}
jobs_per_month_jobrole_plt <- tbl %>% 
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(job_role, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             group = job_role, color = job_role)) +
  geom_line() + # Line plot
  scale_y_continuous()+
    scale_color_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse2", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen",
                                  "cornflowerblue" , "darkseagreen1" , "lightblue4" , 
                                  "red1"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per job role") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_jobrole_plt

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_jobrole_plt_LINE.png", dpi = 1200, width = 12, height = 8)
```

```{r}
jobs_per_month_jobrole_bar_plt <- tbl %>% 
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(job_role, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             fill = job_role)) +
  geom_col() + # Line plot
  scale_y_continuous()+
    scale_fill_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse3", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen",
                                  "cornflowerblue" , "darkseagreen1" , "lightblue4" , 
                                 "red1"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per job role") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_jobrole_bar_plt
ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_jobrole_plt_BAR.png", dpi = 1200, width = 12, height = 8)
```

## Region

### Denmark

```{r}
jobs_per_month_region_plt_DK <- tbl %>% 
  filter(Country == 'DK') %>%
  filter(!region == 'Greenland') %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(region, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             group = region, color = region)) +
  geom_line(size = 1.5) + # Line plot
  geom_point() +
  scale_y_continuous()+
    scale_color_colorblind("Region")+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per region in Denmark") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_region_plt_DK

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_region_plt_DK_LINE.png", dpi = 1200, width = 12, height = 8)
```

```{r}
jobs_per_month_region_bar_plt_DK <- tbl %>% 
  filter(Country == 'DK') %>%
  filter(!region == 'Greenland') %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(region, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             fill = region)) +
  geom_col() + # Line plot
  scale_y_continuous()+
    scale_fill_colorblind("Region")+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per region in Denmark") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_region_bar_plt_DK
ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_region_plt_DK_BAR.png", dpi = 1200, width = 12, height = 8)
```

### Norway

```{r}
jobs_per_month_region_plt_NO <- tbl %>% 
  filter(Country == 'NO') %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(region, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             group = region, color = region)) +
  geom_line(size = 1.5) + # Line plot
  geom_point() +
  scale_y_continuous()+
    scale_color_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse2", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen",
                                  "darkseagreen" , 
                                  "red1"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per region in Norway") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_region_plt_NO

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_region_plt_NO_LINE.png", dpi = 1200, width = 12, height = 8)
```

```{r}
jobs_per_month_region_bar_plt_NO <- tbl %>% 
  filter(Country == 'NO') %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(region, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             fill = region)) +
  geom_col() + # Line plot
  scale_y_continuous()+
    scale_fill_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse2", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen",
                                  "darkseagreen" , 
                                  "red1"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per region in Norway") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_region_bar_plt_NO
ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_region_plt_NO_BAR.png", dpi = 1200, width = 12, height = 8)
```

### Sweden

```{r}
jobs_per_month_region_plt_SE <- tbl %>% 
  filter(Country == 'SE') %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(region, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             group = region, color = region )) +#,
             #linetype = region)) +
  geom_line(size = 1.5) + # Line plot
  geom_point() +
  scale_y_continuous()+
    scale_color_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse3", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen",
                                  "cornflowerblue" , "darkseagreen1" , "lightblue4" , 
                                 "red1", "slateblue"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per region in Sweden") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_region_plt_SE

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_region_plt_SE_LINE.png", dpi = 1200, width = 12, height = 8)
```

```{r}
jobs_per_month_region_bar_plt_SE <- tbl %>% 
  filter(Country == 'SE') %>%
  mutate(date_as_date = as.Date(Scrape_date)) %>%
  mutate(month = format(date_as_date, "%Y-%m")) %>%
  group_by(region, month) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = month, y = n,
             fill = region)) +
  geom_col() + # Line plot
  scale_y_continuous()+
    scale_fill_manual(values = c("black", "blue", "purple", "aquamarine", "azure4",
                                  "bisque1", "brown4", "chartreuse3", "darkorange", 
                                  "darkgoldenrod4", "deeppink", "yellow", "darkgreen",
                                  "cornflowerblue" , "darkseagreen1" , "lightblue4" , 
                                 "red1", "slateblue"))+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per region in Sweden") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_region_bar_plt_SE
ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_region_plt_SE_BAR.png", dpi = 1200, width = 12, height = 8)
```

## Cluster

```{r}
data_plt <- cluster_result_all_new[[2]][[4]][["jobs_clustered"]] %>%
  mutate(date = sprintf("%04d-%02d", year, month))
```

```{r}
jobs_per_month_cluster6_plt <- data_plt %>% 
  group_by(cluster, date) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = n,
             group = as.factor(cluster), color = as.factor(cluster))) +
  geom_line(size = 1.5) + # Line plot
  geom_point() +
  scale_y_continuous()+
    scale_color_colorblind("Cluster")+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per cluster") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_cluster6_plt

ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_cluster6_plt_LINE.png", dpi = 1200, width = 12, height = 8)
```

```{r}
jobs_per_month_cluster6_bar_plt <- data_plt %>% 
  group_by(cluster, date) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  ggplot(aes(x = date, y = n,
             fill = as.factor(cluster))) +
  geom_col() + # Line plot
  scale_y_continuous()+
    scale_fill_colorblind("Cluster")+
  labs(x = "Scrape date", y = "Number of jobs", 
       title = "Number of jobs over time per cluster") +
  theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobs_per_month_cluster6_bar_plt
ggsave("H2_paper/figs_W2425/time_series/jobs_per_month_cluster6_bar_plt_BAR.png", dpi = 1200, width = 12, height = 8)
```

# Experimental section

## Testing to remove Akkodis

```{r}
jobs_NO_AKKODIS <- jobs %>%
  filter(!Company == "Akkodis")
```

### General

```{r}
df_distribution_NO_AKKODIS <- jobs_NO_AKKODIS %>% 
  count(Company, country_code) %>% 
  filter(!Company == "!!!NEW_COMPANY!!!")

violine_NO_AKKODIS <- df_distribution_NO_AKKODIS %>%
  rename(Country = country_code) %>%
  ggplot(aes(n, Country, fill = Country), alpha = 0.5) + 
  geom_violin(show.legend = F) + 
  scale_fill_colorblind() + 
  theme_grey() +
  coord_fixed(ratio = 60) +  # Adjust aspect ratio (reduce height)
  labs(x = "", y = "")

violine_NO_AKKODIS
```

```{r}
regions_noJobs <- data.frame(
  country = c("Norway", "Sweden", "Sweden","Sweden"),
  region = c("Innlandet", "Blekinge", "Jönköping", "Örebro"),
  n = c(0,0,0,0))

numberOf_jobsPer_region_NO_AKKODIS <- jobs_NO_AKKODIS %>%
  group_by(country, region) %>%
  summarise(n = n(), .groups = 'drop') %>%
  full_join(regions_noJobs) %>%
  arrange(country, desc(n)) %>%
  mutate(region = factor(region, levels = unique(region)))

nrJobs_perRegion_plot_NO_AKKODIS <- numberOf_jobsPer_region_NO_AKKODIS %>%
  ggplot(aes(x = n, y = fct_rev(region), fill = country)) + 
  geom_col(drop = FALSE) +
  scale_x_continuous() +
  scale_fill_colorblind("Country") +
  labs(x = "", y = "", title = "Total jobs per region") +
  theme_minimal() +
  theme(
    legend.position = "bottom", 
    text = element_text(size = 14), 
    plot.title = element_text(size = 12)
    )

nrJobs_perRegion_plot_NO_AKKODIS
```

### Who

```{r}
tbl_NO_AKKODIS <- jobs_NO_AKKODIS %>%
  inner_join(companies %>% 
               select(Name, Industry_Sector), by = c("Company"="Name")) %>%
  rename(Sector = Industry_Sector, Country = country_code) %>%
  mutate(Sector = fct_infreq(Sector)) %>% 
  mutate(job_role = fct_infreq(job_role))

sector_plot_NO_AKKODIS <- tbl_NO_AKKODIS %>% 
  group_by(Country, Sector) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(Sector), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per sector")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

sector_plot_NO_AKKODIS
```

```{r}
(jobs_NO_AKKODIS %>% group_by(country, Company) %>% summarise(n =n()) %>% 
         ungroup() %>% arrange(desc(n)) %>% head(30) %>% select(n) %>% sum())/(jobs_NO_AKKODIS %>% group_by(country, Company) %>% summarise(n =n()) %>% 
         ungroup() %>% arrange(desc(n)) %>% select(n) %>% sum())

# 12 -> 50%
# 20 -> 59%
# 30 -> 65%
# 33 -> 66%
# 52 -> 75%

biggest_companies_NO_AKKODIS <- jobs_NO_AKKODIS %>%
  group_by(country, Company) %>%
  summarise(n =n()) %>%
  ungroup() %>%
  arrange(desc(n)) %>%
  head(30) # Has to use number wanted +1

# Summing the job counts by company across countries
aggregated_companies_NO_AKKODIS <- biggest_companies_NO_AKKODIS %>%
  group_by(Company) %>%
  summarise(total_jobs = sum(n))

# Merging back the total job counts with the original data
biggest_companies_NO_AKKODIS <- biggest_companies_NO_AKKODIS %>%
  left_join(aggregated_companies_NO_AKKODIS, by = "Company")

biggest_companies_plot_NO_AKKODIS <- biggest_companies_NO_AKKODIS %>%
  ggplot(aes(x= n, y= fct_reorder(Company, total_jobs),
             fill = country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
  scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Top 30 most recruiting organisations, responsible for 60% of all jobs")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

biggest_companies_plot_NO_AKKODIS
```

### What

```{r}
jobroles_plot_NO_AKKODIS <- tbl_NO_AKKODIS %>% drop_na(job_role) %>% #removing NA:s here
  group_by(Country, job_role) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(job_role), 
             fill = Country)) + 
  geom_col()+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per job role")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobroles_plot_NO_AKKODIS
```

### Where

```{r}
region_new_jobs_NO_AKKODIS <- jobs_NO_AKKODIS %>% 
    group_by(region, reg_pop, country) %>%
    summarise(new_jobs = n()) %>% 
    ungroup()



missing_regions <- data.frame(
  region = c("Innlandet", "Blekinge", "Jönköping", "Örebro"),
  reg_pop = c(376304, 157973, 368856, 308116),
  country = c("Norway", "Sweden", "Sweden","Sweden"),
  new_jobs = c(0,0,0,0))

region_new_jobs_NO_AKKODIS<- full_join(region_new_jobs_NO_AKKODIS, missing_regions)



lm_regions_NO_AKKODIS <- lm(new_jobs ~ reg_pop, data = region_new_jobs_NO_AKKODIS)


# extract data for annotating the plot
lm_gl_NO_AKKODIS <- glance(lm_regions_NO_AKKODIS)
r2_p_all_NO_AKKODIS <- paste("R2:", round(lm_gl_NO_AKKODIS$r.squared, 2), "&\n", ifelse(lm_gl_NO_AKKODIS$p.value < 0.05, "p< 0.05", "p>0.05"))  



lm_data_reg_NO_AKKODIS <- region_new_jobs_NO_AKKODIS %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ reg_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_NO_AKKODIS %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_dk_NO_AKKODIS <- lm_data_reg_NO_AKKODIS %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_se_NO_AKKODIS <- lm_data_reg_NO_AKKODIS %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_no_NO_AKKODIS <- lm_data_reg_NO_AKKODIS %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_dk_NO_AKKODIS <- paste("R2:", round(lm_dk_NO_AKKODIS$r.squared, 2), "&\n", ifelse(lm_dk_NO_AKKODIS$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_se_NO_AKKODIS <- paste("R2:", round(lm_se_NO_AKKODIS$r.squared, 2), "&\n", ifelse(lm_se_NO_AKKODIS$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_no_NO_AKKODIS <- paste("R2:", round(lm_no_NO_AKKODIS$r.squared, 2), "&\n", ifelse(lm_no_NO_AKKODIS$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg_NO_AKKODIS <- lm_data_reg_NO_AKKODIS %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std_NO_AKKODIS <- lm_data_reg_NO_AKKODIS %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))



region_pop_plot_NO_AKKODIS <- region_new_jobs_NO_AKKODIS %>% 
  ggplot(aes(round(reg_pop/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(reg_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_NO_AKKODIS)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=900, y =250, label = r2_p_no_NO_AKKODIS)+
  annotate("text", x=1500, y =220, label = r2_p_dk_NO_AKKODIS)+
  annotate("text", x=2250, y =200, label = r2_p_all_NO_AKKODIS)+
  annotate("text", x=2250, y =75, label = r2_p_se_NO_AKKODIS)+
  theme_minimal() +
  theme(legend.position = "top")
region_pop_plot_NO_AKKODIS
```

## Combining Akershus & Oslo

### Wrangle

```{r}
population_akershus <- jobs %>%
  filter(region == 'Akershus') %>%
  select(reg_pop)

population_oslo <- jobs %>%
  filter(region == 'Oslo') %>%
  select(reg_pop)

population_both <- population_akershus$reg_pop[1]+population_oslo$reg_pop[1]

akershus_oslo <- jobs %>%
  filter(region %in% c('Oslo','Akershus')) %>%
  select(!region) %>%
  mutate(region = 'Oslo & Akershus') %>%
  mutate(reg_pop = ifelse(region == "Oslo & Akershus", population_both, reg_pop))
  
jobs_akershus_oslo <- jobs %>%
  filter(!region %in% c('Oslo','Akershus')) %>%
  bind_rows(akershus_oslo)
```

### Where

```{r}
region_new_jobs_new <- jobs_akershus_oslo %>% 
    group_by(region, reg_pop, country) %>%
    summarise(new_jobs = n()) %>% 
    ungroup()

region_new_jobs_new <- full_join(region_new_jobs_new, missing_regions)


lm_regions_new <- lm(new_jobs ~ reg_pop, data = region_new_jobs_new)

# extract data for annotating the plot
lm_gl_new <- glance(lm_regions_new)
r2_p_all_new <- paste("R2:", round(lm_gl_new$r.squared, 2), "&\n", ifelse(lm_gl_new$p.value < 0.05, "p< 0.05", "p>0.05"))  


lm_data_reg_new <- region_new_jobs_new %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ reg_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_new %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_dk_new <- lm_data_reg_new %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_se_new <- lm_data_reg_new %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_no_new <- lm_data_reg_new %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_dk_new <- paste("R2:", round(lm_dk_new$r.squared, 2), "&\n", ifelse(lm_dk_new$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_se_new <- paste("R2:", round(lm_se_new$r.squared, 2), "&\n", ifelse(lm_se_new$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_no_new <- paste("R2:", round(lm_no_new$r.squared, 2), "&\n", ifelse(lm_no_new$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg_new <- lm_data_reg_new %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std <- lm_data_reg_new %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))


region_pop_plot_new <- region_new_jobs_new %>% 
  ggplot(aes(round(reg_pop/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(reg_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_new)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=300, y =250, label = r2_p_no_new)+
  annotate("text", x=1500, y =450, label = r2_p_dk_new)+
  annotate("text", x=2380, y =400, label = r2_p_all_new)+
  annotate("text", x=2250, y =15, label = r2_p_se_new)+
  theme_minimal() +
  theme(legend.position = "top")
region_pop_plot_new
```

Rogaland is still an outlier

### Combined patterns

```{r}
df_jobs_new <- jobs_akershus_oslo %>% 
  left_join(companies, by =c("Company" = "Name")) %>%
  select(country_code, region, sector= Industry_Sector, competence= job_role) %>%
  na.omit() %>%
  filter(!sector == 'NaN')

df_cl_new <- df_jobs_new %>%
  group_by(country_code, region, sector, competence) %>%
  summarise(n = n())

df_wide_cl_new <- df_cl_new %>% 
  unite(place, c("region", "country_code"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

#mutate(place = paste(region, "(", country_code, ")", sep = ""))

mtrx_new <- as.matrix(df_wide_cl_new %>% select(-place, -sector))
```

```{r}
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx_new, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_knee <- tibble(k = 2:60, wss = wss)

df_knee %>% 
  ggplot(aes(k, wss, label = k)) + geom_line() + geom_point() +
  scale_x_continuous(breaks = 2:60)

# Best at: ~ 6

ggsave("H2_paper/figs_W2425/clusters_exp/elbow_plt.png", dpi = 1200, width = 12, height = 8)



sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx_new, k = k)
  pam_k$silinfo$avg.width
}) 

df_sil <- tibble(k = 2:60, sil_width = sil_width)

df_sil %>% ggplot(aes(k, sil_width)) + geom_line() + 
  geom_point()+
  scale_x_continuous(breaks = 2:60)

# Best at: 3 - 8

ggsave("H2_paper/figs_W2425/clusters_exp/silhouette_plt.png", dpi = 1200, width = 12, height = 8)

```

```{r}
cluster_function_new <- function(matrx,k){
  set.seed(123456789)
  KM <- kmeans(matrx,k)
  
  k_mean_plot <- autoplot(KM,matrx,frame=TRUE)
  k_mean_plot
  ggsave(paste0("H2_paper/figs_W2425/clusters_exp/k-mean_",as.character(k),".png"))
  
  silhouette_score <- silhouette(KM$cluster, dist(matrx))
  mean_silhouette_score <- mean(silhouette_score[, 3])
  wcss <- sum(KM$withinss)
  dunn_index <- dunn(clusters = KM$cluster, Data = matrx)
  davies_bouldin_index <- index.DB(matrx, KM$cluster)$DB
  
  print(paste("The scores for k = ",as.character(k)))
  print(paste("Mean Silhouette Score:", mean_silhouette_score))
  print(paste("WCSS:", wcss))
  print(paste("Dunn Index:", dunn_index))
  print(paste("Davies-Bouldin Index:", davies_bouldin_index))
  
  return(KM)
}


###


add_cluster_to_data_function_new <- function(KM){
  cl_new <- KM$cluster

  df_hcl <- df_wide_cl_new %>% 
    rowid_to_column("id") %>%
    mutate(cl = cl_new) %>% 
    relocate(cl, .after = "id") 
  
  df_hcl_long <- df_hcl %>%
    pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")

  sum_stat <- df_hcl %>% 
    group_by(cl) %>% 
    summarise(across(.col = Engineering:PhD, .fns = mean))

  pl_cl <- df_hcl_long %>% group_by(cl, place) %>% summarise(n = sum(n)) %>% arrange(desc(cl))

  se_cl <- df_hcl_long %>% group_by(cl, sector) %>% summarise(n = sum(n)) %>% arrange(desc(cl))

  cluster_place_sector <- df_hcl %>% 
    select(cluster = cl, place, sector)
  
  jobs_clustered <- jobs_akershus_oslo %>% 
    mutate(year = lubridate::year(Scrape_date), month = lubridate::month(Scrape_date)) %>%
    left_join(companies, by =c("Company" = "Name")) %>%
    select(id = ID, country = country_code, region, company = Company , sector = Industry_Sector, competence = job_role, year, month, nation = country) %>%
    na.omit() %>%
    filter(!sector == 'NaN') %>% filter(!competence == 'NaN') %>%
    unite(place, c("region", "country"), sep = ", ") %>%
    merge(cluster_place_sector, by = c("place", "sector"), all.x = TRUE) %>%
    select(id, cluster, place, company, sector, competence, year, month, nation)
  
  return(list(df_hcl = df_hcl,sum_stat = sum_stat,pl_cl = pl_cl,se_cl = se_cl,jobs_clustered = jobs_clustered))
}


###


make_table_function_new <- function(jobs_clustered,k,top_percentage){

cluster_tbl_sectors <- jobs_clustered %>%
  select(Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)

cluster_tbl_jobroles <- jobs_clustered %>%
  select(Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Management other",
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", 
        "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Greenland (DK)", 
          "Gävleborg (SE)", "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)",
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo & Akershus (NO)", "Rogaland (NO)", 
          "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms (NO)","Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold (NO)","Telemark (NO)", "Vestland (NO)","Buskerud (NO)",
          "Østfold (NO)", "Värmland (SE)", "Västerbotten (SE)", "Västernorrland (SE)", 
          "Västmanland (SE)", "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_clustered %>%
    select(Group = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility",
          "Fossil fuel & Refinery", "Government & Public sector", 
          "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", 
          "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Group", all.x = TRUE
  ) %>%
  merge(
    jobs_clustered %>%
    select(Group = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Management other", 
        "Other","PhD", "Procurement & Logistics", "Project management", 
        "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",
        "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Group", all.x = TRUE
  )

cluster_tbl_data_short_WITH_bold <- data.frame(
  Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

for (i in 1:k) {
  
  total_jobs <- jobs_clustered %>%
    filter(cluster == i) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*top_percentage
  
  bold_regions <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_clustered %>% 
    filter(cluster == i) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Group == i) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_clustered %>%
        filter(cluster == i) %>%
        nrow()
      )
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}

# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Group"
  ) %>%
  cols_label(
    Group = "Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave(paste0("H2_paper/figs_W2425/clusters_exp/cluster_tbl_WITH_BOLD_",as.character(k),".png"), vheight = 800, vwidth = 2000)

#####

#View(cluster_tbl_sectors)
#View(cluster_tbl_jobroles)
#View(cluster_tbl_data)
#View(cluster_tbl_data_short)
#View(cluster_tbl_data_short_WITH_bold)

}
```

```{r}
all_cluster_functions_together_new <- function(k,matrx,top_percentage){
  KM <- cluster_function_new(matrx,k)
  cluster_result <- add_cluster_to_data_function_new(KM)
  make_table_function_new(cluster_result$jobs_clustered,k,top_percentage)
  
  return(list(KM=KM,df_hcl = cluster_result$df_hcl,
         sum_stat = cluster_result$sum_stat,pl_cl = cluster_result$pl_cl,
         se_cl = cluster_result$se_cl,jobs_clustered = cluster_result$jobs_clustered))
}



###

# Running for multiple k
cluster_result_all_new <- tibble(
  i = 5:6,      # First column (numeric values 1 to 10)
  Result = letters[5:6]  # Second column (letters a to j))
)

j <- 0
for (i in 5:6){
  j <- j+1
  cluster_result_i <- all_cluster_functions_together_new(i,mtrx_new,0.2)
  
  cluster_result_all_new$Result[j] <- I(list(cluster_result_i))
}
```

### Important organisations

Functions

```{r}
important_orgs_new <- function(cluster_result_multi,top_perc,cumulative_perc){
  for (i in 1:nrow(cluster_result_multi)){
    clustered_jobs <- cluster_result_multi[[2]][[i]][["jobs_clustered"]]
    
    k <- max(clustered_jobs$cluster)
    
    clustered_org <- clustered_jobs %>%
      group_by(cluster, company) %>%
      summarise(n =n()) %>%
      ungroup() %>%
      group_by(cluster) %>%
      mutate(
        total_n = sum(n),
        share = n / total_n
        ) %>%
      ungroup()
    
    clust_top_org <- clustered_org %>%
      filter(share > top_perc)
    
    clust_cumulative <- clustered_org %>%
      group_by(cluster) %>%
      arrange(desc(share), .by_group = TRUE) %>%   # Sort by share within each country
      mutate(cumulative_share = cumsum(share)) %>% # Calculate cumulative share
      filter(cumulative_share <= cumulative_perc | 
               dplyr::lag(cumulative_share, default = 0) <= cumulative_perc) %>%
      ungroup()
    
    clust_top_org_tbl <- clust_top_org %>%
      select(cluster, company, n, share) %>%
      arrange(cluster, desc(n)) %>%
      gt() %>% 
      tab_header(
        title = paste0("Organisations in groups - each accounting for ",
                       as.character(top_perc*100),"% of the jobs in each group")
        ) %>%
      cols_label(
        cluster = "Group",
        company = "Organisation",
        n = 'Number of jobs',
        share = 'Share'
        ) %>% 
      tab_options(
        table.font.size = px(12),
        heading.align = "left",
        table.border.left.style = "solid",
        table.border.left.width = px(1),
        table.border.left.color = "lightgrey",
        table.border.right.style = "solid",
        table.border.right.width = px(1),
        table.border.right.color = "lightgrey"
        ) %>%
      tab_style(
        style = cell_borders(
          sides = "right",
          color = "lightgrey",
          weight = px(1)
          ),
        locations = cells_body(
          columns = c(cluster, company, n, share)
          )
        )
    
    clust_cumulative_tbl <- clust_cumulative %>%
      select(cluster, company, n, share) %>%
      arrange(cluster, desc(n)) %>%
      gt() %>% 
      tab_header(
        title = paste0("Organisations in groups - accounting in total for ",
                       as.character(cumulative_perc*100),"% of the jobs in each group")
        ) %>%
      cols_label(
        cluster = "Group",
        company = "Organisation",
        n = 'Number of jobs',
        share = 'Share'
        ) %>% 
      tab_options(
        table.font.size = px(12),
        heading.align = "left",
        table.border.left.style = "solid",
        table.border.left.width = px(1),
        table.border.left.color = "lightgrey",
        table.border.right.style = "solid",
        table.border.right.width = px(1),
        table.border.right.color = "lightgrey"
        ) %>%
      tab_style(
        style = cell_borders(
          sides = "right",
          color = "lightgrey",
          weight = px(1)
          ),
        locations = cells_body(
          columns = c(cluster, company, n, share)
          )
        )
    
    clust_top_org_tbl %>% 
      gtsave(paste0("H2_paper/figs_W2425/clusters_exp/clust_top_org_tbl_",
                    as.character(k),".png"), vheight = 800, vwidth = 2000)
    clust_cumulative_tbl %>% 
      gtsave(paste0("H2_paper/figs_W2425/clusters_exp/clust_cumulative_tbl_",
                    as.character(k),".png"), vheight = 800, vwidth = 2000)
  }
}
```

Run it

```{r}
important_orgs_new(cluster_result_all,0.1,1)
```

### Silhouette score plot

```{r}
KM5_new <- cluster_result_all_new[[2]][[3]][["KM"]]
KM6_new <- cluster_result_all_new[[2]][[4]][["KM"]]

# Compute the distance matrix (e.g., Euclidean distance)
dist_matrix <- dist(mtrx_new)

# Calculate silhouette scores
sil_scores5 <- silhouette(KM5_new$cluster, dist_matrix)
sil_scores6 <- silhouette(KM6_new$cluster, dist_matrix)
```

```{r}
# View silhouette object
print(sil_scores5)

# Summary statistics for silhouette scores
summary(sil_scores5)

# Plot the silhouette scores
plot(sil_scores5, main = "Silhouette Plot for K-Means Clustering")

# View silhouette object
print(sil_scores6)

# Summary statistics for silhouette scores
summary(sil_scores6)

# Plot the silhouette scores
plot(sil_scores6, main = "Silhouette Plot for K-Means Clustering")

# Average silhouette score for each cluster
avg_sil_by_cluster5 <- tapply(sil_scores5[, "sil_width"], KM5_new$cluster, mean)

print(avg_sil_by_cluster5)

# Average silhouette score for each cluster
avg_sil_by_cluster6 <- tapply(sil_scores6[, "sil_width"], KM6_new$cluster, mean)

print(avg_sil_by_cluster6)
```

## Luleå conference

```{r}
library(tidyverse)
library(googlesheets4)
library(ggthemes)
library(gtExtras)
library(tidygraph)
library(igraph)
library(ggraph)
library(lsr)
library(corrplot)
```

```{r}
ss <- "https://docs.google.com/spreadsheets/d/1xzpre5Ej_7OEGRU4EA7KZuMQnSz5YCyTx5Sdbml6bQE/edit#gid=0"

df_main_raw <- read_sheet(ss, sheet = "Main")
df_geo_locations_raw <- read_sheet(ss, sheet = "locations_coord", range = "B:M")
df_companies_raw <- read_sheet(ss, sheet = "CompanyAnalysis")

geo <- df_geo_locations_raw %>% janitor::clean_names()

df_jobs <- df_main_raw %>% 
  inner_join(geo, by = c("Location"="new_name"), relationship = "many-to-many") %>%
  mutate(publish_country = case_when(
    str_detect(ID, pattern ="^1") ~ "SE", 
    str_detect(ID, pattern ="^2") ~ "NO",
    str_detect(ID, pattern ="^3") ~ "DK"
  )) %>%
  mutate(Scrape_date = lubridate::ymd(Scrape_date)) %>%
  left_join(job_roles) %>%
  mutate(Company = ifelse(Company == "Rekryteringsföretag", "Recruitment companies", Company)) %>%
  filter(Scrape_date >= "2023-08-20") %>%  
  filter(is.na(Hydrogen_relevance)) %>%
  filter(country %in% c("Denmark","Norway","Sweden")) %>%
  select(ID, Company, Location, country_code) %>%
  janitor::clean_names() %>%
  filter(!company == 'UNKNOWN_COMPANY') %>%
  filter(!company == 'Employment/staffing agency')

companies <- df_companies_raw %>%
  mutate(Name = ifelse(Name == "Rekryteringsföretag", "Recruitment companies", Name)) %>%
  janitor::clean_names() 
```

### Actors across

```{r}
netw_colors <- c(
  "comp" = "#356D94",     
  "country" = "#6C8B72"
  )

background <- "#F5F5F5"  

```

```{r}
pr_country_jobs <- df_jobs %>%
  group_by(company, country_code) %>%
  mutate(n = n()) %>%
  select(company, country_code, n) %>%
  unique() %>%
  rename(comp_name = company) %>% rename(country = country_code)

comp_n <- pr_country_jobs %>%
  group_by(comp_name) %>% 
  summarise(n = sum(n)) %>%
  rename(name = comp_name)

gc_jobs <- as_tbl_graph(pr_country_jobs) %>%
   mutate(type = ifelse(name %in% pr_country_jobs$comp_name, "comp", "country")) %>%
  mutate(degree = centrality_degree(mode = "all")) %N>%
  left_join(comp_n)

nodes_jobs <- gc_jobs %N>% as_tibble()
edges_jobs <- gc_jobs %E>% as_tibble()

set.seed(123)
gc_jobs %>% ggraph(layout = "nicely") + 
  geom_edge_link(color = "grey", show.legend = FALSE) + 
  geom_node_point(aes(fill = type, 
                      size = ifelse(type == "comp", log(n+1), 10), #sum(comp_n$n) nrow(comp_n) nrow(comp_n %>% filter(n > 3))
                      shape = type), color = "white") + # Node attributes
  geom_node_label(aes(label = 
                        ifelse(
                          (type == "comp" & ((degree > 1 & n >= sum(comp_n$n)*.001) | 
                                               n >= sum(comp_n$n)*.01)) |
                          type == "country" & degree > 1, 
                          name, NA), 
                      color = type), repel = TRUE, size = 3) +
  scale_shape_manual(values =  c(21, 22))+
  scale_fill_manual(values = netw_colors)+
  scale_color_manual(values = netw_colors)+
  labs(title = "Actors cutting across the Nordic countries or recruiting at large within countries", 
       caption = "Most central actors cutting across multiple countries accounting for 1‰ or more of all jobs found, as well as actors recruiting within single countries accounting for 1% or more of all jobs found.")+
  theme_graph(background = background) + 
  theme(legend.position = 'none')

ggsave("H2_paper/figs_W2425/actors_across_countries.png", width = 12, height = 7, units = "in", dpi = 500)
```

## New map attempt for clustering

```{r}
library(ggspatial)
library(osmdata)
library(sf)
library(tidyverse)
library(ggpattern)

#Maps collected from
#SE - https://github.com/okfse/sweden-geojson/blob/master/swedish_regions.geojson
#NO - https://github.com/ivanhjel/counties_norway_2024/blob/main/counties_norway_2024.geojson
#DK - https://github.com/ok-dk/dagi/blob/master/geojson/regioner.geojson

swedish_regions <- read_sf("https://raw.githubusercontent.com/okfse/sweden-geojson/master/swedish_regions.geojson") %>%
  janitor::clean_names() %>%
  select(name)

regions_of_interest_se <- c("Norrbotten", "Västra Götaland", "Uppsala", "Södermanland",
                         "Halland", "Dalarna", "Östergötland", "Gotland", "Gävleborg",
                         "Skåne", "Värmland", "Västernorrland", "Kalmar", "Västerbotten",
                         "Stockholm", "Västmanland", "Kronoberg", "Jämtland")

specific_regions_se <- swedish_regions %>%
  filter(name %in% regions_of_interest_se)


#bus_stops <- specific_regions_se %>% 
 # st_bbox() %>%
  #opq() %>%
#  add_osm_feature(key = "highway", value = "bus_stop") %>%
 # osmdata_sf()

#bus_stop_points <- bind_rows(
 # pluck(bus_stops,"osm_points"),
  #st_centroid(pluck(bus_stops,"osm_polygons"))
#)

region_map_se <- ggplot() + 
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = specific_regions_se, colour = "grey40", fill = NA, linewidth = 1.5) +
  theme_void()

###

norwegian_regions <- read_sf("https://raw.githubusercontent.com/ivanhjel/counties_norway_2024/main/counties_norway_2024.geojson") %>%
  janitor::clean_names() %>%
  select(name = navn)

regions_of_interest_no <- c("Agder", "Akershus","Rogaland", "Finnmark", "Vestland", "Buskerud",
                            "Møre og Romsdal", "Østfold", "Troms", "Vestfold", "Nordland", 
                            "Telemark", "Oslo", "Trøndelag")

specific_regions_no <- norwegian_regions %>%
  filter(name %in% regions_of_interest_no)

region_map_no <- ggplot() + 
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = norwegian_regions, colour = "grey40", fill = NA, linewidth = 1.5) +
  theme_void()




###

danish_regions <- read_sf("https://raw.githubusercontent.com/ok-dk/dagi/master/geojson/regioner.geojson") %>%
  janitor::clean_names() %>%
  select(name = regionnavn)

regions_of_interest_dk <- c("Region Hovedstaden", "Region Nordjylland", "Region Syddanmark",
                            "Region Sjælland", "Region Midtjylland")

specific_regions_dk <- norwegian_regions %>%
  filter(name %in% regions_of_interest_no)

region_map_dk <- ggplot() + 
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = danish_regions, 
          aes(fill = case_when(
            name == "Region Hovedstaden" ~ "red",
            name == "Region Nordjylland" ~ "blue",  # Replace with the actual region name
            TRUE ~ NA_character_  # Default to no fill
          )), 
          colour = "grey40", linewidth = 0.5) +
  scale_fill_identity() +  # Use scale_fill_identity for direct color mapping
  theme_void()
###
```

```{r}
# Function to check and repair geometries
repair_geometries <- function(data) {
  # Check validity
  if (!all(st_is_valid(data))) {
    # Repair invalid geometries
    data <- st_make_valid(data)
  }
  return(data)
}

# Apply the function to each dataset
swedish_regions <- repair_geometries(swedish_regions)
norwegian_regions <- repair_geometries(norwegian_regions)
danish_regions <- repair_geometries(danish_regions)

# Function to convert 3D geometries to 2D by removing Z-dimension
convert_to_2d <- function(data) {
  st_transform(data, crs = st_crs(4326)) %>%  # Ensure CRS is WGS84
    st_zm(drop = TRUE, what = "ZM")  # Remove Z-dimension
}

# Convert Danish geometries to 2D
danish_regions_2d <- convert_to_2d(danish_regions) %>%
  mutate(name = sub("^Region ", "", name))

all_regions <- bind_rows(
  swedish_regions %>% mutate(country = "Sweden"),
  norwegian_regions %>% mutate(country = "Norway"),
  danish_regions_2d %>% mutate(country = "Denmark")
)

# Plot the combined map
combined_map <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = all_regions, aes(fill = country), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("Sweden" = "lightblue", "Norway" = "lightgreen", "Denmark" = "lightpink")) +
 theme_void()
```

```{r}
data_cluster_df <- final_cluster_choice %>%
  mutate(cluster = ifelse(cluster == 6, 2, cluster))

# Define your group memberships
all_regions <- bind_rows(
  swedish_regions %>% mutate(country = "Sweden"),
  norwegian_regions %>% mutate(country = "Norway"),
  danish_regions_2d %>% mutate(country = "Denmark")
)

regions_for_groups <- data_cluster_df %>%
  separate(place, into = c("region", "country"), sep = ", ") %>%
  select(region,cluster) %>% unique()


group_definitions <- list(
  Group1 = regions_for_groups %>% 
    filter(cluster == 1) %>% unique() %>% pull(region),
  Group2 = regions_for_groups %>% 
    filter(cluster == 3) %>% unique() %>% pull(region),
  Group3 = regions_for_groups %>% 
    filter(cluster == 4) %>% unique() %>% pull(region),
  Group4 = regions_for_groups %>% 
    filter(cluster == 5) %>% unique() %>% pull(region)
)

# Assign colors to groups, using "0" for non-grouped regions
group_colors <- c(
  "0" = "grey", "1" = "blue", "3" = "yellow", "4" = "green", "5" = "red"
)

# Create a new column for group pattern
all_regions <- all_regions %>%
  rowwise() %>%
  mutate(
    group_pattern = paste0(
      ifelse(name %in% group_definitions$Group1, "1", ""),
      ifelse(name %in% group_definitions$Group2, "3", ""),
      ifelse(name %in% group_definitions$Group3, "4", ""),
      ifelse(name %in% group_definitions$Group4, "5", "")
    ),
    # Assign "0" for non-grouped regions
    group_pattern = ifelse(group_pattern == "", "0", group_pattern)
  ) %>%
  ungroup()

# Function to get stripe colors for overlaps
get_stripe_colors <- function(pattern) {
  colors <- unlist(strsplit(pattern, ""))
  return(group_colors[colors])
}

# Build color mapping for overlaps
overlap_colors <- unique(all_regions$group_pattern)
stripe_colors <- lapply(overlap_colors, get_stripe_colors)

names(stripe_colors) <- overlap_colors

# Create the plot
combined_map <- ggplot() +
  # Use geom_sf for solid regions
  geom_sf(
    data = all_regions %>% filter(nchar(group_pattern) <= 1),
    aes(fill = group_pattern),
    colour = "grey40",
    linewidth = 0.5
  ) +
  # Use geom_sf_pattern for striped regions
  geom_sf_pattern(
    data = all_regions %>% filter(nchar(group_pattern) > 1),
    aes(pattern = group_pattern, pattern_fill = group_pattern),
    colour = "grey40",
    linewidth = 0.5,
    pattern_density = 1,
    pattern_spacing = 0.01
  ) +
  # Scale for solid fill colors
  scale_fill_manual(values = group_colors) +
  # Scale for striped pattern fill colors
  scale_pattern_manual(values = rep("stripe", length(overlap_colors))) +
  scale_pattern_fill_manual(values = stripe_colors) +
  theme_void() +
  theme(legend.position = "none")

combined_map
```

```{r}
library(scales)
library(RColorBrewer)

blues_palette <- brewer.pal(9, "Blues") # 9 shades of blue

regions_norwegian_engineering <- all_regions %>%
  mutate(cluster = ifelse(name %in% c('Oslo','Akershus','Rogaland','Vestland'), "1", "0")) %>%
  mutate(n = ifelse(name %in% c('Oslo','Akershus'), 468,
                    ifelse(name == 'Rogaland', 311,
                           ifelse(name == 'Vestland', 313, 0)
                           )
                    )
         )

#View(final_cluster_choice %>% filter(cluster == 1) %>% group_by(place) %>% mutate(n = n()) %>% select(place, n) %>% unique())

map_norwegian_engineering <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = regions_norwegian_engineering, aes(fill = cluster), 
          colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("1" = "blue", "0" = "grey")) +
 theme_void() +
  theme(legend.position = "none")

map_norwegian_engineering

ggsave(filename = "H2_paper/figs_W2425/clusters_exp/maps/map_norwegian_engineering.png", plot = map_norwegian_engineering, limitsize = FALSE, width = 8, height = 5)
###

regions_scandinavian_energy <- all_regions %>%
  mutate(cluster = ifelse(name %in% c('Gävleborg','Hovedstaden','Östergötland','Rogaland',
                                      'Södermanland', 'Stockholm', 'Syddanmark', 'Telemark',
                                      'Uppsala', 'Västmanland', 'Västra Götaland'), "3", "0"))

map_scandinavian_energy <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = regions_scandinavian_energy, aes(fill = cluster), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("3" = "yellow", "0" = "grey")) +
 theme_void() +
  theme(legend.position = "none")

map_scandinavian_energy

ggsave(filename = "H2_paper/figs_W2425/clusters_exp/maps/map_scandinavian_energy.png", plot = map_scandinavian_energy, limitsize = FALSE, width = 8, height = 5)
###

regions_money <- all_regions %>%
  mutate(cluster = ifelse(name %in% c('Hovedstaden','Oslo','Akershus'), "4", "0"))

map_money <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = regions_money, aes(fill = cluster), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("4" = "green", "0" = "grey")) +
 theme_void() +
  theme(legend.position = "none")

map_money

ggsave(filename = "H2_paper/figs_W2425/clusters_exp/maps/map_money.png", plot = map_money, limitsize = FALSE, width = 8, height = 5)
###

regions_research <- all_regions %>%
  mutate(cluster = ifelse(name %in% c('Hovedstaden','Midtjylland','Trøndelag','Vestland'), "5", "0"))

map_research <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = regions_research, aes(fill = cluster), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("5" = "red", "0" = "grey")) +
 theme_void() +
  theme(legend.position = "none")

map_research

ggsave(filename = "H2_paper/figs_W2425/clusters_exp/maps/map_research.png", plot = map_research, limitsize = FALSE, width = 8, height = 5)
```

```{r}
regions_Other1 <- all_regions %>%
  mutate(cluster = ifelse(name %in% c('Agder','Hovedstaden','Kalmar','Kronoberg',
                                      'Midtjylland','Norrbotten','Oslo','Akershus','Skåne',
                                      'Syddanmark','Troms','Finnmark','Trøndelag',
                                      'Vestfold','Buskerud','Västra Götaland'),
                          "2", "0"))

map_other1 <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = regions_Other1, aes(fill = cluster), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("2" = "purple", "0" = "grey")) +
 theme_void() +
  theme(legend.position = "none")

map_other1

ggsave(filename = "H2_paper/figs_W2425/clusters_exp/maps/map_other1.png", plot = map_other1, limitsize = FALSE, width = 8, height = 5)



regions_Other2 <- all_regions %>%
  mutate(cluster = ifelse(name %in% c('Agder','Dalarna','Gotland','Gävleborg','Halland',
                                      'Halland','Hovedstaden','Jämtland','Kronoberg',
                                      'Midtjylland','Møre og Romsdal','Nordjylland',
                                      'Nordland','Norrbotten','Oslo','Akershus','Rogaland',
                                      'Sjælland','Skåne','Stockholm','Syddanmark',
                                      'Södermanland','Troms','Finnmark','Trøndelag',
                                      'Uppsala','Telemark','Vestland','Buskerud','Østfold',
                                      'Värmland','Västerbotten','Västernorrland',
                                      'Västmanland','Västra Götaland','Östergötland'),
                          "6", "0"))

map_other2 <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = regions_Other2, aes(fill = cluster), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("6" = "orange", "0" = "grey")) +
 theme_void() +
  theme(legend.position = "none")

map_other2

ggsave(filename = "H2_paper/figs_W2425/clusters_exp/maps/map_other2.png", plot = map_other2, limitsize = FALSE, width = 8, height = 5)
```

```{r}
library(ggplot2)
library(patchwork)

# Define captions using plot_annotation or wrap_elements from patchwork
caption_text <- function(name, n, description) {
  ggplot() + 
    theme_void() + 
    annotate("text", x = 0.5, y = 0.5, 
             label = paste0("**", name, "** (n = ", n, ")\n", description), 
             size = 4, hjust = 0.5, vjust = 0.5) +
    theme(plot.margin = margin(5, 5, 5, 5))  # Adjust margins if needed
}

# Define captions for each map
cap_norwegian_engineering <- caption_text("Norwegian Engineering", 100, "Description of Norwegian Engineering")
cap_research <- caption_text("Research", 120, "Description of Research")
cap_money <- caption_text("Money", 90, "Description of Money")
cap_scandinavian_energy <- caption_text("Scandinavian Energy", 80, "Description of Energy Sector")
cap_other1 <- caption_text("Other 1", 70, "Description of Other 1")
cap_other2 <- caption_text("Other 2", 60, "Description of Other 2")

# First row
row1 <- (map_norwegian_engineering / cap_norwegian_engineering) | 
        (map_research / cap_research) | 
        (map_money / cap_money)

# Second row
row2 <- (map_scandinavian_energy / cap_scandinavian_energy) | 
        (map_other1 / cap_other1) | 
        (map_other2 / cap_other2)

# Combine rows into final layout
final_plot <- row1 / row2

# Save the final figure
ggsave("H2_paper/figs_W2425/combined_map_figure.png", plot = final_plot, width = 16, height = 10, dpi = 300)
```

```{r}
library(gridExtra)
library(grid)
library(patchwork)

# Function to create text as a separate grob
caption_grob <- function(name, n, description) {
  textGrob(
    label = bquote(bold(.(name)) ~ "(n =" ~ .(n) ~ ")\n" ~ .(description)), 
    x = 0.5, hjust = 0.5, gp = gpar(fontsize = 10)
  )
}

# Define captions for each map
cap_norwegian_engineering <- caption_grob("Norwegian Engineering", 100, "Description of Norwegian Engineering")
cap_research <- caption_grob("Research", 120, "Description of Research")
cap_money <- caption_grob("Money", 90, "Description of Money")
cap_scandinavian_energy <- caption_grob("Scandinavian Energy", 80, "Description of Energy Sector")
cap_other1 <- caption_grob("Other 1", 70, "Description of Other 1")
cap_other2 <- caption_grob("Other 2", 60, "Description of Other 2")

# Arrange the maps in rows
row1 <- (map_norwegian_engineering + plot_spacer() + map_research + plot_spacer() + map_money) /
        (wrap_elements(full = cap_norwegian_engineering) + plot_spacer() + 
         wrap_elements(full = cap_research) + plot_spacer() + wrap_elements(full = cap_money))

row2 <- (map_scandinavian_energy + plot_spacer() + map_other1 + plot_spacer() + map_other2) /
        (wrap_elements(full = cap_scandinavian_energy) + plot_spacer() + 
         wrap_elements(full = cap_other1) + plot_spacer() + wrap_elements(full = cap_other2))

# Combine the full plot
final_plot <- row1 / row2 + plot_layout(heights = c(5, 1))

# Save the final figure
ggsave("H2_paper/figs_W2425/combined_map_figure.png", plot = final_plot, width = 16, height = 10, dpi = 300)
```

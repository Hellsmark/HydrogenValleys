---
title: "Masterscript"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Libraries

```{r}
library(googlesheets4)
library(conflicted)
library(tidyverse)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
library(ggthemes)
library(gt)
library(gtExtras)
library(patchwork)
library(tidygraph)
library(ggrepel)
library(ggraph)

```

# Data

## From Mainfilesheet

```{r}
ss <- "https://docs.google.com/spreadsheets/d/1xzpre5Ej_7OEGRU4EA7KZuMQnSz5YCyTx5Sdbml6bQE/edit#gid=0"

df_main_raw <- read_sheet(ss, sheet = "Main")
df_geo_locations_raw <- read_sheet(ss, sheet = "locations_coord", range = "B:J")

df_companies_raw <- read_sheet(ss, sheet = "CompanyAnalysis")
df_job_roles_raw <- read_sheet(ss, sheet = "Job_roles")
```

## Other data

```{r}
# Labourforce 2023 in millions
# https://data.worldbank.org/indicator/SL.TLF.TOTL.IN?locations=DK-NO-SE
# GDP per capita 2023 in thousend USD
# https://data.worldbank.org/indicator/NY.GDP.PCAP.CD?locations=DK-NO-SE
# GDP total 2023 in billion USD
# https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?locations=DK-NO-SE
workforce_gdp <- tribble(
  ~Country, ~Workforce, ~GDP_per_capita_kUSD, ~GDP_total_billion_USD, 
  "SE", 5.8, 56, 593,  
  "NO", 3.0, 88, 486,
  "DK", 3.2, 68, 404
  )
```

# General wrangle

```{r}
geo <- df_geo_locations_raw %>% janitor::clean_names()

job_roles <- df_job_roles_raw %>%
  select(ID, job_role = Job_role, Type, Type_2)

jobs <- df_main_raw %>% 
  inner_join(geo, by = c("Location"="new_name"), relationship = "many-to-many") %>%
  mutate(publish_country = case_when(
    str_detect(ID, pattern ="^1") ~ "SE", 
    str_detect(ID, pattern ="^2") ~ "NO",
    str_detect(ID, pattern ="^3") ~ "DK"
  )) %>%
  mutate(Scrape_date = lubridate::ymd(Scrape_date)) %>%
  filter(Scrape_date >= "2023-08-20") %>%
  left_join(job_roles) %>%
  filter(country %in% c("Denmark","Norway","Sweden"))
```

# Data overview

## New jobs and country statistics

```{r}
comp <- jobs %>% 
  select(country_code, Company) %>% 
  unique() %>% 
  group_by(country_code) %>% 
  count(name="nr_comp")

tbl_country_comp <- jobs %>% 
  group_by(country_code) %>% 
  summarise(Jobs = n(), .groups = "drop") %>%
  mutate(perc = Jobs/sum(Jobs)*100) %>%
  left_join(comp) %>%
  mutate(perc_c = nr_comp/sum(nr_comp)*100) %>%
  left_join(workforce_gdp, by = c("country_code"="Country")) 

gt_tbl_country_comp <- tbl_country_comp %>% 
  gt(rowname_col = "country_code") %>%
  tab_stubhead(label = "Country") %>%
  grand_summary_rows(
    columns = -country_code,
    fns = list(
      Total ~sum(.)
    )
  ) %>% 
  fmt_number(decimals = 0) %>%
  tab_spanner(
    columns = c(Jobs, perc),
    label = "New Jobs"
  ) %>%
  tab_spanner(columns = c(nr_comp, perc_c),
              label = "Organisations") %>%
  tab_spanner(columns = c(Workforce, GDP_total_billion_USD, GDP_per_capita_kUSD),
              label = "Country Statistics") %>%
  cols_label(
    Jobs ~ "Nr.",
    perc ~ "(%)",
    nr_comp ~ "Nr.",
    perc_c ~ "(%)",
    Workforce ~ "Labour<br>(mil.)",
    GDP_total_billion_USD ~ "GDP<br>(b$)",
    GDP_per_capita_kUSD ~ "GDP/Cap.<br>(k$)",
    .fn = md
  ) %>% gt_theme_espn()
gt_tbl_country_comp

gtsave(gt_tbl_country_comp, filename = "tables/countries_jobs.png")
```

### Violine

```{r}
df_distribution <- jobs %>% 
  count(Company, country_code) %>% 
  filter(!Company == "!!!NEW_COMPANY!!!")

violine <- df_distribution %>%
  rename(Country = country_code) %>%
  ggplot(aes(n, Country, fill = Country), alpha = 0.5) + 
  geom_violin(show.legend = F) + 
  scale_fill_colorblind() + 
  theme_grey() +
  coord_fixed(ratio = 60) +  # Adjust aspect ratio (reduce height)
  labs(x = "", y = "")

violine
ggsave(filename = "figs/violine.png", plot = violine, limitsize = FALSE, width = 6, height = 4)
```

Add table to violine

```{r}
img <- png::readPNG("tables/countries_jobs.png")

# Create a rasterGrob
table_grob <- grid::rasterGrob(img)

# Create the table plot
table_to_plot <- ggplot() +
  theme_void() +
  annotation_custom(table_grob,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf)

# Put the figure and table together:
final_figure1 <- cowplot::plot_grid(violine,
                                                    table_to_plot,
                                                    nrow = 1,
                                                    ncol = 2,
                                                    rel_heights = c(1, 1))

final_figure1
ggsave(filename = "figs/violine_table.png", width = 6, height = 4, dpi = 600)
```

## Overview companies

```{r}
companies_overview <- jobs %>%
  group_by(country_code, Company) %>%
  summarise(n=n()) %>%
  arrange(desc(n)) %>%
  mutate(share = n/sum(n)*100) %>%
  ungroup() %>%
  filter(country_code %in% c("DK","NO","SE"))

tot_jobs <- sum(companies_overview$n)

top_10 <- companies_overview %>%
  # Group by country to perform operations within each country
  group_by(country_code) %>%
  # Arrange by descending n within each group
  arrange(desc(n), .by_group = TRUE) %>%
  # Create a new column to identify top 10 companies considering ties
  mutate(Rank = rank(-n, ties.method = "first")) %>%
  # Adjust Company name, keeping top 10 and any ties at the 10th place, lump the rest as 'Other'
  mutate(Company = ifelse(Rank <= 10, Company, "Other")) %>%
  # Regroup to combine 'Other' entries
  group_by(country_code, Company) %>%
  # Summarize to aggregate counts for each company or 'Other'
  summarize(n = sum(n)) %>%
  mutate(share = n/sum(n)*100, share_tot = n/tot_jobs*100) %>%
  # Arrange within each country to ensure 'Other' appears last and companies are sorted by n
  arrange(country_code, desc(n)) %>%
  mutate(Company = fct_infreq(Company) %>% fct_relevel("Other", after = Inf)) %>%
  # Final arrange to ensure 'Other' is last
  arrange(country_code, Company == "Other") %>%
  ungroup() %>%
  mutate(Company = as.character(Company)) %>%
  mutate(Company = str_trunc(Company, width =20, ellipsis = "."))


top10 <- function(cc){
  
  ll <- case_when(
    cc== "DK" ~ "Denmark",
    cc== "SE" ~ "Sweden",
    cc == "NO" ~"Norway"
  )
  
  top_10 %>% 
  filter(country_code == cc) %>%
  select(-country_code) %>%
  gt(rowname_col = "Company") %>%
  tab_stubhead(label = "Companies") %>%
  grand_summary_rows(
    columns = c(n, share, share_tot),
    fns = list(
      Total = ~ sum(.)
    ), 
    fmt = ~fmt_number(., columns = share_tot, decimals = 1)) %>%
  fmt_number(columns = c(share, share_tot), decimals = 1) %>%
  tab_spanner(
    columns = everything(),
    label = ll
  ) %>% 
  cols_label(
    n~"New jobs",
    share ~ "(%)",
    share_tot ~ "Total(%)"
  ) %>%
  gt_theme_espn()
}


dk <- top10("DK")
no <- top10("NO")
se <- top10("SE")
dk 
no
se
gtsave(dk, filename = "tables/dk_comp.png", vwidth = 800, vheight = 600)
gtsave(no, filename = "tables/no_comp.png", vwidth = 800, vheight = 600)
gtsave(se, filename = "tables/se_comp.png", vwidth = 800, vheight = 600)
```

Add country tables together to one

```{r}
img_dk <- png::readPNG("tables/dk_comp.png")
img_no <- png::readPNG("tables/no_comp.png")
img_se <- png::readPNG("tables/se_comp.png")


# Create a rasterGrob
table_grob_dk <- grid::rasterGrob(img_dk, width = unit(1, "npc"), height = unit(1, "npc"))
table_grob_no <- grid::rasterGrob(img_no, width = unit(1, "npc"), height = unit(1, "npc"))
table_grob_se <- grid::rasterGrob(img_se, width = unit(1, "npc"), height = unit(1, "npc"))


# Create the table plot
table_to_plot_dk <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_dk,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

table_to_plot_no <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_no,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

table_to_plot_se <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_se,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

# Put the figure and table together:
nord_comp_tbl_plot <- cowplot::plot_grid(
  table_to_plot_dk + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  table_to_plot_no + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  table_to_plot_se + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  nrow = 1,
  ncol = 3,
  rel_widths = c(1, 1, 1),  # Ensure equal width without gaps
  align = "h",               # Align tables horizontally
  axis = "tb"                # Align top and bottom axes tightly
)

nord_comp_tbl_plot
ggsave(filename = "figs/nord_comp_tbl_plot.png", width = 6, height = 4, dpi = 600)
```

# Who

## Actortypes

```{r}
types <- df_companies_raw %>% 
  select(Name, Multinational, Organisation_type, Ownership_type, Industry_Sector, Hydrogen_specialist, Location_of_jobs) %>%
  separate(Location_of_jobs, into = paste0("location_", 1:5), sep = ", ", fill = "right") %>%
  mutate(
    multi_Nordic = rowSums(across(location_1:location_5, ~ . %in% 
                                    c("DK","NO","SE", "DK ","NO ","SE ",
                                      " DK"," NO"," SE", " DK "," NO "," SE "))) >= 2
  )

company_types <- jobs %>% 
  group_by(Company, country_code) %>% 
  summarise(n = n()) %>%
  left_join(types, by = c("Company" = "Name")) %>%
  select(Company, country_code, n, Multinational, Organisation_type, Ownership_type,
         Industry_Sector, Hydrogen_specialist, multi_Nordic) %>%
  na.omit()

company_types_clean <- company_types %>% 
  rename("Organisation" = "Organisation_type", "Ownership"= "Ownership_type", "Sector" = "Industry_Sector", "H2-spec."= "Hydrogen_specialist", "MultiNordic"="multi_Nordic", "Country" = "country_code")



ppf <- function(vr_name) {
  y <- sym(vr_name)
  pl <- company_types_clean %>% 
  ggplot(aes(x = n, y = !!y , 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous(limits = c(0, 1600))+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = y)+
    theme_minimal()+
    theme(
      legend.position = 
        ifelse(y =="Sector" | y == "Organisation", "bottom", "none"), 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12))
  return(pl)
}

v<- c("Multinational", "Organisation", "Ownership", "Sector", "H2-spec.", "MultiNordic")

plot_list <- map(v, ppf)
names(plot_list) <- v

sml_pl <- plot_list[[1]] + plot_list[[6]] +plot_list[[3]]+plot_list[[5]] + plot_layout(ncol = 1, axes = "collect") &
  theme(legend.position="bottom", text = element_text(size = 14)) 
sml_pl
multi_pl <-plot_list[[2]] + sml_pl + 
  plot_layout(ncol = 2, guides = "collect") &
  theme(legend.position="bottom", 
        text = element_text(size = 14)) 
multi_pl
#ggsave(filename = "figs/multi_pl.png", dpi = 1200, width = 12, height = 8)
```

### Country and company connections

```{r}
df_gs <- jobs %>% 
  count(Company, country_code, name = "weight") %>% 
  filter(!Company == "!!!NEW_COMPANY!!!") %>%
  left_join(types, by =c("Company" = "Name")) %>% 
  na.omit() %>% 
  filter(Organisation == "Firm") # select only firms

nr_jobs_comp <- jobs %>% count(Company, name = "jobs") %>% 
  filter(!Company == "!!!NEW_COMPANY!!!") %>% 
  rename(name = Company)

nr_jobs_country <- jobs %>% 
  count(country_code, name = "jobs") %>% 
  rename(name = country_code)
node_data <- bind_rows(nr_jobs_comp, nr_jobs_country)

gs <- df_gs %>% 
  as_tbl_graph(directed = FALSE) %N>%
  mutate(type = ifelse(name %in% df_gs$Company, "actor", "country")) %>%
  mutate(ctrl = centrality_degree()) %>%
  left_join(node_data)
  

nodes <- gs %N>% as_tibble()
edges <- gs %E>% as_tibble()

set.seed(12345)
node_edge_map <- ggraph(gs, layout = "fr") +
  geom_edge_link(aes(edge_width = weight), 
                 edge_alpha = 0.3, 
                 edge_color = "lightgrey", 
                 show.legend = FALSE) + 
  geom_node_point(aes(color = type, shape = type, size = jobs),
                  alpha = 0.6, show.legend = FALSE) +
  geom_node_text(aes(label = ifelse(type != "actor", name, "")),
                 size= 6, show.legend = FALSE, fontface = "bold") +
  geom_text_repel(aes(x = x, y = y,
    label = ifelse(type == "actor" & (jobs > 4 | ctrl > 1), 
                   str_trunc(name, 7, ellipsis = "."), ""),
    size = jobs),  # Scale label size based on the number of jobs
    point.padding = 0.5, 
    segment.size = 0.2,
    max.overlaps = Inf,  # Allow more overlaps
    show.legend = FALSE) +
  theme_graph() +
  scale_color_manual(values = c("actor" = "cornflowerblue", "country" = "orange")) +
  scale_size(range = c(3, 10)) +  # Adjust the size range
  scale_edge_width(range = c(2, 4)) +
  ggtitle("") #+
  #annotate("text", x=-12, y =1, label = "Denmark")+
  #annotate("text", x=-1, y =4, label = "Norway")+
  #annotate("text", x=-3, y =-13, label = "Sweden")

node_edge_map
ggsave("figs/node_edge_map.png", dpi = 1200, width = 12, height = 8)
```

## Sectors

Simple table of the different sectors including short description

```{r}
sctr_tbl_info <- data.frame(
  sector = c("Chemicals", "Consulting", "Energy technology manufacturer", 
             "Energy utility", "Fossil fuel & Refinery", "Government & Public sector", 
             "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining",
             "Other", "Other manufacturing", "Research & Education", 
             "Transport"),
  description = c("Organisations working with producing and refining gases, fluids and solids used for fuel, manufacturing and other purposes.",
                  "Consulting agencies operating and providing knowledge and services within a variety of subjects and industry.",
                  "Organisations that manufacture components, modules or products used in other energy industries.",
                  "Organisations which produce and provide energy.",
                  "Organisations working with extracting or refining fossil fuels, such as oil and natural gas.",
                  "Organisations which are financed and driven public instances, such as municipalities, regional autorities or other public authorities.",
                  "Organisations working with producing components, modules and products specifically to be used for either production, distribution, storage or usage of hydrogen.",
                  "Organisations working subjects related to law or economics, such as law firms, banks and insurance companies.",
                  "Organisations working with extracting or refining metal ores and material.",
                  "Organisations that do not fit within any of the other 12 categories.",
                  "Organisations working within manufacturing of components, modules or products which do not fall in under either energy- or hydrogen technology manufacturer.",
                  "Organisations whose primary business is performing research or providing education, such as universities and research institutes.",
                  "Organisations either working with producing vehicles or transporting goods or people.")
)

sctr_tbl <- sctr_tbl_info %>%
  gt()  %>%
  cols_label(
    sector = "Sectors",
    description = "Description"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(sector, description)
    )
  )

sctr_tbl

#sctr_tbl %>% gtsave("tables/sctr_tbl.png")
```

### Overview plot

```{r}
tbl <- jobs %>%
  inner_join(df_companies %>% 
               select(Name, Industry_Sector), by = c("Company"="Name")) %>%
  rename(Sector = Industry_Sector, Country = country_code) %>%
  mutate(Sector = fct_infreq(Sector)) %>% 
  mutate(job_role = fct_infreq(job_role))

sector_plot <- tbl %>% 
  group_by(Country, Sector) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(Sector), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per sector")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

sector_plot
#ggsave("figs/Total_jobs_per_sector.png", dpi = 1200, width = 6, height = 8)
```

# What

# Where

# Combined patterns

---
title: "Masterscript"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Intro

This script includes all code for analysis, calculations, plots and tables used in the H2 paper as well as Nordic Hub meeting in Helsinki presentation.

NOTE: There are many tables and plots from previous scripts which are not included here regarding sectors, job roles, population size of cities and attempts at making maps.

# Libraries

```{r}
library(googlesheets4)
library(conflicted)
library(tidyverse)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
library(ggthemes)
library(gt)
library(gtExtras)
library(patchwork)
library(tidygraph)
library(ggrepel)
library(ggraph)
library(broom)
library(ggfortify)
library(clusterSim)
library(clValid)
library(dendextend)
library(factoextra)
library(cluster)
library(stats)
library(RColorBrewer)
library(ggplot2)
library(viridis)
library(gtsummary)
library(stringr)
```

# Data

## From Mainfile-sheet

```{r}
ss <- "https://docs.google.com/spreadsheets/d/1xzpre5Ej_7OEGRU4EA7KZuMQnSz5YCyTx5Sdbml6bQE/edit#gid=0"

df_main_raw <- read_sheet(ss, sheet = "Main")
df_geo_locations_raw <- read_sheet(ss, sheet = "locations_coord", range = "B:J")

df_companies_raw <- read_sheet(ss, sheet = "CompanyAnalysis")
df_job_roles_raw <- read_sheet(ss, sheet = "Job_roles")
```

## Other data

### National information

```{r}
# Labourforce 2023 in millions
# https://data.worldbank.org/indicator/SL.TLF.TOTL.IN?locations=DK-NO-SE
# GDP per capita 2023 in thousend USD
# https://data.worldbank.org/indicator/NY.GDP.PCAP.CD?locations=DK-NO-SE
# GDP total 2023 in billion USD
# https://data.worldbank.org/indicator/NY.GDP.MKTP.CD?locations=DK-NO-SE
workforce_gdp <- tribble(
  ~Country, ~Workforce, ~GDP_per_capita_kUSD, ~GDP_total_billion_USD, 
  "SE", 5.8, 56, 593,  
  "NO", 3.0, 88, 486,
  "DK", 3.2, 68, 404
  )
```

### Regional information

```{r}
regional_GDP <- data.frame(
  region = c("Agder","Dalarna","Gotland","Gävleborg","Halland",
             "Hovedstaden","Jämtland","Kalmar","Kronoberg","Midtjylland",
             "Møre og Romsdal","Nordjylland","Nordland","Norrbotten","Oslo",
             "Rogaland","Sjælland","Skåne","Stockholm","Syddanmark",
             "Södermanland","Troms og Finnmark","Trøndelag","Uppsala","Vestfold og Telemark",
             "Vestland","Viken","Värmland","Västerbotten","Västernorrland",
             "Västmanland","Västra Götaland","Östergötland"),
  GDP_per_capita = c(44772, 41862.5, 37331.5, 40188, 40286.5, 
                     90316.8, 41567, 39991, 50038, 56448,
                     48412.8, 48787.2, 48412.8, 63828, 91512,
                     58744.8, 39916.8, 44620.5, 71806.5, 54028.8,
                     37233, 49101.6, 49790.4, 47477, 43591.2,
                     51364.8, 44083.2, 41961, 46590.5, 46098,
                     40877.5, 50924.5, 45704)
  ) %>%
  left_join(region_new_jobs) %>%
  select(country,region,reg_pop,GDP_per_capita,new_jobs)

#Info from
#https://www.dst.dk/en/Statistik/emner/oekonomi/nationalregnskab/regionalfordelt-nationalregnskab
#https://www.scb.se/en/finding-statistics/statistics-by-subject-area/national-accounts/national-accounts/regional-accounts/pong/statistical-news/regional-accounts-2021/
#https://www.ssb.no/en/nasjonalregnskap-og-konjunkturer/nasjonalregnskap/statistikk/fylkesfordelt-nasjonalregnskap

#Exchange rate used from year of measurement
#https://www.exchangerates.org.uk/DKK-EUR-spot-exchange-rates-history-2022.html
#https://www.exchangerates.org.uk/NOK-EUR-spot-exchange-rates-history-2021.html
#https://www.exchangerates.org.uk/SEK-EUR-spot-exchange-rates-history-2021.html
```

## General wrangle and dataselection

```{r}
geo <- df_geo_locations_raw %>% janitor::clean_names()

job_roles <- df_job_roles_raw %>%
  select(ID, job_role = Job_role, Type, Type_2)

jobs <- df_main_raw %>% 
  inner_join(geo, by = c("Location"="new_name"), relationship = "many-to-many") %>%
  mutate(publish_country = case_when(
    str_detect(ID, pattern ="^1") ~ "SE", 
    str_detect(ID, pattern ="^2") ~ "NO",
    str_detect(ID, pattern ="^3") ~ "DK"
  )) %>%
  mutate(Scrape_date = lubridate::ymd(Scrape_date)) %>%
  filter(Scrape_date >= "2023-08-20") %>%
  left_join(job_roles) %>%
  filter(country %in% c("Denmark","Norway","Sweden"))
```

# Data overview

## New jobs and country statistics

```{r}
comp <- jobs %>% 
  select(country_code, Company) %>% 
  unique() %>% 
  group_by(country_code) %>% 
  count(name="nr_comp")

tbl_country_comp <- jobs %>% 
  group_by(country_code) %>% 
  summarise(Jobs = n(), .groups = "drop") %>%
  mutate(perc = Jobs/sum(Jobs)*100) %>%
  left_join(comp) %>%
  mutate(perc_c = nr_comp/sum(nr_comp)*100) %>%
  left_join(workforce_gdp, by = c("country_code"="Country")) 

gt_tbl_country_comp <- tbl_country_comp %>% 
  gt(rowname_col = "country_code") %>%
  tab_stubhead(label = "Country") %>%
  grand_summary_rows(
    columns = -country_code,
    fns = list(
      Total ~sum(.)
    )
  ) %>% 
  fmt_number(decimals = 0) %>%
  tab_spanner(
    columns = c(Jobs, perc),
    label = "New Jobs"
  ) %>%
  tab_spanner(columns = c(nr_comp, perc_c),
              label = "Organisations") %>%
  tab_spanner(columns = c(Workforce, GDP_total_billion_USD, GDP_per_capita_kUSD),
              label = "Country Statistics") %>%
  cols_label(
    Jobs ~ "Nr.",
    perc ~ "(%)",
    nr_comp ~ "Nr.",
    perc_c ~ "(%)",
    Workforce ~ "Labour<br>(mil.)",
    GDP_total_billion_USD ~ "GDP<br>(b$)",
    GDP_per_capita_kUSD ~ "GDP/Cap.<br>(k$)",
    .fn = md
  ) %>% gt_theme_espn()
gt_tbl_country_comp

gtsave(gt_tbl_country_comp, filename = "tables/countries_jobs.png")
```

### Violin

```{r}
df_distribution <- jobs %>% 
  count(Company, country_code) %>% 
  filter(!Company == "!!!NEW_COMPANY!!!")

violine <- df_distribution %>%
  rename(Country = country_code) %>%
  ggplot(aes(n, Country, fill = Country), alpha = 0.5) + 
  geom_violin(show.legend = F) + 
  scale_fill_colorblind() + 
  theme_grey() +
  coord_fixed(ratio = 60) +  # Adjust aspect ratio (reduce height)
  labs(x = "", y = "")

violine
ggsave(filename = "figs/violine.png", plot = violine, limitsize = FALSE, width = 6, height = 4)
```

Add table to violin

```{r}
img <- png::readPNG("tables/countries_jobs.png")

# Create a rasterGrob
table_grob <- grid::rasterGrob(img)

# Create the table plot
table_to_plot <- ggplot() +
  theme_void() +
  annotation_custom(table_grob,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf)

# Put the figure and table together:
final_figure1 <- cowplot::plot_grid(violine,
                                                    table_to_plot,
                                                    nrow = 1,
                                                    ncol = 2,
                                                    rel_heights = c(1, 1))

final_figure1
ggsave(filename = "figs/violine_table.png", width = 6, height = 4, dpi = 600)
```

## Overview companies

```{r}
companies_overview <- jobs %>%
  group_by(country_code, Company) %>%
  summarise(n=n()) %>%
  arrange(desc(n)) %>%
  mutate(share = n/sum(n)*100) %>%
  ungroup() %>%
  filter(country_code %in% c("DK","NO","SE"))

tot_jobs <- sum(companies_overview$n)

top_10 <- companies_overview %>%
  # Group by country to perform operations within each country
  group_by(country_code) %>%
  # Arrange by descending n within each group
  arrange(desc(n), .by_group = TRUE) %>%
  # Create a new column to identify top 10 companies considering ties
  mutate(Rank = rank(-n, ties.method = "first")) %>%
  # Adjust Company name, keeping top 10 and any ties at the 10th place, lump the rest as 'Other'
  mutate(Company = ifelse(Rank <= 10, Company, "Other")) %>%
  # Regroup to combine 'Other' entries
  group_by(country_code, Company) %>%
  # Summarize to aggregate counts for each company or 'Other'
  summarize(n = sum(n)) %>%
  mutate(share = n/sum(n)*100, share_tot = n/tot_jobs*100) %>%
  # Arrange within each country to ensure 'Other' appears last and companies are sorted by n
  arrange(country_code, desc(n)) %>%
  mutate(Company = fct_infreq(Company) %>% fct_relevel("Other", after = Inf)) %>%
  # Final arrange to ensure 'Other' is last
  arrange(country_code, Company == "Other") %>%
  ungroup() %>%
  mutate(Company = as.character(Company)) %>%
  mutate(Company = str_trunc(Company, width =20, ellipsis = "."))


top10 <- function(cc){
  
  ll <- case_when(
    cc== "DK" ~ "Denmark",
    cc== "SE" ~ "Sweden",
    cc == "NO" ~"Norway"
  )
  
  top_10 %>% 
  filter(country_code == cc) %>%
  select(-country_code) %>%
  gt(rowname_col = "Company") %>%
  tab_stubhead(label = "Companies") %>%
  grand_summary_rows(
    columns = c(n, share, share_tot),
    fns = list(
      Total = ~ sum(.)
    ), 
    fmt = ~fmt_number(., columns = share_tot, decimals = 1)) %>%
  fmt_number(columns = c(share, share_tot), decimals = 1) %>%
  tab_spanner(
    columns = everything(),
    label = ll
  ) %>% 
  cols_label(
    n~"New jobs",
    share ~ "(%)",
    share_tot ~ "Total(%)"
  ) %>%
  gt_theme_espn()
}


dk <- top10("DK")
no <- top10("NO")
se <- top10("SE")
dk 
no
se
gtsave(dk, filename = "tables/dk_comp.png", vwidth = 800, vheight = 600)
gtsave(no, filename = "tables/no_comp.png", vwidth = 800, vheight = 600)
gtsave(se, filename = "tables/se_comp.png", vwidth = 800, vheight = 600)
```

Add country tables together to one

```{r}
img_dk <- png::readPNG("tables/dk_comp.png")
img_no <- png::readPNG("tables/no_comp.png")
img_se <- png::readPNG("tables/se_comp.png")


# Create a rasterGrob
table_grob_dk <- grid::rasterGrob(img_dk, width = unit(1, "npc"), height = unit(1, "npc"))
table_grob_no <- grid::rasterGrob(img_no, width = unit(1, "npc"), height = unit(1, "npc"))
table_grob_se <- grid::rasterGrob(img_se, width = unit(1, "npc"), height = unit(1, "npc"))


# Create the table plot
table_to_plot_dk <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_dk,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

table_to_plot_no <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_no,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

table_to_plot_se <- ggplot() +
  theme_void() +
  annotation_custom(table_grob_se,
                    xmin = -Inf,
                    xmax = Inf,
                    ymin = -Inf,
                    ymax = Inf) +
  coord_fixed(ratio = 1.33)  # Adjust aspect ratio if needed

# Put the figure and table together:
nord_comp_tbl_plot <- cowplot::plot_grid(
  table_to_plot_dk + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  table_to_plot_no + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  table_to_plot_se + theme(plot.margin = unit(c(0, 0, 0, 0), "cm")),  # Remove margins
  nrow = 1,
  ncol = 3,
  rel_widths = c(1, 1, 1),  # Ensure equal width without gaps
  align = "h",               # Align tables horizontally
  axis = "tb"                # Align top and bottom axes tightly
)

nord_comp_tbl_plot
ggsave(filename = "figs/nord_comp_tbl_plot.png", width = 6, height = 4, dpi = 600)
```

# Who

## Actor types

```{r}
types <- df_companies_raw %>% 
  select(Name, Multinational, Organisation_type, Ownership_type, Industry_Sector, Hydrogen_specialist, Location_of_jobs) %>%
  separate(Location_of_jobs, into = paste0("location_", 1:5), sep = ", ", fill = "right") %>%
  mutate(
    multi_Nordic = rowSums(across(location_1:location_5, ~ . %in% 
                                    c("DK","NO","SE", "DK ","NO ","SE ",
                                      " DK"," NO"," SE", " DK "," NO "," SE "))) >= 2
  )

company_types <- jobs %>% 
  group_by(Company, country_code) %>% 
  summarise(n = n()) %>%
  left_join(types, by = c("Company" = "Name")) %>%
  select(Company, country_code, n, Multinational, Organisation_type, Ownership_type,
         Industry_Sector, Hydrogen_specialist, multi_Nordic) %>%
  na.omit()

company_types_clean <- company_types %>% 
  rename("Organisation" = "Organisation_type", "Ownership"= "Ownership_type", "Sector" = "Industry_Sector", "H2-spec."= "Hydrogen_specialist", "MultiNordic"="multi_Nordic", "Country" = "country_code")



ppf <- function(vr_name) {
  y <- sym(vr_name)
  pl <- company_types_clean %>% 
  ggplot(aes(x = n, y = !!y , 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous(limits = c(0, 1600))+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = y)+
    theme_minimal()+
    theme(
      legend.position = 
        ifelse(y =="Sector" | y == "Organisation", "bottom", "none"), 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12))
  return(pl)
}

v<- c("Multinational", "Organisation", "Ownership", "Sector", "H2-spec.", "MultiNordic")

plot_list <- map(v, ppf)
names(plot_list) <- v

sml_pl <- plot_list[[1]] + plot_list[[6]] +plot_list[[3]]+plot_list[[5]] + plot_layout(ncol = 1, axes = "collect") &
  theme(legend.position="bottom", text = element_text(size = 14)) 
sml_pl
multi_pl <-plot_list[[2]] + sml_pl + 
  plot_layout(ncol = 2, guides = "collect") &
  theme(legend.position="bottom", 
        text = element_text(size = 14)) 
multi_pl
#ggsave(filename = "figs/multi_pl.png", dpi = 1200, width = 12, height = 8)
```

### Country and company connections

```{r}
df_gs <- jobs %>% 
  count(Company, country_code, name = "weight") %>% 
  filter(!Company == "!!!NEW_COMPANY!!!") %>%
  left_join(types, by =c("Company" = "Name")) %>% 
  na.omit() %>% 
  filter(Organisation == "Firm") # select only firms

nr_jobs_comp <- jobs %>% count(Company, name = "jobs") %>% 
  filter(!Company == "!!!NEW_COMPANY!!!") %>% 
  rename(name = Company)

nr_jobs_country <- jobs %>% 
  count(country_code, name = "jobs") %>% 
  rename(name = country_code)
node_data <- bind_rows(nr_jobs_comp, nr_jobs_country)

gs <- df_gs %>% 
  as_tbl_graph(directed = FALSE) %N>%
  mutate(type = ifelse(name %in% df_gs$Company, "actor", "country")) %>%
  mutate(ctrl = centrality_degree()) %>%
  left_join(node_data)
  

nodes <- gs %N>% as_tibble()
edges <- gs %E>% as_tibble()

set.seed(12345)
node_edge_map <- ggraph(gs, layout = "fr") +
  geom_edge_link(aes(edge_width = weight), 
                 edge_alpha = 0.3, 
                 edge_color = "lightgrey", 
                 show.legend = FALSE) + 
  geom_node_point(aes(color = type, shape = type, size = jobs),
                  alpha = 0.6, show.legend = FALSE) +
  geom_node_text(aes(label = ifelse(type != "actor", name, "")),
                 size= 6, show.legend = FALSE, fontface = "bold") +
  geom_text_repel(aes(x = x, y = y,
    label = ifelse(type == "actor" & (jobs > 4 | ctrl > 1), 
                   str_trunc(name, 7, ellipsis = "."), ""),
    size = jobs),  # Scale label size based on the number of jobs
    point.padding = 0.5, 
    segment.size = 0.2,
    max.overlaps = Inf,  # Allow more overlaps
    show.legend = FALSE) +
  theme_graph() +
  scale_color_manual(values = c("actor" = "cornflowerblue", "country" = "orange")) +
  scale_size(range = c(3, 10)) +  # Adjust the size range
  scale_edge_width(range = c(2, 4)) +
  ggtitle("") #+
  #annotate("text", x=-12, y =1, label = "Denmark")+
  #annotate("text", x=-1, y =4, label = "Norway")+
  #annotate("text", x=-3, y =-13, label = "Sweden")

node_edge_map
ggsave("figs/node_edge_map.png", dpi = 1200, width = 12, height = 8)
```

## Sectors

Simple table of the different sectors including short description

```{r}
sctr_tbl_info <- data.frame(
  sector = c("Chemicals", "Consulting", "Energy technology manufacturer", 
             "Energy utility", "Fossil fuel & Refinery", "Government & Public sector", 
             "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining",
             "Other", "Other manufacturing", "Research & Education", 
             "Transport"),
  description = c("Organisations working with producing and refining gases, fluids and solids used for fuel, manufacturing and other purposes.",
                  "Consulting agencies operating and providing knowledge and services within a variety of subjects and industry.",
                  "Organisations that manufacture components, modules or products used in other energy industries.",
                  "Organisations which produce and provide energy.",
                  "Organisations working with extracting or refining fossil fuels, such as oil and natural gas.",
                  "Organisations which are financed and driven public instances, such as municipalities, regional autorities or other public authorities.",
                  "Organisations working with producing components, modules and products specifically to be used for either production, distribution, storage or usage of hydrogen.",
                  "Organisations working subjects related to law or economics, such as law firms, banks and insurance companies.",
                  "Organisations working with extracting or refining metal ores and material.",
                  "Organisations that do not fit within any of the other 12 categories.",
                  "Organisations working within manufacturing of components, modules or products which do not fall in under either energy- or hydrogen technology manufacturer.",
                  "Organisations whose primary business is performing research or providing education, such as universities and research institutes.",
                  "Organisations either working with producing vehicles or transporting goods or people.")
)

sctr_tbl <- sctr_tbl_info %>%
  gt()  %>%
  cols_label(
    sector = "Sectors",
    description = "Description"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(sector, description)
    )
  )

sctr_tbl

#sctr_tbl %>% gtsave("tables/sctr_tbl.png")
```

### Overview plot

```{r}
tbl <- jobs %>%
  inner_join(df_companies %>% 
               select(Name, Industry_Sector), by = c("Company"="Name")) %>%
  rename(Sector = Industry_Sector, Country = country_code) %>%
  mutate(Sector = fct_infreq(Sector)) %>% 
  mutate(job_role = fct_infreq(job_role))

sector_plot <- tbl %>% 
  group_by(Country, Sector) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(Sector), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per sector")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

sector_plot
#ggsave("figs/Total_jobs_per_sector.png", dpi = 1200, width = 6, height = 8)
```

### Residual plot

```{r}
sectors_norm <- tbl %>% 
  group_by(Sector, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(Sector, Country, fill = list(n_job = 0)) 

jobs_total <- aggregate(n_job ~ Country, data = sectors_norm, sum)

sector_total <- aggregate(n_job ~ Sector, data = sectors_norm, sum)

sectors_norm <- merge(sectors_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
sectors_norm <- merge(sectors_norm, sector_total, by = "Sector", suffixes = c("", "_sector"))

sectors_norm$n_norm <- sectors_norm$n_job / sectors_norm$n_job_country
sectors_norm$mean <- sectors_norm$n_job_sector / sum(jobs_total$n_job)
sectors_norm$diff <- sectors_norm$n_norm - sectors_norm$mean

sector_deviation_plot <- ggplot(sectors_norm, aes(x = str_wrap(Sector, 20, whitespace_only = FALSE), y = diff*100)) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  theme(legend.position = "top") +
  labs(y = "Deviation from mean", x = "") +
  theme_bw() +
  theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1, color = "black"),
        axis.text.y = element_text(color = "black")) 
sector_deviation_plot

ggsave(filename = "figs/jobroles/sector_deviation.png", plot = sector_deviation_plot, limitsize = FALSE, width = 10, height = 7)
```

### Patchwork of overview and residual plots

```{r}
tbl_sectors <- tbl %>% 
  group_by(Country, Sector) %>%
  summarise(n =n())

#
# Determine the common order for sectors
sector_order <- tbl_sectors %>%
  group_by(Sector) %>%
  summarise(total_n = sum(n)) %>%
  arrange(desc(total_n)) %>%
  pull(Sector)

# Set the factor levels for Sector in both data frames
tbl_sectors <- tbl_sectors %>%
  mutate(Sector = factor(Sector, levels = sector_order))

sectors_norm <- sectors_norm %>%
  mutate(Sector = factor(Sector, levels = sector_order))
#

p1 <- tbl_sectors %>%
  ggplot(aes(x= n, y= fct_rev(Sector), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per sector")+
    theme_minimal()+
    theme(legend.position = "none", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

p2 <- ggplot(sectors_norm, aes(x = diff*100, y = fct_rev(Sector))) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  #theme(legend.position = "top") +
  labs(y = "", x = "", title = "Deviation from mean") +
  theme_minimal()+
    theme( 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_blank(),  # Remove y-axis text from the second plot
      axis.ticks.y = element_blank()  # Remove y-axis ticks from the second plot) 
    )
combined_sectors <- p1 + p2 + plot_layout(guides = "collect")

combined_sectors
ggsave(filename = "figs/jobroles/combined_sectors.png", plot = combined_sectors, limitsize = FALSE, width = 12, height = 7)
```

# What

## Job roles

Simple table of the different job roles including short description

```{r}
jbrls_tbl_info <- data.frame(
  jobroles = c("Administration", "Engineering", "Environmental",
               "Finance & Business development", "HR", "IT & Data science",
               "Law", "Other", "Other management", 
               "PhD", "Procurement & Logistics", "Project management", 
               "Public administration", "Quality assurance", "Research", 
               "Sales & Customer service", "Technician & Maintenance"),
  description = c("Includes jobs related to administrative or clerical work and secretaries.", 
                  "Includes all jobs related to different engineering practices.", 
                  "Includes jobs related to working with sustainability or environmental expert knowledge.",
                  "Includes jobs within finance, accounting, economics as well as business development or analysis.", 
                  "Includes jobs related to human resources and recruitment.", 
                  "Includes jobs working with software, data management, IT and data analysis.", 
                  "Includes jobs within law, such as lawyers and legal advisors.", 
                  "Includes all jobs which do not fall within any of the other 16 categories.", 
                  "Includes management jobs which are not explicitly Project management, such as CEOs, section manager, operations manager and so on.", 
                  "Includes doctoral students.", 
                  "Includes jobs in charge of procurement, logistics and supply chains.", 
                  "Includes jobs for project planning and management.", 
                  "Includes jobs working with administration within public sector.", 
                  "Includes jobs related to inspecting, controling or assuring quality of products or services.", 
                  "Includes jobs within research, such as professors, research assistants and other scientists.", 
                  "Includes jobs working with selling or marketing products or services as well as offering support of different kinds to customers.",
                  "Includes jobs related to manufacturing and repairing and in other ways keeping maintaining or enabling operations, such as technicians, industrial workers, mechanics, electricians, welders and so on.")
)

jbrls_tbl <- jbrls_tbl_info %>%
  gt()  %>%
  cols_label(
    jobroles = "Job roles",
    description = "Description"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(jobroles, description)
    )
  )

jbrls_tbl
jbrls_tbl %>% gtsave("tables/jbrls_tbl.png")
```

### Overview plot

```{r}
jobroles_plot <- tbl %>% drop_na(job_role) %>% #removing NA:s here
  group_by(Country, job_role) %>%
  summarise(n =n()) %>%
  ggplot(aes(x= n, y= fct_rev(job_role), 
             fill = Country)) + 
  geom_col()+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per job role")+
    theme_minimal()+
    theme(
      legend.position = "bottom", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

jobroles_plot
ggsave("figs/Total_jobs_per_jobrole.png", dpi = 1200, width = 8, height = 8)
```

### Residual plot

```{r}
jobs_norm <- tbl %>% group_by(job_role, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(job_role, Country, fill = list(n_job = 0)) 

jobs_total <- aggregate(n_job ~ Country, data = jobs_norm, sum)

jobrole_total <- aggregate(n_job ~ job_role, data = jobs_norm, sum)

jobs_norm <- merge(jobs_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
jobs_norm <- merge(jobs_norm, jobrole_total, by = "job_role", suffixes = c("", "_jobrole"))

jobs_norm$n_norm <- jobs_norm$n_job / jobs_norm$n_job_country
jobs_norm$mean <- jobs_norm$n_job_jobrole / sum(jobs_total$n_job)
jobs_norm$diff <- jobs_norm$n_norm - jobs_norm$mean

jobroles_deviation_plot <- ggplot(jobs_norm, aes(x = str_wrap(job_role, 20, whitespace_only = FALSE), y = diff*100)) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  theme(legend.position = "top") +
  labs(y = "Deviation from mean", x = "") +
  theme_bw() +
  theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1)) 
jobroles_deviation_plot

#ggsave(filename = "figs/jobroles/jobroles_deviation.png", plot = jobroles_deviation_plot, limitsize = FALSE, width = 10, height = 7)
```

### Patchwork of overview and residual plots

```{r}
jobs_norm <- tbl %>% group_by(job_role, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(job_role, Country, fill = list(n_job = 0)) 

jobs_total <- aggregate(n_job ~ Country, data = jobs_norm, sum)

jobrole_total <- aggregate(n_job ~ job_role, data = jobs_norm, sum)

jobs_norm <- merge(jobs_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
jobs_norm <- merge(jobs_norm, jobrole_total, by = "job_role", suffixes = c("", "_jobrole"))

jobs_norm$n_norm <- jobs_norm$n_job / jobs_norm$n_job_country
jobs_norm$mean <- jobs_norm$n_job_jobrole / sum(jobs_total$n_job)
jobs_norm$diff <- jobs_norm$n_norm - jobs_norm$mean
########## -----------------------------------
tbl_job_role <- tbl %>% 
  group_by(Country, job_role) %>%
  summarise(n =n()) %>%
  na.omit()
  

#
# Determine the common order for sectors
job_role_order <- tbl_job_role %>%
  group_by(job_role) %>%
  summarise(total_n = sum(n)) %>%
  arrange(desc(total_n)) %>%
  pull(job_role)

# Set the factor levels for Sector in both data frames
tbl_job_role <- tbl_job_role %>%
  mutate(job_role = factor(job_role, levels = job_role_order))

jobs_norm <- jobs_norm %>%
  mutate(job_role = factor(job_role, levels = job_role_order))
#

p1j <- tbl_job_role %>%
  ggplot(aes(x= n, y= fct_rev(job_role), 
             fill = Country)) + 
  geom_col(drop = F)+
    scale_x_continuous()+
    scale_fill_colorblind("Country")+
    labs(x= "", y = "", title = "Total jobs per job role")+
    theme_minimal()+
    theme(legend.position = "none", 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_text(color = "black"))

p2j <- ggplot(jobs_norm, aes(x = diff*100, y = fct_rev(job_role))) +
  geom_col(aes(fill = Country), width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  #theme(legend.position = "top") +
  labs(y = "", x = "", title = "Deviation from mean") +
  theme_minimal()+
    theme( 
      text = element_text(size = 14), 
      plot.title = element_text(size = 12),
      axis.text.y = element_blank(),  # Remove y-axis text from the second plot
      axis.ticks.y = element_blank()  # Remove y-axis ticks from the second plot) 
    )
combined_jobe_roles <- p1j + p2j + plot_layout(guides = "collect")

combined_jobe_roles
ggsave(filename = "figs/jobroles/combined_jobe_roles.png", plot = combined_jobe_roles, limitsize = FALSE, width = 12, height = 7)
```

## Engineering types

```{r}
# Calculate total jobs per engineer type for ordering
engineers_n <- tbl %>%
  filter(job_role == "Engineering") %>%
  group_by(Type_2) %>%
  summarise(total_n = n())

# Set the order for Type_2 based on total number of jobs
type_order <- engineers_n %>%
  arrange(desc(total_n)) %>%
  pull(Type_2)

# Create the first plot (engineers_plot) with consistent ordering
engineers_plot <- tbl %>%
  filter(job_role == "Engineering") %>%
  group_by(Country, Type_2) %>%
  summarise(n = n()) %>%
  left_join(engineers_n, by = "Type_2") %>%
  mutate(Type_2 = factor(Type_2, levels = type_order)) %>%
  ggplot(aes(x = n, y = fct_rev(Type_2), fill = Country)) + 
  geom_col() +
  scale_x_continuous() +
  scale_fill_colorblind("Country") +
  labs(x= "", y = "", title = "Total jobs per type of engineer") +
  theme_minimal() +
  theme(
    legend.position = "none", 
    text = element_text(size = 14), 
    plot.title = element_text(size = 12),
    axis.text.y = element_text(color = "black")
  )

# Prepare data for the second plot (engineers_deviation_plot)
engineers_norm <- tbl %>%
  filter(job_role == "Engineering") %>%
  group_by(Type_2, Country) %>%
  summarise(n_job = n(), .groups = 'drop') %>%
  complete(Type_2, Country, fill = list(n_job = 0))

jobs_total <- aggregate(n_job ~ Country, data = engineers_norm, sum)

engineer_total <- aggregate(n_job ~ Type_2, data = engineers_norm, sum)

engineers_norm <- merge(engineers_norm, jobs_total, by = "Country", suffixes = c("", "_country"))
engineers_norm <- merge(engineers_norm, engineer_total, by = "Type_2", suffixes = c("", "_type"))

engineers_norm$n_norm <- engineers_norm$n_job / engineers_norm$n_job_country
engineers_norm$mean <- engineers_norm$n_job_type / sum(jobs_total$n_job)
engineers_norm$diff <- engineers_norm$n_norm - engineers_norm$mean

# Create the second plot (engineers_deviation_plot) with consistent ordering
engineers_deviation_plot <- engineers_norm %>%
  mutate(Type_2 = factor(Type_2, levels = type_order)) %>%
  ggplot(aes(x = diff * 100, y = fct_rev(Type_2), fill = Country)) +
  geom_col(width = 0.5, position = position_dodge(width = 0.5)) +
  scale_fill_colorblind("Country") +
  labs(y = "", x = "", title = "Deviation from mean") +
  theme_minimal() +
  theme(
    #legend.position = "top",
    text = element_text(size = 14), 
    plot.title = element_text(size = 12),
    axis.text.y = element_blank(),  # Remove y-axis text from the second plot
    axis.ticks.y = element_blank()  # Remove y-axis ticks from the second plot
  )

# Combine the plots
combined_engineers <- engineers_plot + engineers_deviation_plot + plot_layout(guides = "collect") #& theme(legend.position = "top")

# Print the combined plot
print(combined_engineers)

ggsave(filename = "figs/jobroles/combined_engineers.png", plot = combined_engineers, limitsize = FALSE, width = 10, height = 6) 
```

# Where

## Wrangle 

```{r}
location_all <- jobs %>% 
  group_by(Location) %>%
  summarise(new_jobs = n()) %>% 
  left_join(geo, by = c("Location" ="municipality_city")) %>%
  na.omit() %>%
  rename("location" = "Location") %>%
  select(-new_name) %>%
  unique()
```

## Population size

Linear regression over number of jobs created depending on population size of regions.

### All countries as one

```{r}
region_new_jobs <- location_all %>% 
  group_by(region, reg_pop, country) %>%
  summarise(new_jobs = sum(new_jobs)) %>%
  ungroup()

lm_regions <- lm(new_jobs ~ reg_pop, data = region_new_jobs)

# looking at mdl results
glance(lm_regions)
summary(lm_regions)
tidy(lm_regions)

# extract data for annotating the plot
lm_gl <- glance(lm_regions)
r2_p_all <- paste("R2:", round(lm_gl$r.squared, 2), "&\n", ifelse(lm_gl$p.value < 0.05, "p< 0.05", "p>0.05"))  
```

### Countries used as a factor

```{r}
lm_data_reg <- region_new_jobs %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ reg_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_dk <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_se <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_no <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_dk <- paste("R2:", round(lm_dk$r.squared, 2), "&\n", ifelse(lm_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_se <- paste("R2:", round(lm_se$r.squared, 2), "&\n", ifelse(lm_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_no <- paste("R2:", round(lm_no$r.squared, 2), "&\n", ifelse(lm_no$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg <- lm_data_reg %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std <- lm_data_reg %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))
```

### Plot

```{r}
region_new_jobs <- location_all %>% 
  group_by(region, reg_pop, country) %>%
  summarise(new_jobs = sum(new_jobs)) %>%
  ungroup()

region_new_jobs %>% 
  ggplot(aes(round(reg_pop/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(reg_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=1160, y =270, label = r2_p_no)+
  annotate("text", x=1590, y =220, label = r2_p_dk)+
  annotate("text", x=2020, y =170, label = r2_p_all)+
  annotate("text", x=2010, y =70, label = r2_p_se)+
  theme_minimal() +
  theme(legend.position = "top")
ggsave("figs/all_region_pop.png", dpi= 600, width = 8, height = 4)
```

## GDP per capita

Linear regression over number of jobs created depending on GDP per capita for each individual region.

```{r}
lm_regions_gdp <- lm(new_jobs ~ GDP_per_capita, data = regional_GDP)

# looking at mdl results
glance(lm_regions_gdp)
summary(lm_regions_gdp)
tidy(lm_regions_gdp)

# extract data for annotating the plot
lm_gl_gdp <- glance(lm_regions_gdp)
r2_p_gdp_all <- paste("R2:", round(lm_gl_gdp$r.squared, 2), "&\n", ifelse(lm_gl_gdp$p.value < 0.05, "p< 0.05", "p>0.05"))  


###

lm_data_reg_gdp <- regional_GDP %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ GDP_per_capita, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_gdp_dk <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_gdp_se <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_gdp_no <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_gdp_dk <- paste("R2:", round(lm_gdp_dk$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_gdp_se <- paste("R2:", round(lm_gdp_se$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_gdp_no <- paste("R2:", round(lm_gdp_no$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_no$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg_gdp <- lm_data_reg_gdp %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std_gdp <- lm_data_reg_gdp %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))

###

gdp_jobs_plot <- regional_GDP %>% 
  ggplot(aes(round(GDP_per_capita/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(GDP_per_capita/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_gdp)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "GDP per capita in kEUR", y= "Nr. of new jobs") +
  annotate("text", x=75, y =300, label = r2_p_gdp_no)+
  annotate("text", x=90, y =205, label = r2_p_gdp_all)+
  annotate("text", x=92, y =295, label = r2_p_gdp_dk)+
  annotate("text", x=68, y =50, label = r2_p_gdp_se)+
  theme_minimal() +
  theme(legend.position = "top")

gdp_jobs_plot
ggsave(filename = "figs/gdp_jobs_plot.png", plot = gdp_jobs_plot, limitsize = FALSE, width = 8, height = 5)
```

# Combined patterns

## Wrangle

```{r}
df_jobs <- jobs %>% 
  left_join(companies, by =c("Company" = "Name")) %>%
  select(country = country_code, region, sector= Industry_Sector, competence= job_role) %>%
  na.omit()

df_cl <- df_jobs %>%
  group_by(country, region, sector, competence) %>%
  summarise(n = n())

df_wide_cl <- df_cl %>% 
  unite(place, c("region", "country"), sep = ", ") %>%
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

mtrx <- as.matrix(df_wide_cl %>% select(-place, -sector))
```

## Identify good number of clusters

### Elbow

```{r}
wss <- map_dbl(2:60, function(k){
  km <- kmeans(x= mtrx, centers = k, iter.max = 40, nstart = 30)
  km$tot.withinss
})

df_knee <- tibble(k = 2:60, wss = wss)

df_knee %>% 
  ggplot(aes(k, wss, label = k)) + geom_line() + geom_point() +
  scale_x_continuous(breaks = 2:60)
```

### Silhouette

```{r}
sil_width <- map_dbl(2:60, function(k){
  pam_k <- pam(x = mtrx, k = k)
  pam_k$silinfo$avg.width
}) 

df_sil <- tibble(k = 2:60, sil_width = sil_width)

df_sil %>% ggplot(aes(k, sil_width)) + geom_line() + 
  geom_point()+
  scale_x_continuous(breaks = 2:60)
```

## Clustering

```{r}
# K-mean
set.seed(123456789)
KM_2 <- kmeans(mtrx,2)
set.seed(123456789)
KM_3 <- kmeans(mtrx,3)
set.seed(123456789)
KM_4 <- kmeans(mtrx,4)
set.seed(123456789)
KM_5 <- kmeans(mtrx,5)
set.seed(123456789)
KM_6 <- kmeans(mtrx,6)

# Evaluate with plots
png("figs/k-mean_2.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_2,mtrx,frame=TRUE)
dev.off()  # Close the device

png("figs/k-mean_3.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_3,mtrx,frame=TRUE)
dev.off()  # Close the device

png("figs/k-mean_4.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_4,mtrx,frame=TRUE)
dev.off()  # Close the device

png("figs/k-mean_5.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_5,mtrx,frame=TRUE)
dev.off()  # Close the device

png("figs/k-mean_6.png", width = 800, height = 600)  # Open a PNG device
autoplot(KM_6,mtrx,frame=TRUE)
dev.off()  # Close the device

# Evaluate with scores
data <- mtrx

sil <- c()
wcs <- c()
dun <- c()
dav <- c()

for (i in 2:6) {
  kmeans_result <- kmeans(data,i)
  
  ### Silhouette Score
  silhouette_score <- silhouette(kmeans_result$cluster, dist(data))
  mean_silhouette_score <- mean(silhouette_score[, 3])

  # Within-Cluster Sum of Squares (WCSS)
  wcss <- sum(kmeans_result$withinss)

  # Dunn Index
  dunn_index <- dunn(clusters = kmeans_result$cluster, Data = data)

  # Davies-Bouldin Index
  davies_bouldin_index <- index.DB(data, kmeans_result$cluster)$DB
  
  sil <- c(sil,mean_silhouette_score)
  wcs <- c(wcs,wcss)
  dun <- c(dun,dunn_index)
  dav <- c(dav,davies_bouldin_index)
  print(paste("The scores for k = ",as.character(i)))
  print(paste("Mean Silhouette Score:", mean_silhouette_score))
  print(paste("WCSS:", wcss))
  print(paste("Dunn Index:", dunn_index))
  print(paste("Davies-Bouldin Index:", davies_bouldin_index))
}

# Best result found at 5-6 clusters
```

## Add clusters to data

```{r}
cl_2 <- KM_2$cluster
cl_3 <- KM_3$cluster
cl_4 <- KM_4$cluster
cl_5 <- KM_5$cluster
cl_6 <- KM_6$cluster

df_hcl_2 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_2) %>% 
  relocate(cl, .after = "id") 
df_hcl_3 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_3) %>% 
  relocate(cl, .after = "id")
df_hcl_4 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_4) %>% 
  relocate(cl, .after = "id")
df_hcl_5 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_5) %>% 
  relocate(cl, .after = "id")
df_hcl_6 <- df_wide_cl %>% 
  rowid_to_column("id") %>%
  mutate(cl = cl_6) %>% 
  relocate(cl, .after = "id")

df_hcl_long_2 <- df_hcl_2 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_3 <- df_hcl_3 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_4 <- df_hcl_4 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_5 <- df_hcl_5 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")
df_hcl_long_6 <- df_hcl_6 %>%
  pivot_longer(-c(id, place, sector, cl), names_to = "competence", values_to = "n")

# Summary stat
sum_stat_2 <- df_hcl_2 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_3 <- df_hcl_3 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_4 <- df_hcl_4 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_5 <- df_hcl_5 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))
sum_stat_6 <- df_hcl_6 %>% 
  group_by(cl) %>% 
  summarise(across(.col = Engineering:PhD, .fns = mean))

#Place
pl_cl_2 <- df_hcl_long_2 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_3 <- df_hcl_long_3 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_4 <- df_hcl_long_4 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_5 <- df_hcl_long_5 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))
pl_cl_6 <- df_hcl_long_6 %>% group_by(cl, place) %>% summarise(n =n()) %>% arrange(desc(cl))

#Sector
se_cl_2 <- df_hcl_long_2 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_3 <- df_hcl_long_3 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_4 <- df_hcl_long_4 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_5 <- df_hcl_long_5 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
se_cl_6 <- df_hcl_long_6 %>% group_by(cl, sector) %>% summarise(n =n()) %>% arrange(desc(cl))
```

k=6 is the final chosen cluster-solution

### Important companies for the clusters

```{r}
df_ImpComp <- jobs %>%
  left_join(companies, by =c("Company" = "Name")) %>% 
  select(company = Company,country = country_code,region, sector= Industry_Sector, competence = job_role) %>%   
  na.omit() %>% 
  unite(place, c("region", "country"), sep = ", ") %>%
  group_by(company, place, sector, competence) %>%
  summarise(n = n()) %>% 
  pivot_wider(names_from = "competence", 
              values_from = "n", 
              values_fill = 0) %>% 
  ungroup()

norwegian_engineering <- df_hcl_6 %>%
  filter(cl == 1) %>% 
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

capital_headquarters <- df_hcl_6 %>%
  filter(cl == 6) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

nonswedish_researcher <- df_hcl_6 %>%
  filter(cl == 4) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

broad_energy <- df_hcl_6 %>%
  filter(cl == 3) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

hydrogen_and_others <- df_hcl_6 %>%
  filter(cl == 5) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)

others_nogroup <- df_hcl_6 %>%
  filter(cl == 2) %>%
  select(cl, place, sector) %>%
  left_join(df_ImpComp, by =c("place" = "place","sector" = "sector")) %>%
  rowwise() %>% 
  mutate(total_jobs = sum(c_across(c(5:21)), na.rm = T)) %>%
  relocate(total_jobs, .after = company)
```

## Visualization

### Wrangle

```{r}
cluster_place_sector <- df_hcl_6 %>% 
  select(cluster = cl, place, sector)

jobs_clustered <- jobs %>% # Keep in mind that cluster 2 and 3 are unclear and should be regarded as one "the rest"-cluster
  mutate(year = lubridate::year(Scrape_date), month = lubridate::month(Scrape_date)) %>%
  left_join(companies, by =c("Company" = "Name")) %>%
  select(id = ID, country = country_code, region, company = Company , sector = Industry_Sector, competence = job_role, year, month, nation = country) %>%
  na.omit() %>%
  unite(place, c("region", "country"), sep = ", ") %>%
  merge(cluster_place_sector, by = c("place", "sector"), all.x = TRUE) %>%
  select(id, cluster, place, company, sector, competence, year, month, nation)

jobs_cluster_nicename <- jobs_clustered %>% # NOTICE the names and numbers may not work with current run
  mutate(cluster = case_when(
    cluster == 1 ~ "Norwegian Energy Engineering",
    cluster == 2 ~ "Others",
    cluster == 3 ~ "Energy manufacturing & utilisation",
    cluster == 4 ~ "Danish & Norwegian Research",
    cluster == 5 ~ "Hydrogen manufacturing & others",
    cluster == 6 ~ "Management & Finance in Oslo & Copenhagen",
    TRUE ~ as.character(cluster)
  ))

df_hcl_nicename_long <- df_hcl_6 %>% # NOTICE the names and numbers may not work with current run
  mutate(cluster = case_when(
    cl == 1 ~ "Norwegian Energy Engineering",
    cl == 2 ~ "Others",
    cl == 3 ~ "Energy manufacturing & utilisation",
    cl == 4 ~ "Danish & Norwegian Research",
    cl == 5 ~ "Hydrogen manufacturing & others",
    cl == 6 ~ "Management & Finance in Oslo & Copenhagen",
    TRUE ~ as.character(cl)
  )) %>%
  relocate(cluster, .after = cl) %>%
  pivot_longer(-c(id, place, sector, cl, cluster), names_to = "competence", values_to = "n")
```

### Tables

```{r}
cluster_tbl_sectors <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Sectors = sector) %>%
  unique() %>%
  pivot_wider(names_from = "Sectors",
              values_from = Sectors) %>%
  unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
        sep = ", ", na.rm = TRUE)
  
cluster_tbl_jobroles <- jobs_cluster_nicename %>%
  select(Group = cluster, Region = place, Job_roles = competence) %>%
  unique() %>%
  pivot_wider(names_from = "Job_roles",
              values_from = Job_roles) %>%
  unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Other management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
        sep = ", ", na.rm = TRUE)

cluster_tbl_data <- cluster_tbl_sectors %>%
  merge(cluster_tbl_jobroles, by = c("Group", "Region"), all.x = TRUE)

cluster_tbl_data_short <- merge(
  cluster_tbl_data %>% select(Group, Regions = Region) %>% unique() %>%
    mutate(Regions = gsub("(.*), (.*)", "\\1 (\\2)", Regions)) %>%
    pivot_wider(names_from = "Regions", 
                values_from = Regions) %>%
    unite("Regions", "Agder (NO)", "Dalarna (SE)", "Gotland (SE)", "Gävleborg (SE)", 
          "Halland (SE)", "Hovedstaden (DK)", "Jämtland (SE)", "Kalmar (SE)", 
          "Kronoberg (SE)", "Midtjylland (DK)", "Møre og Romsdal (NO)", "Nordjylland (DK)", 
          "Nordland (NO)", "Norrbotten (SE)", "Oslo (NO)", "Rogaland (NO)", "Sjælland (DK)", 
          "Skåne (SE)", "Stockholm (SE)", "Syddanmark (DK)", "Södermanland (SE)", 
          "Troms og Finnmark (NO)", "Trøndelag (NO)", "Uppsala (SE)", 
          "Vestfold og Telemark (NO)", "Vestland (NO)", "Viken (NO)", "Värmland (SE)", 
          "Västerbotten (SE)", "Västernorrland (SE)", "Västmanland (SE)", 
          "Västra Götaland (SE)", "Östergötland (SE)",
          sep = ", ", na.rm = TRUE),
  jobs_cluster_nicename %>%
    select(Group = cluster, Sectors = sector) %>%
    unique() %>%
    pivot_wider(names_from = "Sectors",
                values_from = Sectors) %>%
    unite("Sectors", Chemicals, "Consulting","Energy technology manufacturer","Energy utility", "Fossil fuel & Refinery", "Government & Public sector", "Hydrogen technology manufacturer", "Legal & Economics", "Metals & Mining", "Other", "Other manufacturing","Research & Education", "Transport",
          sep = ", ", na.rm = TRUE),
  by = "Group", all.x = TRUE
  ) %>%
  merge(
    jobs_cluster_nicename %>%
    select(Group = cluster, Job_roles = competence) %>%
    unique() %>%
    pivot_wider(names_from = "Job_roles",
                values_from = Job_roles) %>%
    unite("Job_Roles", "Administration","Engineering", "Environmental",
        "Finance & Business development","HR", "IT & Data science", "Law", "Other", "Other management","PhD", "Procurement & Logistics", "Project managment", "Public administration", "Quality assurance", "Researcher", "Sales & Customer service",  "Technician & Maintenance",
          sep = ", ", na.rm = TRUE),
    by = "Group", all.x = TRUE
  )

cluster_names <- c("Danish & Norwegian Research", "Hydrogen manufacturing & others", "Management & Finance in Oslo & Copenhagen", "Energy manufacturing & utilisation", "Norwegian Energy Engineering", "Others")

cluster_tbl_data_short_WITH_bold <- data.frame(
  Group = character(),
  Regions = character(),
  Sectors = character(),
  Job_Roles = character(),
  stringsAsFactors = FALSE
)

# Function to bold multiple words in a string
bold_words <- function(text, words) {
  for (word in words) {
    #print(paste0("Bold word: ", word))  # Debug print
    #print(paste0("Before: ", text))     # Debug print
    text <- gsub(word, paste0("<b>", word, "</b>"), text, fixed = TRUE)
    #print(paste0("After: ", text))      # Debug print
  }
  return(text)
}

for (i in 1:6) {
  cl_name <- cluster_names[i]
  
  total_jobs <- jobs_cluster_nicename %>%
    filter(cluster == cl_name) %>% 
    nrow()
  
  minimum_jobs <- total_jobs*.15
  
  bold_regions <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(place) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(place) %>%
    mutate(place = gsub("(.*), (.*)", "\\1 (\\2)", place))
  
  bold_sectors <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(sector) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(sector)
  
  bold_job_role <- jobs_cluster_nicename %>% 
    filter(cluster == cl_name) %>%
    group_by(competence) %>%
    summarise(n = n()) %>%
    ungroup() %>%
    filter(n >= minimum_jobs) %>%
    select(competence)
  
  cluster_row <-   cluster_tbl_data_short %>%
    filter(Group == cl_name) %>%
    mutate(
    Regions = bold_words(Regions, bold_regions$place),
    Sectors = bold_words(Sectors, bold_sectors$sector),
    Job_Roles = bold_words(Job_Roles, bold_job_role$competence)
  )
  # Add numbber of jobs to table
  cluster_row <- cluster_row %>% 
    cbind(data.frame( "n_jobs" =
      jobs_cluster_nicename %>%
        filter(cluster == cl_name) %>%
        nrow()
      )
    )
  
  cluster_tbl_data_short_WITH_bold <- cluster_tbl_data_short_WITH_bold %>%
    rbind(cluster_row)
  
}


# Create the gt table with HTML content
cluster_tbl_short_WITH_BOLD <- cluster_tbl_data_short_WITH_bold %>%
  gt() %>%
  tab_header(
    title = "Regions and Sectors by Group"
  ) %>%
  cols_label(
    Group = "Group",
    Regions = "Regions",
    Sectors = "Sectors",
    Job_Roles = "Job roles",
    n_jobs = "Number of jobs"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(Group, Regions, Sectors, Job_Roles, n_jobs)
    )
  ) %>%
  # Enable HTML rendering in the cells
  fmt_markdown(columns = c(Regions, Sectors, Job_Roles))

# Print the table
cluster_tbl_short_WITH_BOLD

cluster_tbl_short_WITH_BOLD %>% gtsave("figs/cluster_paper_plots/cluster_tbl_short_WITH_BOLD.png", vheight = 744, vwidth = 1250)
```

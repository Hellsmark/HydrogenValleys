---
title: "Analysis"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Libraries

```{r}
library(tidyverse)
library(rlang)
library(stringr)
library(broom)
library(ggthemes)
library(ggrepel)
library(tidygraph)
library(ggraph)
library(googlesheets4)
library(gtsummary)
library(gt)
library(gtExtras)
library(patchwork)

```

# Data

```{r}
ss <- "https://docs.google.com/spreadsheets/d/1xzpre5Ej_7OEGRU4EA7KZuMQnSz5YCyTx5Sdbml6bQE/edit#gid=0"

df_main_raw <- read_sheet(ss, sheet = "Main")
geo_locations_raw <- read_sheet(ss, sheet = "locations_coord", range = "B:J")

df_companies <- read_sheet(ss, sheet = "CompanyAnalysis")
df_job_roles <- read_sheet(ss, sheet = "Job_roles")
#keywords_raw <- read_sheet(ss, sheet = "Keywords")

#cities <- read_csv2("data/ai_cities_cleaned.csv") # Needs to be checked
#regions_raw <- read_csv2("data/locations_regions.csv")
#regions_pop_raw <- read_csv2("data/regions_population.csv")

workforce_gdp <- tribble(
  ~Country, ~Workforce, ~GDP_per_capita_kUSD, ~GDP_total_billion_USD, 
  "SE", 5.2, 56, 592,  
  "NO", 2.8, 109, 593,
  "DK", 3.0, 67, 400
  )

```

# Wrangel

```{r}
geo <- geo_locations_raw %>% janitor::clean_names()



job_roles <- df_job_roles %>%
  select(ID, job_role = Job_role)

jobs <- df_main_raw %>% 
  inner_join(geo, by = c("Location"="new_name")) %>% # obs multi-multi konflikt. Åtgärda sedan
  mutate(publish_country = case_when(
    str_detect(ID, pattern ="^1") ~ "SE", 
    str_detect(ID, pattern ="^2") ~ "NO",
    str_detect(ID, pattern ="^3") ~ "DK"
  )) %>%
  mutate(Scrape_date = lubridate::ymd(Scrape_date)) %>%
  filter(Scrape_date >= "2023-08-20") %>%
  left_join(job_roles)

max(jobs$Scrape_date)

companies <- df_companies %>% slice(-1)

```

```{r}

location_all <- jobs %>% 
  group_by(Location) %>%
  summarise(new_jobs = n()) %>% 
  left_join(geo, by = c("Location" ="municipality_city")) %>%
  na.omit() %>%
  rename("location" = "Location") %>%
  select(-new_name) %>%
  unique()

```

### lm new jobs \~ locations - all countries

-   linear model of all new jobs in all three countries (red line)

```{r}
lm_location <- lm(new_jobs ~ loc_pop, data = location_all)

summary(lm_location)
tidy(lm_location)

lm_gl <- glance(lm_location)
r2_p_all <- paste("R2:", round(lm_gl$r.squared, 2), "&\n", ifelse(lm_gl$p.value < 0.05, "p< 0.05", "p>0.05"))  

```

### lm new jobs \~ locations - per country

-   same as above but per country

```{r}
lm_data <- location_all %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ loc_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_dk <- lm_data %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_se <- lm_data %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_no <- lm_data %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_dk <- paste("R2:", round(lm_dk$r.squared, 2), "&\n", ifelse(lm_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_se <- paste("R2:", round(lm_se$r.squared, 2), "&\n", ifelse(lm_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_no <- paste("R2:", round(lm_no$r.squared, 2), "&\n", ifelse(lm_no$p.value < 0.05, "p< 0.05", "p>0.05"))  

# identifing outlier (2*sd)
outliers <- lm_data %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(location = map(data, ~.x$location),
         region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(location, region, outliers)) %>%
  relocate(location:region, .after = "country") %>%
  filter(outlier)

```

## \### Plot between location and new jobs

```{r}
location_all %>% 
  ggplot(aes(x= round(loc_pop/1e3), y= new_jobs, colour = country)) + 
  geom_smooth(aes(round(loc_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 2.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_smooth(method = "lm", show.legend = F, se = F, 
              linewidth = 1.5, alpha =0.7)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = paste0(location, "\n(",region,")"),
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers)+
  scale_color_colorblind("Country")+
  scale_size_continuous(range = c(1,4)) +
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=750, y =190, label = r2_p_no)+
  annotate("text", x=850, y =140, label = r2_p_dk)+
  annotate("text", x=950, y =90, label = r2_p_all)+
  annotate("text", x=950, y =50, label = r2_p_se)+
  theme_minimal() +
  guides(size = "none")+
  theme(legend.position = "top") 
ggsave("figs/location_new_jobs.png", dpi = 600, width = 8, height = 4)
```

-   For all three countries it appears to be a linear relationship
-   It appears to be more outliers in Norway and Denmark than in Sweden. However, some locations are close to another and part of a larger region

### lm new jobs \~ region

-   now same thing but on a regional level.
-   I think we keep this one in favor of "location" since its easier to allocate the different locations to a region compared to finding a consistent "location"

#### lm new jobs \~ region, all countries

```{r}
region_new_jobs <- location_all %>% 
  group_by(region, reg_pop, country) %>%
  summarise(new_jobs = sum(new_jobs)) %>%
  ungroup()

lm_regions <- lm(new_jobs ~ reg_pop, data = region_new_jobs)

# looking at mdl results
glance(lm_regions)
summary(lm_regions)
tidy(lm_regions)

# extract data for annotating the plot
lm_gl <- glance(lm_regions)
r2_p_all <- paste("R2:", round(lm_gl$r.squared, 2), "&\n", ifelse(lm_gl$p.value < 0.05, "p< 0.05", "p>0.05"))  

```

#### lm new jobs \~ region per country

```{r}

lm_data_reg <- region_new_jobs %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ reg_pop, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_dk <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_se <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_no <- lm_data_reg %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_dk <- paste("R2:", round(lm_dk$r.squared, 2), "&\n", ifelse(lm_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_se <- paste("R2:", round(lm_se$r.squared, 2), "&\n", ifelse(lm_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_no <- paste("R2:", round(lm_no$r.squared, 2), "&\n", ifelse(lm_no$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg <- lm_data_reg %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std <- lm_data_reg %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))

```

### Plot between region and new jobs

-   note: only names of outlier mentioned in graph

```{r}
region_new_jobs <- location_all %>% 
  group_by(region, reg_pop, country) %>%
  summarise(new_jobs = sum(new_jobs)) %>%
  ungroup()


region_new_jobs %>% 
  ggplot(aes(round(reg_pop/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(reg_pop/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "Population in thousands", y= "Nr. of new jobs") +
  annotate("text", x=1200, y =250, label = r2_p_no)+
  annotate("text", x=1600, y =200, label = r2_p_dk)+
  annotate("text", x=2000, y =150, label = r2_p_all)+
  annotate("text", x=2000, y =60, label = r2_p_se)+
  theme_minimal() +
  theme(legend.position = "top")
ggsave("figs/all_region_pop.png", dpi= 600, width = 8, height = 4)

```

# Outlier tables

```{r}
outlier_tbl <- function(df,std_size){
  
  df %>%
  gt() %>%
  tab_header(
    title = paste0("Regions diverting ",as.character(std_size)," or more standard deviation",ifelse(std_size==1,"","s")," from model")
  ) %>%
  cols_label(
    region = "Region",
    country = "Country",
    reg_pop = "Population",
    new_jobs = "Number of new jobs",
    fitted = "Fitted number of jobs",
    residual = "Residual"
  ) %>%
  tab_options(
    table.font.size = px(12),
    heading.align = "left",
    table.border.left.style = "solid",
    table.border.left.width = px(1),
    table.border.left.color = "lightgrey",
    table.border.right.style = "solid",
    table.border.right.width = px(1),
    table.border.right.color = "lightgrey"
  ) %>%
  tab_style(
    style = cell_borders(
      sides = "right",
      color = "lightgrey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = c(region, country, reg_pop, new_jobs, fitted, residual)
    )
  )
}

# Title: Regions diverting 2 standard deviations from mdoel
# Country # Region # Population # New jobs # Fitted number # Residuals

reg_2_std <- outliers_reg %>% select(region, country,reg_pop,new_jobs,fitted = .fitted, residual = .resid) %>% ungroup() %>% arrange(desc(abs(residual)))

reg_2_std_tbl <- outlier_tbl(reg_2_std,2)

# Title: Regions diverting 1 standard deviations from mdoel
# Country # Region # Population # New jobs # Fitted number # Residuals
reg_1_std <- outliers_reg_1_2_std %>% select(region, country,reg_pop,new_jobs,fitted = .fitted, residual = .resid) %>% ungroup() %>% arrange(desc(abs(residual)))

reg_1_std_tbl <- outlier_tbl(reg_1_std,1)

reg_2_std_tbl %>% gtsave("figs/cluster_paper_plots/reg_2_std_tbl.png")
reg_1_std_tbl %>% gtsave("figs/cluster_paper_plots/reg_1_std_tbl.png")
```

# GDP DATA and regression

```{r}
regional_GDP <- data.frame(
  region = c("Agder","Dalarna","Gotland","Gävleborg","Halland",
             "Hovedstaden","Jämtland","Kalmar","Kronoberg","Midtjylland",
             "Møre og Romsdal","Nordjylland","Nordland","Norrbotten","Oslo",
             "Rogaland","Sjælland","Skåne","Stockholm","Syddanmark",
             "Södermanland","Troms og Finnmark","Trøndelag","Uppsala","Vestfold og Telemark",
             "Vestland","Viken","Värmland","Västerbotten","Västernorrland",
             "Västmanland","Västra Götaland","Östergötland"),
  GDP_per_capita = c(43875.66, 37230, 33200.4, 35740.8, 35828.4, 
                     90115.2, 36967.2, 35565.6, 44500.8, 56322,
                     47459.64, 48678.3, 47400.87, 56764.8, 89641.92,
                     57537.98, 39827.7, 39682.8, 63860.4, 53908.2,
                     33112.8, 48124.87, 48796.7, 42223.2, 42657.43,
                     50329.07, 43203.05, 37317.6, 41434.8, 40996.8,
                     36354, 45289.2, 40646.4)
  ) %>%
  left_join(region_new_jobs) %>%
  select(country,region,reg_pop,GDP_per_capita,new_jobs)

#Info from
#https://www.dst.dk/en/Statistik/emner/oekonomi/nationalregnskab/regionalfordelt-nationalregnskab
#https://en.wikipedia.org/wiki/List_of_Norwegian_counties_by_GDP
#https://en.wikipedia.org/wiki/List_of_Swedish_counties_by_GDP
#https://www.exchangerates.org.uk/SEK-EUR-spot-exchange-rates-history-2024.html
```

```{r}
krone_to_EUR <- function(kr,country){
  kr_EUR <- data.frame(land = c("DK","NO","SE"), exchange = c(0.1341,0.0868,0.0876)) %>% 
    filter(land == country)
  rate <- kr_EUR$exchange
  EUR <- kr*rate
  return(EUR)
}

krone_to_EUR(464000										, "SE")
```

lm

```{r}

lm_regions_gdp <- lm(new_jobs ~ GDP_per_capita, data = regional_GDP)

# looking at mdl results
glance(lm_regions_gdp)
summary(lm_regions_gdp)
tidy(lm_regions_gdp)

# extract data for annotating the plot
lm_gl_gdp <- glance(lm_regions_gdp)
r2_p_gdp_all <- paste("R2:", round(lm_gl_gdp$r.squared, 2), "&\n", ifelse(lm_gl_gdp$p.value < 0.05, "p< 0.05", "p>0.05"))  


###

lm_data_reg_gdp <- regional_GDP %>% 
  group_by(country) %>%
  nest(data = -country) %>% 
  mutate(lm = map(data, ~lm(new_jobs ~ GDP_per_capita, data = .))) %>%
  mutate(tidy = map(lm, ~tidy(.)),
         glance = map(lm, ~glance(.)), 
         aug = map(lm, ~augment(.))) 

lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance)

# extract data for annotating the plot
lm_gdp_dk <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Denmark")
lm_gdp_se <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Sweden")
lm_gdp_no <- lm_data_reg_gdp %>% select(country, glance) %>% unnest(glance) %>% filter(country == "Norway")

r2_p_gdp_dk <- paste("R2:", round(lm_gdp_dk$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_dk$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_gdp_se <- paste("R2:", round(lm_gdp_se$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_se$p.value < 0.05, "p< 0.05", "p>0.05"))  
r2_p_gdp_no <- paste("R2:", round(lm_gdp_no$r.squared, 2), 
                     "&\n", ifelse(lm_gdp_no$p.value < 0.05, "p< 0.05", "p>0.05"))  


outliers_reg_gdp <- lm_data_reg_gdp %>%
  mutate(outliers = map(aug, ~.x %>%
                          mutate(outlier = abs(.resid) > 2*sd(.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier)

outliers_reg_1_2_std_gdp <- lm_data_reg_gdp %>%
  mutate(outliers = map(aug, ~.x %>%
                        mutate(outlier = abs(.resid) > sd(.resid),
                               abs_std_resid = abs(.std.resid)))) %>%
  select(country, data, outliers) %>%
  mutate(region = map(data, ~.x$region)) %>%
  select(-data) %>%
  unnest(c(region, outliers)) %>%
  relocate(region, .after = "country") %>%
  filter(outlier) %>%
  mutate(abs_resid = abs(.resid))

###

gdp_jobs_plot <- regional_GDP %>% 
  ggplot(aes(round(GDP_per_capita/1e3), new_jobs, 
             colour = country)) + 
  geom_smooth(linewidth = 1.5, alpha = 0.7, 
              method = "lm", se=F, inherit.aes = T, show.legend = F)+
  geom_smooth(aes(round(GDP_per_capita/1e3), new_jobs),
              color = "darkred", linetype = "dashed",
              linewidth = 1.5, alpha = 0.7,
              method = "lm", se=F, 
              inherit.aes = F, show.legend = F)+
  geom_point(aes(size= new_jobs), alpha = 0.7) + 
  geom_label_repel(aes(label = region,
                       color = country), 
                  size = 2, alpha =1,
                  show.legend = F,
                  data = outliers_reg_gdp)+
  scale_color_colorblind(" ")+
  scale_size_continuous(range = c(1,4)) +
  guides(size = "none")+
  labs(x= "GDP per capita in kEUR", y= "Nr. of new jobs") +
  annotate("text", x=75, y =300, label = r2_p_gdp_no)+
  annotate("text", x=90, y =205, label = r2_p_gdp_dk)+
  annotate("text", x=92, y =295, label = r2_p_gdp_all)+
  annotate("text", x=68, y =50, label = r2_p_gdp_se)+
  theme_minimal() +
  theme(legend.position = "top")

gdp_jobs_plot
ggsave(filename = "figs/gdp_jobs_plot.png", plot = gdp_jobs_plot, limitsize = FALSE, width = 8, height = 5)
```

# Trying to make maps...

Once again trying to visualize data on maps without any good result

```{r}
library(rnaturalearth)
library(rnaturalearthdata)
world <- ne_countries(scale = "medium", returnclass = "sf")
admin1 <- ne_states(country = c("Sweden", "Norway", "Denmark"), returnclass = "sf")


regionsss <- location_all %>% select(Country_code,region) %>% unique()
# Viken, Vestland, 
# Troms og Finnmark, Agder 
```

```{r}
library(osmdata)
library(sf)
library(ggplot2)

# Define the Swedish regions of interest
regions_of_interest <- c("Norrbotten", "Västra Götaland", "Uppsala", "Södermanland",
                         "Halland", "Dalarna", "Östergötland", "Gotland", "Gävleborg",
                         "Skåne", "Värmland", "Västernorrland", "Kalmar", "Västerbotten",
                         "Stockholm", "Västmanland", "Kronoberg", "Jämtland")

# Define a function to get OSM data for a specific region by bounding box
get_region_data <- function(region) {
  place_name <- paste(region, "Sweden", sep = ", ")
  
  # Get the bounding box for the place
  bbox <- getbb(place_name, format_out = "data.frame")
  
  if (is.null(bbox)) {
    print(paste("No bounding box found for:", region))
    return(NULL)
  }
  
  # Create the OSM query
  query <- opq(bbox = bbox) %>%
    add_osm_feature(key = "boundary", value = "administrative") %>%
    add_osm_feature(key = "name", value = region)
  
  # Fetch the data
  osm_data <- osmdata_sf(query)
  
  # Check if osm_polygons are available
  if ("osm_polygons" %in% names(osm_data)) {
    polygons <- osm_data$osm_polygons
    
    # Ensure the polygons have a name column
    if (nrow(polygons) > 0) {
      polygons$name <- region
      return(polygons)
    } else {
      print(paste("No data for region:", region))
      return(NULL)
    }
  } else {
    print(paste("osm_polygons not found for region:", region))
    return(NULL)
  }
}

# Initialize an empty list to store region data
region_boundaries <- list()

# Retrieve data for each region
for (region in regions_of_interest) {
  print(paste("Fetching data for region:", region))
  region_data <- get_region_data(region)
  if (!is.null(region_data)) {
    region_boundaries[[region]] <- region_data
  }
}

# Combine all region boundaries into a single spatial object
if (length(region_boundaries) > 0) {
  all_regions <- do.call(rbind, region_boundaries)
  
  # Plot the regions using ggplot2
  ggplot(data = all_regions) +
    geom_sf(aes(fill = name), color = "black") +
    theme_minimal() +
    labs(title = "Map of Selected Swedish Regions") +
    theme(
      plot.title = element_text(size = 14, face = "bold"),
      legend.position = "right"
    )
} else {
  print("No data retrieved for the specified regions.")
}
```

```{r}
retrieve_region_data <- function(region,boundary_choice) {
  place_name <- paste(region, "Sweden", sep = ", ")
  
  # Get the bounding box for the place
  bbox <- getbb(place_name, format_out = "data.frame")
  
  if (is.null(bbox)) {
    print(paste("No bounding box found for:", region))
    return(NULL)
  }
  
  # Create the OSM query
  query <- opq(bbox = bbox) %>%
    add_osm_feature(key = "boundary", value = boundary_choice) %>%
    add_osm_feature(key = "name", value = region)
  
  # Fetch the data
  osm_data <- osmdata_sf(query)
  
  # Check if osm_polygons are available
  if ("osm_polygons" %in% names(osm_data)) {
    polygons <- osm_data$osm_polygons
    
    # Ensure the polygons have a name column
    if (nrow(polygons) > 0) {
      polygons$name <- region
      return(polygons)
    } else {
      print(paste("No data for region:", region))
      return(NULL)
    }
  } else {
    print(paste("osm_polygons not found for region:", region))
    return(NULL)
  }
}

norrbotten <- retrieve_region_data("Norrbotten","historic")
```

```{r}


 #Define the bounding box for Norrbotten, Sweden
# You may need to adjust these coordinates to fit Norrbotten accurately.
bbox <- c(left = 18.0, bottom = 64.0, right = 22.5, top = 70.0)

# Create the OSM query
query <- opq(bbox = bbox) %>%
  add_osm_feature(key = "name", value = "Norrbotten") %>%
  add_osm_feature(key = "historic", value = "boundary")  # Specify historic boundary if applicable

# Fetch the data
osm_data <- osmdata_sf(query)

# Check if osm_polygons are available
if ("osm_polygons" %in% names(osm_data)) {
  norrbotten <- osm_data$osm_polygons
  
  # Check if the polygons have data
  if (nrow(norrbotten) > 0) {
    # Plot the data
    ggplot(data = norrbotten) +
      geom_sf(fill = "lightblue", color = "black") +
      theme_minimal() +
      labs(title = "Boundary of Norrbotten, Sweden") +
      theme(
        plot.title = element_text(size = 14, face = "bold"),
        legend.position = "bottom"
      )
  } else {
    print("No data found for Norrbotten.")
  }
} else {
  print("No polygons found in the OSM data.")
}
```

```{r}
library(tidyverse)
library(googlesheets4)
library(lubridate)
library(openintro)
library(maps)
library(ggmap)
library(ggthemes)
gs4_deauth()




swedish_map <- get_stadiamap(
  bbox = c(left = 10.6, bottom = 54.5, right = 24.7, top = 69.2),
  zoom = 5
)

ggmap(swedish_map)
```

Most successful attempt

```{r}
# this script creates a map of bus stops in the la candelaria neighbourhood
library(ggspatial)
library(osmdata)
library(sf)
library(tidyverse)
library(ggpattern)

#Maps collected from
#SE - https://github.com/okfse/sweden-geojson/blob/master/swedish_regions.geojson
#NO - https://github.com/ivanhjel/counties_norway_2024/blob/main/counties_norway_2024.geojson
#DK - https://github.com/ok-dk/dagi/blob/master/geojson/regioner.geojson

swedish_regions <- read_sf("https://raw.githubusercontent.com/okfse/sweden-geojson/master/swedish_regions.geojson") %>%
  janitor::clean_names() %>%
  select(name)

regions_of_interest_se <- c("Norrbotten", "Västra Götaland", "Uppsala", "Södermanland",
                         "Halland", "Dalarna", "Östergötland", "Gotland", "Gävleborg",
                         "Skåne", "Värmland", "Västernorrland", "Kalmar", "Västerbotten",
                         "Stockholm", "Västmanland", "Kronoberg", "Jämtland")

specific_regions_se <- swedish_regions %>%
  filter(name %in% regions_of_interest_se)


#bus_stops <- specific_regions_se %>% 
 # st_bbox() %>%
  #opq() %>%
#  add_osm_feature(key = "highway", value = "bus_stop") %>%
 # osmdata_sf()

#bus_stop_points <- bind_rows(
 # pluck(bus_stops,"osm_points"),
  #st_centroid(pluck(bus_stops,"osm_polygons"))
#)

region_map_se <- ggplot() + 
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = specific_regions_se, colour = "grey40", fill = NA, linewidth = 1.5) +
  theme_void()

###

norwegian_regions <- read_sf("https://raw.githubusercontent.com/ivanhjel/counties_norway_2024/main/counties_norway_2024.geojson") %>%
  janitor::clean_names() %>%
  select(name = navn)

regions_of_interest_no <- c("Agder", "Møre og Romsdal", "Nordland", "Oslo", "Rogaland",
                            "Troms og Finnmark", "Troms", "Finnmark", "Trøndelag", 
                            "Vestfold og Telemark", "Vestfold", "Telemark",
                            "Vestland", "Viken")

specific_regions_no <- norwegian_regions %>%
  filter(name %in% regions_of_interest_no)

region_map_no <- ggplot() + 
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = norwegian_regions, colour = "grey40", fill = NA, linewidth = 1.5) +
  theme_void()




###

danish_regions <- read_sf("https://raw.githubusercontent.com/ok-dk/dagi/master/geojson/regioner.geojson") %>%
  janitor::clean_names() %>%
  select(name = regionnavn)

regions_of_interest_dk <- c("Region Hovedstaden", "Region Nordjylland", "Region Syddanmark",
                            "Region Sjælland", "Region Midtjylland")

specific_regions_dk <- norwegian_regions %>%
  filter(name %in% regions_of_interest_no)

region_map_dk <- ggplot() + 
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = danish_regions, 
          aes(fill = case_when(
            name == "Region Hovedstaden" ~ "red",
            name == "Region Nordjylland" ~ "blue",  # Replace with the actual region name
            TRUE ~ NA_character_  # Default to no fill
          )), 
          colour = "grey40", linewidth = 0.5) +
  scale_fill_identity() +  # Use scale_fill_identity for direct color mapping
  theme_void()


###

```

```{r}


# Function to check and repair geometries
repair_geometries <- function(data) {
  # Check validity
  if (!all(st_is_valid(data))) {
    # Repair invalid geometries
    data <- st_make_valid(data)
  }
  return(data)
}

# Apply the function to each dataset
swedish_regions <- repair_geometries(swedish_regions)
norwegian_regions <- repair_geometries(norwegian_regions)
danish_regions <- repair_geometries(danish_regions)

# Function to convert 3D geometries to 2D by removing Z-dimension
convert_to_2d <- function(data) {
  st_transform(data, crs = st_crs(4326)) %>%  # Ensure CRS is WGS84
    st_zm(drop = TRUE, what = "ZM")  # Remove Z-dimension
}

# Convert Danish geometries to 2D
danish_regions_2d <- convert_to_2d(danish_regions) %>%
  mutate(name = sub("^Region ", "", name))

all_regions <- bind_rows(
  swedish_regions %>% mutate(country = "Sweden"),
  norwegian_regions %>% mutate(country = "Norway"),
  danish_regions_2d %>% mutate(country = "Denmark")
)

# Plot the combined map
combined_map <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0) +
  geom_sf(data = all_regions, aes(fill = country), colour = "grey40", linewidth = 0.5) +
  scale_fill_manual(values = c("Sweden" = "lightblue", "Norway" = "lightgreen", "Denmark" = "lightpink")) +
 theme_void()
```

### Region colored

```{r}
# Define your group memberships
all_regions <- bind_rows(
  swedish_regions %>% mutate(country = "Sweden"),
  norwegian_regions %>% mutate(country = "Norway"),
  danish_regions_2d %>% mutate(country = "Denmark")
)

regions_for_groups <- jobs_cluster_nicename %>%
  separate(place, into = c("region", "country"), sep = ", ") %>%
  select(region,cluster) %>% unique()

norwegian_region_update <- data.frame(
  region = c("Østfold", "Østfold", "Østfold", 
             "Akershus", "Akershus", "Akershus", 
             "Buskerud", "Buskerud", "Buskerud",
             "Vestfold", "Vestfold", 
             "Telemark", "Telemark", 
             "Troms", "Troms",
             "Finnmark", "Finnmark"
             ),  
  cluster = c("Norwegian Engineering", "Others", "Nordic Broad Energy", 
              "Norwegian Engineering", "Others", "Nordic Broad Energy",
              "Norwegian Engineering", "Others", "Nordic Broad Energy",
              "Others", "Nordic Broad Energy",
              "Others", "Nordic Broad Energy",
              "Others", "Nordic Broad Energy",
              "Others", "Nordic Broad Energy"
              )
  )

# Add new rows to the existing DataFrame using pipes
regions_for_groups <- regions_for_groups %>%
  bind_rows(norwegian_region_update)
  
group_definitions <- list(
  Group1 = regions_for_groups %>% 
    filter(cluster == "Norwegian Engineering") %>% unique() %>% pull(region),
  Group2 = regions_for_groups %>% 
    filter(cluster == "Central offices in Oslo/Copenhagen") %>% unique() %>% pull(region),
  Group3 = regions_for_groups %>% 
    filter(cluster == "Danish and Norwegian Research") %>% unique() %>% pull(region),
  Group4 = regions_for_groups %>% 
    filter(cluster == "Nordic Broad Energy") %>% unique() %>% pull(region)
)

# Assign colors to groups, using "0" for non-grouped regions
group_colors <- c(
  "0" = "grey", "1" = "lightblue", "2" = "lightpink", "3" = "lightgreen", "4" = "lightyellow"
)

# Create a new column for group pattern
all_regions <- all_regions %>%
  rowwise() %>%
  mutate(
    group_pattern = paste0(
      ifelse(name %in% group_definitions$Group1, "1", ""),
      ifelse(name %in% group_definitions$Group2, "2", ""),
      ifelse(name %in% group_definitions$Group3, "3", ""),
      ifelse(name %in% group_definitions$Group4, "4", "")
    ),
    # Assign "0" for non-grouped regions
    group_pattern = ifelse(group_pattern == "", "0", group_pattern)
  ) %>%
  ungroup()

# Function to get stripe colors for overlaps
get_stripe_colors <- function(pattern) {
  colors <- unlist(strsplit(pattern, ""))
  return(group_colors[colors])
}

# Build color mapping for overlaps
overlap_colors <- unique(all_regions$group_pattern)
stripe_colors <- lapply(overlap_colors, get_stripe_colors)

names(stripe_colors) <- overlap_colors

# Create the plot
combined_map <- ggplot() +
  # Use geom_sf for solid regions
  geom_sf(
    data = all_regions %>% filter(nchar(group_pattern) <= 1),
    aes(fill = group_pattern),
    colour = "grey40",
    linewidth = 0.5
  ) +
  # Use geom_sf_pattern for striped regions
  geom_sf_pattern(
    data = all_regions %>% filter(nchar(group_pattern) > 1),
    aes(pattern = group_pattern, pattern_fill = group_pattern),
    colour = "grey40",
    linewidth = 0.5,
    pattern_density = 1,
    pattern_spacing = 0.01
  ) +
  # Scale for solid fill colors
  scale_fill_manual(values = group_colors) +
  # Scale for striped pattern fill colors
  scale_pattern_manual(values = rep("stripe", length(overlap_colors))) +
  scale_pattern_fill_manual(values = stripe_colors) +
  theme_void() +
  theme(legend.position = "none")

combined_map


ggsave(filename = "figs/combined_map.png", plot = combined_map, limitsize = FALSE, width = 8, height = 5)
```

```{r}




```
